
== 2010-01-17 ==

 * I think that lingwo_dictionary should be dependent on i18ntaxonomy, because without it, the
   Part Of Speech isn't copied over in translations.  Although, you could say that lingwo_dictionary
   could maybe be useful without translations..  Not sure yet.

== 2010-01-09 ==

 * Create a series of lingwo_dictionary_entry_* functions and put them into lingwo_dictionary.entry.inc
   so we can keep these conceptually seperate.

== 2009-11-27 ==

 * Start working with the 'features' module.  As I see it, we have two features we should create:

   (1) A feature for setting up lingwo_dictionary which enables the correct modules, creates
       the 'entry' content type, etc..

   (2) A feature for setting up the syndictation stuff, which involves making a few content
       types and wiring them together in the appropriate way.

 * Bug: Creating a new Entry with no fields results in the following error:

   user warning: Column 'field_fields_type' cannot be null query: content_write_record /* admin : content_write_record */ INSERT INTO content_field_fields (vid, nid, delta, field_fields_type, field_fields_name, field_fields_value, field_fields_automatic) VALUES (213, 148, 0, NULL, NULL, NULL, 1) in /home/dsnopek/www/cck_test/root/sites/all/modules/cck/content.module on line 1213.

== 2009-11-13 ==

The next big steps as I see them are:

 1. Start working to make a *viable* Polish dictionary, that means:

    * Finishing the morphology definition and gearing it to web entry.
	  - We don't have past tense of verbs!!
	  - Verb conjugation categories are overly simple, copying pl.wiktionary.org's categories
	    would probably be a good idea.

	* Fixing bugs in the Sense entry field.

	* Ensuring that entries are unique by headword / pos / language.

	* Provide a search/lookup mechanism

 2. Start working on wikitionary import.  This will probably dictate alot of the decisions for
    what fields end up on an Entry and maybe force the related entries issue.  This will also
	include working with services to actually add the entries.  Ideally this should be progressive
	but in the initial version it doesn't need to be.

After these steps are complete, we can start look to the next big piece of the puzzle and that
is the annotator.  We can't really have an annotator without a working dictionary.

== 2009-11-05 ==

 * We need to figure out the best way to store 'fields' so that views can do searches
   on the individual field values.  We *will* want to be able to create a view that
   shows only Polish feminine nouns, or all the Polish soft adjectives, etc..  This
   probably means having (name, value) pairs in the database and *may* require doing
   views integration manually instead of via default CCK action.

== 2009-11-04 ==

 * Begin implementing the below described idea by first keeping the type of data that
   would be stored a language definition (besides the morphology) hard-coded and let
   it be retreived using lingwo_dictionary_language_settings($lang).  Later this function
   will be converted to a much more sophisticated look-up.

   Phase two will be eventually creating the content-type and just putting raw JavaScript
   into it.

   Phase three will be implementing the JavaScript IDE with only support for messing with
   which fields are available and their UI properties.

   Phase four will be packing the morphology definitions into the IDE and the testing stuff
   (since I won't be able to develop new morphology definitions if I can't do testing).

   Then these can be completely exposed for others to mess with.

 * New idea for the "language definitions".  Right now I've been hacking on putting
   "Dictionary Fields" under the "Edit Language" page and saving the data as a dumped Array.
   But it would be better to store a language definition as a special node and then have
   something on the "Edit Language" page that selects this language definition as the 
   canonical one.

   The advantages of this are that anyone could create a 'language definition' node, edit
   it and test it, then it can be swapped as the canonical language node.  It would also
   allow for integrated testing, speed, all good things.

   So, I'm thinking we store a PHP Array or JSON Object as the body of the 'language definition'
   node.  Then we include a special JavaScript'd out editor, which will provide a two paned view
   (like in an IDE) with a tree of things to edit on the left and an editting area on the right.
   [For degradability, this could be done as a <ul> on the left and a series of <div>'s with
   <textareas> on the right, which is magically converted to the JavaScript'd out controls]

   Things that can be edited, would include the list of classes/options/forms for each
   POS (as taken from the POS taxonomy).  Each of these would contain (possibly) some 
   UI information (order, description, where they should go) and the possibility of a
   JavaScript function to be put in the morphology definition.  JavaScript fields would
   get some slick JS-enabled editor.

   The code for generating the alphabet would also be there, along with a way to view the
   resulting alphabet and see if it matches what you want.

   All these little bits would be combined to create the morphology definition, which would
   definitely be cached on disk when its selected as the canonical definition.

   There would be a section that contains test cases.  Test cases can be imported from the
   existing dictionary and modified or simply created here (they'd be new Entry({ ... })
   bits stashed in some array and a list of expected outcomes).

 * Create a 'Language' CCK field, which allows you to select a language from either
   (1) any Drupal language code, or (2) any activated language.  This would allow people to
   mark things as belonging to a language without changing its translation status in Drupal.

== 2009-07-06 ==

 * Remove 'weight' and 'remove_sense' from each sense before it is saved.

 * Put the info from "Translate" tab on the "View" area for original entries.  Also, make a more
   convenient/obvious link back to the original entry.
 
 * Remove the "Select translations for ___" section from the "Translation" tab.
 
 * Restore the links to the pages for translated words.

 * Fix the bug where new translations have one too many senses listed.

 * Try and fix AHAH!  There are so many weird issues with it I'm not sure what to do..

== 2009-07-03 ==

 * Make it so that we could use either the normal taxonomy form stuff or a content_taxonomy
   CCK field.  (Ie. it needs to disable it correctly).
 
== 2009-07-02 ==

 * Hi-jack the node edit form for the "entry" type and MAYBE make the language be the default
   language.
  
 * Use some validate hook to validate that "title", "language" and "Part of Speech" can't be 
   changed on an existing node or on a translation.

 * Hi-jack node save (or some validate hook?) and make sure that entries are unique by language,
   pos and title, add new nodes to the lingwo_dictionary_entry table.

== 2009-02-26 ==

 * Get searching and looking up definitions alot tighter (meaning easier to use for the end
   user).

== 2009-02-15 ==

 * Figure out proper 404 behaviour.

 * Figure out a good way to do the title on the translation view/edit pages.

 * Figure out a good way to link back to the entry from the translation view/edit pages.
 
 * Seperate the word translation from the "note" (ie. some info to go into paranthesis,
   or maybe just use convention, which is, if they write anything in parantheses?).  Or
   maybe the reverse, that either the whole thing is the word, or the contents of [brackets]
   are.  So, then the English translation of "szkolny", would be "pertaining to [school:noun]".
   Putting ":noun" is necessary because "szkolny" is an adjective, so it would default to link
   to "[school:adjective]".
 
 * Add the "Same as" selector on translation senses, so that senses can be consolidated.

== 2009-02-12 ==

 * Finish up "/languages":
   
   - Add a search bit, where we can try and find a language from keywords (fuzzily!)
     and the language code.

