<?php
// $Id$

/**
 * @file
 * For importing dictionary data from external sources
 */

// get our API functions
require_once DRUPAL_ROOT . '/' . 'lingwo_data.api.inc';

/**
 * Implements hook_menu().
 */
function lingwo_data_menu() {
  $items = array();

  $items['admin/config/lingwo/data'] = array(
    'title' => 'Data',
    'description' => 'Settings for Lingwo Data module.',
    'access arguments' => array('administer site configuration'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('lingwo_data_admin_settings'),
    'file' => 'lingwo_data.admin.inc',
    'type' => MENU_LOCAL_TASK,
  );

  $items['lingwo_data/ajax/import/%'] = array(
    'access arguments' => array('import lingwo_data entries'),
    'page callback' => '_lingwo_data_import_entry_callback',
    'page arguments' => array(3),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_menu_alter().
 */
function lingwo_data_menu_alter(&$items) {
  $type_url_str = str_replace('_', '-', LingwoEntry::$settings->content_type);
  $item = &$items['node/add/' . $type_url_str];
  $item['page callback'] = '_lingwo_data_node_add_entry_page';
}

/**
 * Implements hook_permission().
 */
function lingwo_data_permission() {
  return array(
    'import lingwo_data entries' => array(
      'title' => t('import lingwo_data entries'),
      'description' => t('TODO Add a description for \'import lingwo_data entries\''),
    ),
  );
}

/*
 * Implementation of hook_service()
 */
/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function lingwo_data_service() {
  return array(
    // lingwo_data.update_entry
    array(
      '#method' => 'lingwo_data.update_entry',
      '#callback' => 'lingwo_data_service_update_entry',
      '#access callback' => 'lingwo_data_service_update_entry_access',
      '#file' => array('file' => 'service.inc', 'module' => 'lingwo_data'),
      '#args' => array(
        array(
          '#name' => 'data',
          '#type' => 'string',
          '#description' => t('A JSON string representing an entry.'),
        ),
        array(
          '#name' => 'force_changed',
          '#type' => 'boolean',
          '#optional' => TRUE,
          '#default value' => FALSE,
          '#description' => t('Set to True to update entry even if it hasn\'t changed'),
        ),
      ),
      '#return' => 'string',
      '#help' => t('Update an entry in the database.'),
    ),
  );
}

/*
 * Implementation of hook_nodeapi().
 */
// Deal with storing/retrieving the 'imported' field
/**
 * Implements hook_node_load().
 */
function lingwo_data_node_load($node, $types) {
  $res = db_query("SELECT imported, imported_data FROM {lingwo_data_node_imported} WHERE vid = :vid", array(':vid' => $node->vid));

  $fields = db_fetch_array($res);
  if (empty($fields)) {
    $fields = array('imported' => 0);
  }

  return $fields;
}

/**
 * Implements hook_node_insert().
 */
function lingwo_data_node_insert($node) {
  if (!empty($node->revision) || $op == 'insert') {
    // create row
    drupal_write_record('lingwo_data_node_imported', $node);
  }
  else {
    // update row
    drupal_write_record('lingwo_data_node_imported', $node, 'vid');
  }
}

/**
 * Implements hook_node_update().
 */
function lingwo_data_node_update($node) {
  if (!empty($node->revision) || $op == 'insert') {
    // create row
    drupal_write_record('lingwo_data_node_imported', $node);
  }
  else {
    // update row
    drupal_write_record('lingwo_data_node_imported', $node, 'vid');
  }
}

/**
 * Implements hook_node_delete().
 */
function lingwo_data_node_delete($node) {
  // TODO Please review the conversion of this statement to the D7 database API syntax.
  /* db_query('DELETE FROM {lingwo_data_node_imported} WHERE nid = %d', $node->nid) */
  db_delete('lingwo_data_node_imported')
  ->condition('nid', $node->nid)
  ->execute();
}

/**
 * Implements hook_node_revision_delete().
 */
function lingwo_data_node_revision_delete($node) {
  // TODO Please review the conversion of this statement to the D7 database API syntax.
  /* db_query('DELETE FROM {lingwo_data_node_imported} WHERE vid = %d', $node->vid) */
  db_delete('lingwo_data_node_imported')
  ->condition('vid', $node->vid)
  ->execute();
}

/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function lingwo_data_nodeapi_OLD(&$node, $op, $a3 = NULL, $a4 = NULL) {
  // TODO Remaining code in this function needs to be moved to the appropriate new hook function.
  if ($node->type != LingwoEntry::$settings->content_type) {
    return;
  }
}

/*
 * Implementation of hook_form_alter().
 */
/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function lingwo_data_form_alter(&$form, $form_state, $form_id) {
  if ($form_id == LingwoEntry::$settings->content_type . '_node_form') {
    $node = $form['#node'];

    $form['imported'] = array(
      '#type' => 'hidden',
      // we automatically set this to '0' unless the field magically gets set to '-1'
      '#value' => ($form_state['values']['imported'] == -1) ? '1' : '0',
    );

    $form['imported_data'] = array(
      '#type' => 'hidden',
      '#value' => $form_state['values']['imported_data'],
    );
  }
}

/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function lingwo_data_import_entry($language, $pos, $headword) {
  $entry_id = implode(':', array($language, $pos, $headword));

  // check if the entry is in the blacklist
  $blacklist = array_filter(array_map('trim', explode("\n", LingwoImport::$settings->importer_blacklist)));
  if (in_array($entry_id, $blacklist)) {
    return FALSE;
  }

  $java_path = escapeshellarg(LingwoImport::$settings->java_path);
  $config_path = escapeshellarg(LingwoImport::$settings->config_path);
  $scripts_path = dirname(dirname(__FILE__)) . '/scripts';
  $runjs_path = $scripts_path . '/runjs.sh';
  $importerjs_path = $scripts_path . '/importer/importer.js';

  $cmd = "cd '$scripts_path/importer' && JAVA=$java_path '$runjs_path' '$importerjs_path' --config $config_path --lang $language --single '$entry_id' 2>&1";
  exec($cmd, $output, $retval);

  if ($retval) {
    watchdog('lingwo_data', 'Failed to import entry (%entry_id) "!cmd" with error: !output', array(
      '%entry_id' => $entry_id,
      '!cmd' => $cmd,
      '!output' => count($output) > 0 ? $output[count($output) -1] : '',
    ), WATCHDOG_WARNING);
  }

  return !$retval;
}

function _lingwo_data_import_entry_callback($entry_id) {
  list($language, $pos, $headword) = explode(':', $entry_id);
  $success = lingwo_data_import_entry($language, $pos, $headword);
  drupal_json_output(array('success' => $success));
}

// Replace the add entry page
function _lingwo_data_node_add_entry_page($type_url_str) {
  if (!empty($_GET['language']) && !empty($_GET['pos']) && !empty($_GET['headword']) && user_access('import lingwo_data entries')) {

    // used to preserve GET arguments when redirecting
    $args = (array) $_GET;
    unset($args['q']);
    unset($args['language']);
    unset($args['pos']);
    unset($args['headword']);

    if ($nid = LingwoEntry::key2nid($_GET['language'], $_GET['pos'], $_GET['headword'])) {
      drupal_set_message(t('Entry already exists! You can edit it here.'), 'warning');
      // TODO $args needs to be an array of keys and values instead of a string.
      return drupal_goto("node/{$nid}/edit", array('query' => $args));
    }
    elseif (lingwo_data_import_entry($_GET['language'], $_GET['pos'], $_GET['headword']) && ($nid = LingwoEntry::key2nid($_GET['language'], $_GET['pos'], $_GET['headword']))) {
      drupal_set_message(t('Successfully imported this entry! Please check, correct it and save.'));
      // TODO $args needs to be an array of keys and values instead of a string.
      return drupal_goto("node/{$nid}/edit", array('query' => $args));
    }
    else {
      drupal_set_message(t('Unable to import this entry. Please add it to the dictionary manually.'), 'warning');
    }
  }
  elseif (empty($_GET['nowizard'])) {
    // TODO: show entry add wizard
  }

  return node_add($type_url_str);
}

/*
 * Settings
 */

/**
 * Used to access settings.
 */
function lingwo_data_settings($name, $value = NULL) {
  return LingwoImport::$settings->__get($name);
}

