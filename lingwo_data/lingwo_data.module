<?php
// $Id$

/**
 * @file
 * For importing dictionary data from external sources
 */

// get our API functions
require_once('lingwo_data.api.inc');

/**
 * Implementation of hook_menu().
 */
function lingwo_data_menu() {
  $items = array();

  $items['admin/settings/lingwo/data'] = array(
    'title' => 'Data',
    'description' => 'Settings for Lingwo Data module.',
    'access arguments' => array('administer site configuration'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('lingwo_data_admin_settings'),
    'file' => 'lingwo_data.admin.inc',
    'type' => MENU_LOCAL_TASK,
  );

  $items['lingwo_data/ajax/import/%'] = array(
    'access arguments' => array('import lingwo_data entries'),
    'page callback' => '_lingwo_data_import_entry',
    'page arguments' => array(3),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/*
 * Implementation of hook_service()
 */
function lingwo_data_service() {
  return array(
    // lingwo_data.update_entry
    array(
      '#method' => 'lingwo_data.update_entry',
      '#callback' => 'lingwo_data_service_update_entry',
      '#access callback' => 'lingwo_data_service_update_entry_access',
      '#file' => array('file' => 'service.inc', 'module' => 'lingwo_data'),
      '#args' => array(
        array(
          '#name' => 'data',
          '#type' => 'string',
          '#description' => t('A JSON string representing an entry.')
        ),
        array(
          '#name' => 'force_changed',
          '#type' => 'boolean',
          '#optional' => TRUE,
          '#default value' => FALSE,
          '#description' => t('Set to True to update entry even if it hasn\'t changed'),
        ),
      ),
      '#return' => 'string',
      '#help' => t('Update an entry in the database.'),
    ),


  );
}

/*
 * Implementation of hook_nodeapi().
 */
// Deal with storing/retrieving the 'imported' field
function lingwo_data_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL) {
  if ($node->type != LingwoEntry::$settings->content_type)
    return;

  switch ($op) {
    case 'load':
      $res = db_query("SELECT imported, imported_data FROM {lingwo_data_node_imported} WHERE vid = %d",
        $node->vid);

      $fields = db_fetch_array($res);
      if (empty($fields)) {
        $fields = array('imported' => 0);
      }

      return $fields;

    case 'insert':
    case 'update':
      if (!empty($node->revision) || $op == 'insert') {
        // create row
        drupal_write_record('lingwo_data_node_imported', $node);
      }
      else {
        // update row
        drupal_write_record('lingwo_data_node_imported', $node, 'vid');
      }
      break;

    case 'delete':
      db_query('DELETE FROM {lingwo_data_node_imported} WHERE nid = %d', $node->nid);
      break;

    case 'delete revision':
      db_query('DELETE FROM {lingwo_data_node_imported} WHERE vid = %d', $node->vid);
      break;
  }
}

/*
 * Implementation of hook_form_alter().
 */
function lingwo_data_form_alter(&$form, $form_state, $form_id) {
  if ($form_id == LingwoEntry::$settings->content_type .'_node_form') {
    $node = $form['#node'];

    $form['imported'] = array(
      '#type' => 'hidden',
      // we automatically set this to '0' unless the field magically gets set to '-1'
      '#value' => ($form_state['values']['imported'] == -1) ? '1' : '0',
    );

    $form['imported_data'] = array(
      '#type' => 'hidden',
      '#value' => $form_state['values']['imported_data'],
    );
  }
}

function _lingwo_data_import_entry($entry_id) {
  list ($language, $pos, $headword) = explode(':', $entry_id);

  $java_path = LingwoImport::$settings->java_path;
  $config_path = LingwoImport::$settings->config_path;
  $scripts_path = dirname(dirname(__FILE__)) . '/scripts';
  $runjs_path = $scripts_path . '/runjs.sh';
  $importerjs_path = $scripts_path . '/importer/importer.js';

  $cmd = "cd '$scripts_path/importer' && JAVA='$java_path' '$runjs_path' '$importerjs_path' --config '$config_path' --lang $language --single '$entry_id' 2>&1 >/dev/null";
  system($cmd, $retval);

  if ($retval) {
    watchdog('lingwo_data', 'Failed to import entry (%entry_id): !cmd', array(
      '%entry_id' => $entry_id,
      '!cmd'      => $cmd,
    ), WATCHDOG_WARNING);
  }

  drupal_json(array('success' => !$retval));
}

/*
 * Settings
 */

/**
 * Used to access settings.
 */
function lingwo_data_settings($name, $value = NULL) {
  return LingwoImport::$settings->__get($name);
}

