<?php
// $Id$

/**
 * New CCK-based implementation
 */

/**
 * Implementation of hook_menu().
 */
function lingwo_dictionary_menu() {
  $items = array();
  $items['admin/settings/lingwo_dictionary'] = array(
    'title' => 'Lingwo Dictionary',
    'description' => t('Settings for Lingwo Dictionary module.'),
    'access arguments' => array('administer site configuration'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('lingwo_dictionary_admin_settings'),
    'file' => 'lingwo_dictionary.admin.inc',
    'type' => MENU_NORMAL_ITEM
  );

  /*
  if ($lookup_path = lingwo_dictionary_lookup_path()) {
    $items[$lookup_path .'/%/%'] = array(
      'page callback' => 'lingwo_dictionary_lookup_page',
      'page arguments' => array(1, 2),
      'access arguments' => array('access lingwo_dictionary content'),
      'file' => 'pages/search.inc',
      'type' => MENU_CALLBACK
    );
  }
  */

  return $items;
}

/**
 * Implementation of hook_field_info().
 */
function lingwo_dictionary_field_info() {
  return array(
    'lingwo_dictionary_senses' => array(
      'label' => t('Lingwo Dictionary Senses'),
      'description' => t('Store definition senses in the database.'),
    ),
  );
}

/**
 * Implementation of hook_field_settings().
 */
function lingwo_dictionary_field_settings($op, $field) {
  switch ($op) {
    /*
    case 'form':
      $form = array();
      return $form;

    case 'save':
      return array();
    */

    case 'database columns':
      $columns['data'] = array('type' => 'text', 'size' => 'big', 'not null' => FALSE, 'sortable' => FALSE, 'serialize' => TRUE);
      return $columns;
  }
}

/**
 * Implementation of hook_field().
 */
function lingwo_dictionary_field($op, &$node, $field, &$items, $teaser, $page) {
  switch ($op) {
    /*
    case 'load':
      // Content_storage does serialize each field item's columns (if the 
      // 'serialize' key for that column is set) upon writing to the db,
      // but does not unserialize when reading from the db. Hopefully,
      // this will be fixed in the future, but for now, we have to 
      // explicitly unserialize.
      if (is_array($items)) {
        foreach ($items as &$item) {
          if (is_string($item['data'])) {
            $item['data'] = unserialize($item['data']);
          }
        }
        return (array($field['field_name'] => $items));
      }
      break;
    */

    case 'validate':
      return $items;
  }
}

/**
 * Implementation of hook_widget_info().
 */
function lingwo_dictionary_widget_info() {
  return array(
    'lingwo_dictionary_senses_widget' => array(
      'label' => 'Lingwo Dictionary Senses Widget',
      'field types' => array('lingwo_dictionary_senses'),
      //'multiple values' => CONTENT_HANDLE_MODULE,
      'multiple values' => CONTENT_HANDLE_CORE,
      'description' => t('Widget for editing senses for a dictionary entry .'),
    ),
  );
}

/**
 * Implementation of hook_elements().
 */
function lingwo_dictionary_content_is_empty($item, $field) {
  if (empty($item['data']['difference']) && empty($item['data']['example'])) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Implementation of hook_elements().
 */
function lingwo_dictionary_elements() {
  $elements = array(
    'lingwo_dictionary_senses_widget' => array(
      '#input' => TRUE,
      '#process' => array('lingwo_dictionary_senses_widget_process'),
    )
  );
  return $elements;
}


function lingwo_dictionary_senses_widget_process($element, $edit, &$form_state, $form) {
  $tsrc = $form_state['values']['translation_source'];
  if (isset($tsrc)) {
    //print "translation";
  }
  else {
    //print "original";
  }

  $defaults = $element['#value']['data'];
  if (!is_array($defaults)) {
    $defaults = unserialize($defaults);
  }

  $field = content_fields($element['#field_name'], $element['#type_name']);

  $element['data']['difference'] = array(
    '#title' => 'Difference',
    '#type' => 'textfield',
    '#default_value' => $defaults['difference'],
  );
  $element['data']['example'] = array(
    '#title' => 'Example',
    '#type' => 'textfield',
    '#default_value' => $defaults['example'],
  );

  return $element;
}

function theme_lingwo_dictionary_senses_widget(&$element) {
  return theme('form_element', $element, $element['#children']);
}

function lingwo_dictionary_widget(&$form, &$form_state, $field, $items, $delta = 0) {
  $element = array(
    '#type' => $field['widget']['type'],
    '#default_value' => isset($items[$delta]) ? $items[$delta] : '',
  );
  return $element;
}

/**
 * Implementation of hook_theme().
 */
function lingwo_dictionary_theme() {
  return array(
    'lingwo_dictionary_senses_widget' => array(
      'arguments' => array('element' => NULL),
    ),
  );
}

/**
 * Implementation of hook_form_alter().
 */
function lingwo_dictionary_form_alter(&$form, $form_state, $form_id) {
  if ($form_id == (lingwo_dictionary_entry_content_type() .'_node_form')) {
    $node = $form['#node'];

    // remove language neutral and set language as required (for asthetic purposes)
    unset($form['language']['#options']['']);
    $form['language']['#required'] = TRUE;

    // when editting a translations...
    if (isset($node->nid) || isset($node->translation_source)) {
      // make title uneditable
      $form['title']['#name'] = 'title-disabled';
      $form['title']['#disabled'] = TRUE;
      $form['title-hidden'] = array(
        '#type' => 'hidden',
        '#name' => 'title',
        '#value' => $form['title']['#default_value'],
      );

      // make language uneditable
      $form['language']['#disabled'] = TRUE;

      // make the "Part of Speech" taxonomy uneditable
      $form['taxonomy'][lingwo_dictionary_pos_vocabulary()]['#disabled'] = TRUE;
    }
  }
}

/*
 * Settings
 */

/**
 * Drupal path for dictionary lookup.
 */
function lingwo_dictionary_lookup_path($value = NULL) {
  if (is_null($value)) {
    return variable_get('lingwo_dictionary_lookup_path', 'lookup');
  }
  variable_set('lingwo_dictionary_lookup_path', $value);
}

/**
 * Content type to use for a dictionary entry.
 */
function lingwo_dictionary_entry_content_type($value = NULL) {
  if (is_null($value)) {
    return variable_get('lingwo_dictionary_entry_content_type', NULL);
  }
  variable_set('lingwo_dictionary_entry_content_type', $value);
}

/**
 * Vocabulary used for denoting part of speech.
 */
function lingwo_dictionary_pos_vocabulary($value = NULL) {
  if (is_null($value)) {
    return variable_get('lingwo_dictionary_pos_vocabulary', NULL);
  }
  variable_set('lingwo_dictionary_pos_vocabulary', $value);
}


