<?php
// $Id$

/**
 * @file
 * Implements extensions for Lingwo Dictionary
 */

// get our API functions for dealing with entries
module_load_include('inc', 'lingwo_dictionary', 'lingwo_dictionary.entry-api');

// Helper for generating UUIDs
function _ld_make_uuid() {
  if (!isset($GLOBALS['uuid'])) {
    uuid_create(&$GLOBALS['uuid']);
  }

  uuid_make($GLOBALS['uuid'], UUID_MAKE_V4);
  uuid_export($GLOBALS['uuid'], UUID_FMT_STR, &$uuidstring);

  return trim($uuidstring);
}

// Helper for implementing AHAH
// TODO: now that we are using ahah_helper, this should be removed
function _ld_disable_validation(&$form) {
  foreach (element_children($form) as $child) {
    $form[$child]['#validated'] = TRUE;
    _ld_disable_validation(&$form[$child]);
  }
}

// Helper for implementing AHAH
// TODO: now that we are using ahah_helper, this should be removed
function _ld_form_to_node(&$form, &$form_state) {
  $form['#submit'] = array('');
  $node = node_form_submit_build_node($form, $form_state);

  // hack to stop taxonomy from resetting when the form is rebuilt
  $form_state['node']['taxonomy'] = taxonomy_preview_terms($node);

  return $node;
}

/**
 * Implementation of hook_init().
 *
 * Early checking of URL requested.
 * If a entry node is refered to by "node/$node->nid", the user is
 * redirected using drupal_goto()
 *
 * This code was lifted graciously from the path_redirect module.
 */
function lingwo_dictionary_init() {
  if (lingwo_dictionary_settings('redirect_node') && lingwo_dictionary_settings('lookup_path')) {
    if (preg_match('/^node\/(\d+)$/', $_GET['q'], $matches)) {
      $node = node_load($matches[1]);
      if ($node->type == lingwo_dictionary_settings('entry_content_type')) {
        $redirect = lingwo_dictionary_entry_path($node);
      }
    }

    // do the redirect if we've managed to locate a wikilink
    if ($redirect) {
      // if there's a result found, do the redirect
      unset($_REQUEST['destination']);
      drupal_goto($redirect);
    }
  }
}

/**
 * Implementation of hook_menu().
 */
function lingwo_dictionary_menu() {
  $items = array();
  $items['admin/settings/lingwo_dictionary'] = array(
    'title' => 'Lingwo Dictionary Settings',
    'description' => 'Settings for Lingwo Dictionary module.',
    'access arguments' => array('administer site configuration'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('lingwo_dictionary_admin_settings'),
    'file' => 'lingwo_dictionary.admin.inc',
    'type' => MENU_NORMAL_ITEM
  );
  $items['admin/settings/lingwo_dictionary/general'] = array(
    'title' => 'General',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );

  if ($lookup_path = lingwo_dictionary_settings('lookup_path')) {
    $i = count(explode('/', $lookup_path));
    $items[$lookup_path .'/%/%'] = array(
      'page callback' => 'lingwo_dictionary_lookup_page',
      'page arguments' => array($i, $i+1),
      'access arguments' => array('access content'),
      'file' => 'pages/search.inc',
      'type' => MENU_CALLBACK
    );
  }

  return $items;
}

/**
 * Implementation of hook_block().
 */
function lingwo_dictionary_block($op = 'list', $delta = 0, $edit = array()) {
  switch ($op) {
    case 'list':
      $blocks[0] = array(
        'info' => t('Lingwo Dictionary: Search block'),
      );
      return $blocks;

    case 'view':
      if ($delta == 0) {
        module_load_include('inc', 'lingwo_dictionary', 'pages/search');
        $block['subject'] = t('Search Dictionary');
        $block['content'] = drupal_get_form('lingwo_dictionary_search_form');
        return $block;
      }
      break; 
  }
}

/**
 * Implementation of hook_form_alter().
 */
function lingwo_dictionary_form_alter(&$form, $form_state, $form_id) {
  if ($form_id == (lingwo_dictionary_settings('entry_content_type') .'_node_form')) {
    $node = $form['#node'];

    // allow some fields to be set automagically for new nodes
    if (empty($node->nid)) {
      if (isset($_GET['headword'])) {
        $form['title']['#default_value'] = urldecode($_GET['headword']);
      }
      if (isset($_GET['language'])) {
        $form['language']['#default_value'] = $_GET['language'];
      }
      if (isset($_GET['pos'])) {
        // copied from lingwo_data.service.inc
        // TODO: probably needs to be in an API function
        $pos_vid = lingwo_dictionary_settings('pos_vocabulary');
        if ($pos_vid) {
          foreach (taxonomy_get_tree($pos_vid) as $term) {
            if (drupal_strtolower($term->name) == $_GET['pos']) {
              $form['taxonomy'][$pos_vid]['#default_value'] = $term->tid;
              break;
            }
          }
        }
        // TODO: we need to set the POS on the node too, so that the form loads the
        // fields immediately.
      }
    }

    // remove language neutral and set language as required (for asthetic purposes)
    unset($form['language']['#options']['']);
    $form['language']['#required'] = TRUE;

    // when editting a translation or existing node...
    if (isset($node->nid) || isset($node->translation_source)) {
      // make title uneditable
      $form['title']['#name'] = 'title-disabled';
      $form['title']['#disabled'] = TRUE;
      $form['title-hidden'] = array(
        '#type' => 'hidden',
        '#name' => 'title',
        '#value' => $form['title']['#default_value'],
      );

      // make language uneditable
      $form['language']['#disabled'] = TRUE;

      // make the "Part of Speech" taxonomy uneditable
      $form['taxonomy'][lingwo_dictionary_settings('pos_vocabulary')]['#disabled'] = TRUE;
    }
  }
}

/**
 * Implementation of hook_nodeapi().
 */
function lingwo_dictionary_nodeapi(&$node, $op, $a3, $a4) {
  if ($node->type != lingwo_dictionary_settings('entry_content_type'))
    return NULL;

  if (lingwo_dictionary_entry_is_translation($node))
    return NULL;

  switch ($op) {
    case 'validate':
      if (isset($node->delete))
        return NULL;

      $pos = lingwo_dictionary_entry_get_pos($node);
      if (empty($pos)) {
        form_set_error('taxnomony['. lingwo_dictionary_settings('pos_vocabulary') .']',
          t("Couldn't derive Part of Speech from node!"));
        return;
      }

      $existing = lingwo_dictionary_entry_lookup($node->title, $node->language, $pos);

      if ($existing && $existing != $node->nid) {
        form_set_error('title', 
          t('Entry with this language, part of speech and headword combination already exists: @link',
            array('@link' => l($node->title, 'node/'.$existing->nid))));
      }
      break;
    case 'insert':
      $object = (object)array(
        'language' => $node->language,
        'pos' => lingwo_dictionary_entry_get_pos($node, TRUE),
        'title' => $node->title,
        'nid' => $node->nid,
      );
      drupal_write_record('lingwo_dictionary_entry', $object);
      break;
    case 'delete':
      db_query("DELETE FROM {lingwo_dictionary_entry} WHERE nid = %s", $node->nid);
      break;
  }
}

/**
 * Implementation of hook_theme().
 */
function lingwo_dictionary_theme() {
  return array(
    'lingwo_dictionary_search_form' => array(
      'arguments' => array('form' => NULL),
      'file' => 'pages/search.inc',
    ),
  );
}

/*
 * Settings
 */

/**
 * Used to access settings.
 */
function lingwo_dictionary_settings($name, $value = NULL) {
  static $_settings = array(
    'lookup_path' => 'lookup',
    'redirect_node' => FALSE,
    'entry_content_type' => NULL,
    'pos_vocabulary' => NULL,
  );

  if (is_null($name)) {
    return $_settings;
  }

  if (!array_key_exists($name, $_settings)) {
    trigger_error(t('No such lingwo_dictionary_setting: @name', array('@name' => $name)), E_USER_ERROR);
    return NULL;
  }

  if (is_null($value)) {
    return variable_get('lingwo_dictionary_'. $name, $_settings[$name]);
  }

  variable_set('lingwo_dictionary_'. $name, $value);
}

/**
 * Checks if lingwo_dictionary is configured.
 */
function lingwo_dictionary_check_settings($message = TRUE) {
  $_settings = lingwo_dictionary_settings(NULL);

  // look for settings that aren't configured
  foreach ($_settings as $name => $default) {
    if (is_null($default) && is_null(variable_get('lingwo_dictionary_'. $name, NULL))) {
      if ($message) {
        drupal_set_message(t('Functionality provided by Lingwo Dictionary will not work correctly until it is configured'));
      }

      return FALSE;
    }
  }

  return TRUE;
}

