<?php
// $Id$

/**
 * @file
 * Implements extensions for Lingwo Dictionary
 */

// Helper for generating UUIDs
function _ld_make_uuid() {
  if (!isset($GLOBALS['uuid'])) {
    uuid_create(&$GLOBALS['uuid']);
  }

  uuid_make($GLOBALS['uuid'], UUID_MAKE_V4);
  uuid_export($GLOBALS['uuid'], UUID_FMT_STR, &$uuidstring);

  return trim($uuidstring);
}

// Helper for implementing AHAH
function _ld_disable_validation(&$form) {
  foreach (element_children($form) as $child) {
    $form[$child]['#validated'] = TRUE;
    _ld_disable_validation(&$form[$child]);
  }
}

// Helper for implementing AHAH
function _ld_form_to_node(&$form, &$form_state) {
  $form['#submit'] = array('');
  $node = node_form_submit_build_node($form, $form_state);

  // hack to stop taxonomy from resetting when the form is rebuilt
  $form_state['node']['taxonomy'] = taxonomy_preview_terms($node);

  return $node;
}

// Let's us know if a node is a translation
function lingwo_dictionary_is_translation($node) {
  return isset($node->translation_source) ||
    ($node->nid && $node->tnid != 0 && $node->nid != $node->tnid);
}

// Loads and returns a node's translation source
function lingwo_dictionary_load_translation_source(&$node) {
  if (lingwo_dictionary_is_translation($node)) {
    $node->translation_source = node_load($node->tnid);
  }
  
  return $node->translation_source;
}

// Gets the Part of Speech from a node
// TODO: I think we should rename this to *_entry_get_pos(), so that we can have
// a whole family of *_entry_* functions.
function lingwo_dictionary_get_pos($node, $is_new = FALSE) {
  $pos_vid = lingwo_dictionary_pos_vocabulary();

  if (isset($node->taxonomy)) {
    //if (is_int($node->taxonomy[$pos_vid])) {
    //if (!$node->nid || $is_new) {
    $a = array_values($node->taxonomy);
    if (0+$a[0] != 0) {
      // This means the term object's haven't been loaded yet because we are
      // coming directly off the node form.  So load 'em!
      $node->taxonomy = taxonomy_preview_terms($node);
    }

    foreach ($node->taxonomy as $term) {
      if ($term->vid == $pos_vid) {
        $pos = $term;
        break;
      }
    }
  }

  if (isset($pos)) {
    return drupal_strtolower($pos->name);
  }

  return NULL;
}

function lingwo_dictionary_find_entry($headword, $language, $pos) {
  $res = db_query("SELECT nid FROM {lingwo_dictionary_entry} WHERE title = '%s' AND language = '%s' AND pos = '%s'", $headword, $language, $pos);

  $obj = db_fetch_object($res);
  if ($obj) {
    return $obj->nid;
  }
  
  return NULL;
}

/**
 * Implementation of hook_menu().
 */
function lingwo_dictionary_menu() {
  $items = array();
  $items['admin/settings/lingwo_dictionary'] = array(
    'title' => 'Lingwo Dictionary',
    'description' => 'Settings for Lingwo Dictionary module.',
    'access arguments' => array('administer site configuration'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('lingwo_dictionary_admin_settings'),
    'file' => 'lingwo_dictionary.admin.inc',
    'type' => MENU_NORMAL_ITEM
  );

  /*
  if ($lookup_path = lingwo_dictionary_lookup_path()) {
    $items[$lookup_path .'/%/%'] = array(
      'page callback' => 'lingwo_dictionary_lookup_page',
      'page arguments' => array(1, 2),
      'access arguments' => array('access lingwo_dictionary content'),
      'file' => 'pages/search.inc',
      'type' => MENU_CALLBACK
    );
  }
  */

  return $items;
}

/**
 * Implementation of hook_form_alter().
 */
function lingwo_dictionary_form_alter(&$form, $form_state, $form_id) {
  if ($form_id == (lingwo_dictionary_entry_content_type() .'_node_form')) {
    $node = $form['#node'];

    // remove language neutral and set language as required (for asthetic purposes)
    unset($form['language']['#options']['']);
    $form['language']['#required'] = TRUE;

    // when editting a translation or existing node...
    if (isset($node->nid) || isset($node->translation_source)) {
      // make title uneditable
      $form['title']['#name'] = 'title-disabled';
      $form['title']['#disabled'] = TRUE;
      $form['title-hidden'] = array(
        '#type' => 'hidden',
        '#name' => 'title',
        '#value' => $form['title']['#default_value'],
      );

      // make language uneditable
      $form['language']['#disabled'] = TRUE;

      // make the "Part of Speech" taxonomy uneditable
      $form['taxonomy'][lingwo_dictionary_pos_vocabulary()]['#disabled'] = TRUE;
    }
  }
}

/**
 * Implementation of hook_nodeapi().
 */
function lingwo_dictionary_nodeapi(&$node, $op, $a3, $a4) {
  if ($node->type != lingwo_dictionary_entry_content_type())
    return NULL;

  if (lingwo_dictionary_is_translation($node))
    return NULL;

  switch ($op) {
    case 'validate':
      if (isset($node->delete))
        return NULL;

      $result = db_query("SELECT nid FROM {lingwo_dictionary_entry} WHERE language = '%s' AND pos = '%s' AND title = '%s'", $node->language, lingwo_dictionary_get_pos($node), $node->title);

      if ($existing = db_fetch_object($result)) {
        form_set_error('title', 'Entry with this language, part of speech and headword combination already exists: '. l($node->title, 'node/'.$existing->nid));
      }
      break;
    case 'insert':
      $object = (object)array(
        'language' => $node->language,
        'pos' => lingwo_dictionary_get_pos($node, TRUE),
        'title' => $node->title,
        'nid' => $node->nid,
      );
      drupal_write_record('lingwo_dictionary_entry', $object);
      break;
    case 'delete':
      db_query("DELETE FROM {lingwo_dictionary_entry} WHERE nid = %s", $node->nid);
      break;
  }
}

/**
 * Implementation of hook_theme().
 */
/*
function lingwo_dictionary_theme() {
  return array(
    'lingwo_dictionary_search' => array(
      'arguments' => array('form' => NULL),
    ),
  );
}
*/

/*
 * Settings
 */

/**
 * Drupal path for dictionary lookup.
 */
function lingwo_dictionary_lookup_path($value = NULL) {
  if (is_null($value)) {
    return variable_get('lingwo_dictionary_lookup_path', 'lookup');
  }
  variable_set('lingwo_dictionary_lookup_path', $value);
}

/**
 * Content type to use for a dictionary entry.
 */
function lingwo_dictionary_entry_content_type($value = NULL) {
  if (is_null($value)) {
    return variable_get('lingwo_dictionary_entry_content_type', NULL);
  }
  variable_set('lingwo_dictionary_entry_content_type', $value);
}

/**
 * Vocabulary used for denoting part of speech.
 */
function lingwo_dictionary_pos_vocabulary($value = NULL) {
  if (is_null($value)) {
    return variable_get('lingwo_dictionary_pos_vocabulary', NULL);
  }
  variable_set('lingwo_dictionary_pos_vocabulary', $value);
}

