<?php
// $Id$

/**
 * @file
 * Implements extensions for Lingwo Dictionary
 */

// get our API functions for dealing with entries
module_load_include('inc', 'lingwo_dictionary', 'lingwo_dictionary.entry-api');

// Helper for generating UUIDs
function _ld_make_uuid() {
  if (!isset($GLOBALS['uuid'])) {
    uuid_create(&$GLOBALS['uuid']);
  }

  uuid_make($GLOBALS['uuid'], UUID_MAKE_V4);
  uuid_export($GLOBALS['uuid'], UUID_FMT_STR, &$uuidstring);

  return trim($uuidstring);
}

// Helper for implementing AHAH
// TODO: now that we are using ahah_helper, this should be removed
// TODO: actually, AHAH helper appears to not be doing this for us atleast on lingwo_fields
// when trying to "Add More Forms" and there is no headword
function _ld_disable_validation(&$form) {
  foreach (element_children($form) as $child) {
    $form[$child]['#validated'] = TRUE;
    _ld_disable_validation(&$form[$child]);
  }
}

function _ld_element_process(&$element, $process_func) {
  $element += _element_info($element['#type']);
  $element['#process'][] = $process_func;
}

// Helper for implementing AHAH
// TODO: now that we are using ahah_helper, this should be removed
function &_ld_form_to_node(&$form, &$form_state) {
  $form['#submit'] = array('');
  $node = node_form_submit_build_node($form, $form_state);

  // hack to stop taxonomy from resetting when the form is rebuilt
  //$form_state['node']['taxonomy'] = taxonomy_preview_terms($node);

  return $form_state['node'];
}

// Helper: returns TRUE if the given node is a translation
function _ld_is_translation($node) {
  return isset($node->translation_source) ||
    ($node->nid && $node->tnid != 0 && $node->nid != $node->tnid);
}

function lingwo_dictionary_add_require_js($plugins=array()) {
  static $added = FALSE;

  if (!$added) {
    // add require.js to the page
    drupal_add_js('require({paths:{lingwo_dictionary:"/'. drupal_get_path('module', 'lingwo_dictionary') .'/js"}});', 'inline');
    drupal_add_js(drupal_get_path('module', 'lingwo_dictionary') .'/js/require.js');
    drupal_add_js(drupal_get_path('module', 'lingwo_dictionary') .'/js/require/jquery-stubs.js');
    foreach($plugins as $plugin) {
      drupal_add_js(drupal_get_path('module', 'lingwo_dictionary') .'/js/require/'. $plugin .'.js');
    }
    $added = TRUE;
  }
}

/**
 * Implementation of hook_init().
 *
 * Early checking of URL requested.
 * If a entry node is refered to by "node/$node->nid", the user is
 * redirected using drupal_goto()
 *
 * This code was lifted graciously from the path_redirect module.
 */
function lingwo_dictionary_init() {
  if (lingwo_dictionary_settings('redirect_node') && lingwo_dictionary_settings('lookup_path')) {
    if (preg_match('/^node\/(\d+)$/', $_GET['q'], $matches)) {
      if ($entry = LingwoEntry::fromNid($matches[1])) {
        $redirect = $entry->getPath();
      }
    }

    // do the redirect if we've managed to locate a wikilink
    if ($redirect) {
      // if there's a result found, do the redirect
      unset($_REQUEST['destination']);
      drupal_goto($redirect);
    }
  }
}

/**
 * Implementation of hook_menu().
 */
function lingwo_dictionary_menu() {
  $items = array();
  $items['admin/settings/lingwo_dictionary'] = array(
    'title' => 'Lingwo Dictionary Settings',
    'description' => 'Settings for Lingwo Dictionary module.',
    'access arguments' => array('administer site configuration'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('lingwo_dictionary_admin_settings'),
    'file' => 'lingwo_dictionary.admin.inc',
    'type' => MENU_NORMAL_ITEM
  );
  $items['admin/settings/lingwo_dictionary/general'] = array(
    'title' => 'General',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );

  if ($lookup_path = lingwo_dictionary_settings('lookup_path')) {
    $i = count(explode('/', $lookup_path));
    $items[$lookup_path .'/%/%'] = array(
      'page callback' => 'lingwo_dictionary_lookup_page',
      'page arguments' => array($i, $i+1),
      'access arguments' => array('access content'),
      'file' => 'pages/search.inc',
      'type' => MENU_CALLBACK
    );
  }

  return $items;
}

/*
 * Implementation of hook_services()
 */
function lingwo_dictionary_service() {
  return array(
    array(
      '#method' => 'lingwo_dictionary.search_entries',
      '#callback' => 'lingwo_dictionary_search_entries',
      '#access arguments' => array('access content'),
      '#args' => array(
        array(
          '#name' => 'text',
          '#type' => 'string',
          '#description' => t('Text to lookup'),
        ),
        array(
          '#name' => 'options',
          '#type' => 'struct',
          '#description' => t('A struct representing search options.'),
          '#optional' => TRUE,
        ),
      ),
      '#return' => 'array',
      '#help' => t('An array of structs containing the "nid" of the entries and maybe some other things.'),
    ),
  );
}

/**
 * Implementation of hook_block().
 */
function lingwo_dictionary_block($op = 'list', $delta = 0, $edit = array()) {
  switch ($op) {
    case 'list':
      $blocks[0] = array(
        'info' => t('Lingwo Dictionary: Search block'),
      );
      return $blocks;

    case 'view':
      if ($delta == 0 && user_access('access content')) {
        module_load_include('inc', 'lingwo_dictionary', 'pages/search');
        $block['subject'] = t('Search Dictionary');
        $block['content'] = drupal_get_form('lingwo_dictionary_search_form');
        return $block;
      }
      break; 
  }
}

function lingwo_dictionary_pos_options($translate = FALSE, $option_name = NULL) {
  $list = explode("\n", lingwo_dictionary_settings('pos_allowed_values'));
  $list = array_map('trim', $list);
  $list = array_filter($list, 'strlen');

  // Only translate if we have i18nstrings
  $translate = $translate && module_exists('i18nstrings');

  $options = array();
  foreach ($list as $opt) {
    if (strpos($opt, '|') !== FALSE) {
      list ($key, $value) = explode('|', $opt);
    }
    else {
      $key = $opt;
      $value = $opt;
    }

    // if we are only looking for one key, skip all the rest
    if (!is_null($option_name) && $option_name != $key) {
      continue;
    }

    if ($translate) {
      $value = i18nstrings('lingwo:field:pos:option_'. $key, $value);
    }

    if ($option_name == $key) {
      return $value;
    }

    $options[$key] = $value;
  }

  if (!is_null($option_name)) {
    // we requested an option but it isn't here!  Return the original.
    return $option_name;
  }

  asort($options);

  return $options;
}

/**
 * Implementation of hook_form_alter().
 */
function lingwo_dictionary_form_alter(&$form, $form_state, $form_id) {
  if ($form_id == (lingwo_dictionary_settings('entry_content_type') .'_node_form')) {
    $node = $form['#node'];

    // allow some fields to be set automagically for new nodes
    if (empty($node->nid)) {
      if (isset($_GET['headword'])) {
        $form['title']['#default_value'] = urldecode($_GET['headword']);
      }
      if (isset($_GET['language'])) {
        $form['language']['#default_value'] = $_GET['language'];
        $node->language = $_GET['language'];
      }
      if (isset($_GET['pos']) && !_ld_is_translation($node)) {
        $node->pos = $_GET['pos'];
      }
    }

    // remove language neutral and set language as required (for asthetic purposes)
    unset($form['language']['#options']['']);
    $form['language']['#required'] = TRUE;

    // setup the pos select
    $form['pos'] = array(
      '#type' => 'select',
      '#title' => t('Part of Speech'),
      '#options' => lingwo_dictionary_pos_options(TRUE),
      '#default_value' => $node->pos,
      '#required' => TRUE,
    );

    // when editting a translation or existing node...
    if (isset($node->nid) || _ld_is_translation($node)) {
      // make title uneditable
      $form['title']['#name'] = 'title-disabled';
      $form['title']['#disabled'] = TRUE;
      $form['title-hidden'] = array(
        '#type' => 'hidden',
        '#name' => 'title',
        '#value' => $form['title']['#default_value'],
      );

      // make language uneditable
      $form['language']['#disabled'] = TRUE;

      // make the pos uneditable
      $form['pos']['#disabled'] = TRUE;
    }
  }
}

/**
 * Implementation of hook_content_extra_fields().
 */
function lingwo_dictionary_content_extra_fields($type_name) {
  $extra = array();

  if (lingwo_dictionary_settings('entry_content_type') == $type_name) {
    $extra['pos'] = array(
      'label' => t('Part of Speech'),
      'description' => t('Lingwo Dictionary "Part of Speech" field.'),
      'weight' => 0,
    );
  }

  return $extra;
}

function lingwo_dictionary_generate_hash(&$object) {
  $object->entry_hash =
    sha1(join(':', array($object->language, $object->pos, $object->headword)));
}

/**
 * Implementation of hook_nodeapi().
 */
function lingwo_dictionary_nodeapi(&$node, $op, $a3, $a4) {
  if ($node->type != lingwo_dictionary_settings('entry_content_type'))
    return NULL;

  // Operates on both translations and sources
  if ($op == 'load') {
    if ($node->translation_source) {
      return array('pos' => $node->translation_source->pos);
    }

    $nid = _ld_is_translation($node) ? $node->tnid : $node->nid;
    $row = db_fetch_object(db_query("SELECT pos FROM {lingwo_dictionary_entry} WHERE nid = %d", $nid));
    if (!$row) {
      // TODO: this should really be a watchdog message because it appears to happen normally when
      // mass deleting entries.
      watchdog('lingwo_dictionary', 'Unable to get pos value for this entry: !nid', array('!nid' => $nid), WATCHDOG_WARNING);
      return NULL;
    }
    return array('pos' => $row->pos);
  }
  elseif ($op == 'prepare translation') {
    $node->pos = $node->translation_source->pos;
    return;
  }

  // The rest are only on sources
  if (_ld_is_translation($node))
    return NULL;

  switch ($op) {
    case 'validate':
      if (isset($node->delete))
        return NULL;

      $existing = lingwo_dictionary_entry_lookup($node->language, $node->pos, $node->title);

      if ($existing && $existing != $node->nid) {
        form_set_error('title', 
          t('Entry with this language, part of speech and headword combination already exists: !link',
            array('!link' => l($node->title, 'node/'.$existing))));
      }
      break;
    case 'insert':
      $object = (object)array(
        'language' => $node->language,
        'pos' => $node->pos,
        'headword' => $node->title,
        'nid' => $node->nid,
      );
      lingwo_dictionary_generate_hash($object);
      drupal_write_record('lingwo_dictionary_entry', $object);
      break;
    case 'delete':
      db_query("DELETE FROM {lingwo_dictionary_entry} WHERE nid = %s", $node->nid);
      break;
  }
}

/**
 * Implementation of hook_locale().
 */
function lingwo_dictionary_locale($op = 'groups', $group = NULL) {
  switch ($op) {
    case 'groups':
      return array('lingwo' => t('Lingwo'));
    case 'info':
      $info['lingwo']['refresh callback'] = 'lingwo_dictionary_locale_refresh';
      $info['lingwo']['format'] = FALSE;
      return $info;
  }
}

function lingwo_dictionary_locale_refresh() {
  foreach (lingwo_dictionary_pos_options() as $key => $value) {
    i18nstrings_update('lingwo:field:pos:option_'. $key, $value);
  }

  return TRUE;
}

/**
 * Implementation of hook_views_api().
 */
function lingwo_dictionary_views_api() {
  return array(
    'api'  => 2,
    'path' => drupal_get_path('module', 'lingwo_dictionary'),
  );
}

/**
 * Implementation of hook_theme().
 */
function lingwo_dictionary_theme() {
  return array(
    'lingwo_dictionary_search_form' => array(
      'arguments' => array('form' => NULL),
      'file' => 'pages/search.inc',
    ),
  );
}

/*
 * Settings
 */

/**
 * Used to access settings.
 */
function lingwo_dictionary_settings($name, $value = NULL) {
  static $_settings = array(
    'lookup_path' => 'lookup',
    'redirect_node' => FALSE,
    'entry_content_type' => NULL,
    'pos_allowed_values' => "noun|Noun\nadjective|Adjective\nverb|Verb",
  );

  if (is_null($name)) {
    return $_settings;
  }

  if (!array_key_exists($name, $_settings)) {
    trigger_error(t('No such lingwo_dictionary_setting: @name', array('@name' => $name)), E_USER_ERROR);
    return NULL;
  }

  if (is_null($value)) {
    return variable_get('lingwo_dictionary_'. $name, $_settings[$name]);
  }

  variable_set('lingwo_dictionary_'. $name, $value);
}

/**
 * Checks if lingwo_dictionary is configured.
 */
function lingwo_dictionary_check_settings($message = TRUE) {
  $_settings = lingwo_dictionary_settings(NULL);

  // look for settings that aren't configured
  foreach ($_settings as $name => $default) {
    if (is_null($default) && is_null(variable_get('lingwo_dictionary_'. $name, NULL))) {
      if ($message) {
        drupal_set_message(t('Functionality provided by Lingwo Dictionary will not work correctly until it is configured'));
      }

      return FALSE;
    }
  }

  return TRUE;
}

