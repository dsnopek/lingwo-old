<?php

class LingwoDictionaryTestCase extends DrupalWebTestCase {
  private $pos_terms;

  public static function getInfo() {
    return array(
      'name' => 'lingwo_dictionary',
      'description' => 'Testing the web functionality provided by lingwo_dictionary.',
      'group' => 'Lingwo Dictionary',
    );
  }

  public function setUp() {
    parent::setUp('lingwo_dictionary', 'locale');

    # create an appropriate user
    $this->drupalLogin(
      $this->drupalCreateUser(array('administer content types')));

    // create the entry content type
    $entry_type = $this->drupalCreateContentType(array(
      'has_body' => FALSE,
      'body_label' => '',
    ));
    variable_set('language_content_type_'. $entry_type->type, TRANSLATION_ENABLED);
    variable_set('i18n_node_entry'. $entry_type->type, LANGUAGE_SUPPORT_NORMAL);
    lingwo_dictionary_entry_content_type($entry_type->type);

    # create an appropriate user
    $this->drupalLogin(
      $this->drupalCreateUser(array('create '. $entry_type->type .' content')));

    // Add POS vocabulary
    $voc = array(
      'name' => 'POS',
      'relations' => TRUE,
      'hierarchy' => FALSE,
      'multiple' => FALSE,
      'required' => TRUE,
      'tags' => 0,
      'language' => 'en',
      'nodes' => array(
        $entry_type->type => TRUE
      )
    );
    taxonomy_save_vocabulary($voc);
    lingwo_dictionary_pos_vocabulary($voc['vid']);

    // Add POS terms
    foreach (array('Noun','Verb','Adjective') as $name) {
      $term = array(
        'vid' => $voc['vid'],
        'name' => $name,
        'languaeg' => 'en'
      );
      taxonomy_save_term($term);

      // save for later use!
      $this->pos_terms[$name] = $term['tid'];
    }

    // Add a language
    include_once './includes/locale.inc';
    locale_add_language('pl', 'Polish', 'Polski');

    // TODO: more stuff is necessary!
  }

  private function createEntry($values) {
    $entry_type = lingwo_dictionary_entry_content_type();
    $pos_vid = lingwo_dictionary_pos_vocabulary();

    if (!isset($values['headword'])) {
      $values['headword'] = $this->randomName(8);
    }

    $edit = array(
      'title'    => $values['headword'],
      'language' => $values['language'],
      "taxonomy[$pos_vid]" => $this->pos_terms[$values['pos']],
    );

    $this->drupalPost("node/add/$entry_type", $edit, 'Save');
  }

  public function testUniqueEntries() {
    $entry_type = lingwo_dictionary_entry_content_type();

    $entry = array(
      'headword' => 'czerwony',
      'language' => 'pl',
      'pos' => 'Adjective',
    );

    // Create the first time
    $this->createEntry($entry);
    $this->assertText(t('@type czerwony has been created.', array('@type' => $entry_type)));

    // DEBUG
    $res = db_query('SELECT * FROM {lingwo_dictionary_entry}');
    $o = db_fetch_object($res);
    $this->pass(print_r($o, TRUE));

    // Try to create a second time (and get a duplicate!)
    $this->createEntry($entry);
    $this->assertText(t('Entry with this language, part of speech and headword combination already exists: @name', array('@name' => $entry['name'])));

    // Modifying the part of speech should be enough to allow it to be created
    $entry['pos'] = 'Noun';
    $this->createEntry($entry);
    $this->assertText(t('@type czerwony has been created.', array('@type' => $entry_type)));
  }
}

