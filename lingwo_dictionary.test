<?php

module_load_include('inc', 'lingwo_dictionary', 'lingwo_dictionary.test');

class LingwoDictionaryBaseTestCase extends LingwoDictionaryWebTestCase {
  public static function getInfo() {
    return array(
      'name' => 'lingwo_dictionary',
      'description' => 'Testing the web functionality provided by lingwo_dictionary.',
      'group' => 'Lingwo Dictionary',
    );
  }

  public function testUniqueEntries() {
    $entry_type = lingwo_dictionary_settings('entry_content_type');

    $edit = array(
      'headword' => 'czerwony',
      'language' => 'pl',
      'pos' => 'adjective',
    );

    // Create the first time
    $this->createEntry($edit);
    $this->assertText(t('@type czerwony has been created.', array('@type' => $entry_type)));

    // Try to create a second time (and get a duplicate!)
    $this->createEntry($edit);
    $this->assertText(t('Entry with this language, part of speech and headword combination already exists: @name', array('@name' => $entry['name'])));

    // Modifying the part of speech should be enough to allow it to be created
    $edit['pos'] = 'noun';
    $this->createEntry($edit);
    $this->assertText(t('@type czerwony has been created.', array('@type' => $entry_type)));
  }

  public function testEntryAPI() {
    $entry_type = lingwo_dictionary_settings('entry_content_type');

    // Create the source
    $edit = array(
      'headword' => 'czerwony',
      'language' => 'pl',
      'pos' => 'adjective',
    );
    $this->createEntry($edit);
    $this->assertText(t('@type czerwony has been created.', array('@type' => $entry_type)));

    // get the node id for this entry
    $nid = lingwo_dictionary_entry_lookup('czerwony', 'pl', 'adjective');
    if (!$nid) {
      $this->fail("Couldn't get the node ID for the entry");
      return;
    }

    // add a translation
    $this->drupalPost('node/add/'. $entry_type, array(), 'Save', array(
      'query' => array(
        'translation' => $nid,
        'language' => 'en'
      )
    ));
    $this->assertText(t('@type czerwony has been created.', array('@type' => $entry_type)));

    // get the nid of the translation
    $trans_nodes = translation_node_get_translations($nid);
    $tnid = $trans_nodes['en']->nid;

    // test API functions on the source node
    $node = node_load($nid);
    $this->assertFalse(lingwo_dictionary_entry_is_translation($node));
    $this->assertNull(lingwo_dictionary_entry_load_translation_source($node));
    $this->assertEqual(lingwo_dictionary_entry_get_pos($node), 'adjective');

    // test API functions on the translation node
    $tnode = node_load($tnid);
    $this->assertTrue(lingwo_dictionary_entry_is_translation($tnode));
    $this->assertNotNull(lingwo_dictionary_entry_load_translation_source($tnode));
    $this->assertEqual($node->nid, $tnode->translation_source->nid);
    $this->assertEqual(lingwo_dictionary_entry_get_pos($node), 'adjective');

    // TODO: test some of the 'fringe' conditions with the above APIs (ie. when not 
    // coming from node_load(), but like the objects are coming in from the node-form.
  }

  public function testAdminSettings() {
    // create a new content type
    $new_type = $this->drupalCreateContentType();

    // create a new taxonomy vocabulary
    $this->createField(array(
      'label'       => 'blah',
      'field_name'  => 'pos2',
      'type'        => 'text',
      'widget_type' => 'text_textfield',
    ));

    // load page, verify the current settings
    $this->drupalGet('admin/settings/lingwo_dictionary');
    $this->assertFieldByName('lingwo_dictionary_lookup_path', lingwo_dictionary_settings('lookup_path'));
    $this->assertFieldByName('lingwo_dictionary_entry_content_type', lingwo_dictionary_settings('entry_content_type'));
    $this->assertFieldByName('lingwo_dictionary_field_pos', lingwo_dictionary_settings('field_pos'));

    // save new settings.
    $this->drupalPost(NULL, array(
      'lingwo_dictionary_lookup_path' => 'test',
      'lingwo_dictionary_entry_content_type' => $new_type->type,
      'lingwo_dictionary_field_pos' => 'field_pos2',
    ), 'Save configuration');
    $this->assertText('The configuration options have been saved');
    // verify that they took
    $this->assertFieldByName('lingwo_dictionary_lookup_path', 'test');
    $this->assertFieldByName('lingwo_dictionary_entry_content_type', $new_type->type);
    $this->assertFieldByName('lingwo_dictionary_field_pos', 'field_pos2');
  }
}

class LingwoDictionarySettingsTestCase extends DrupalWebTestCase {
  public static function getInfo() {
    return array(
      'name' => 'lingwo_dictionary_settings',
      'description' => 'Testing the lingwo_dictionary_settings() function.',
      'group' => 'Lingwo Dictionary',
    );
  }

  public function setUp() {
    parent::setUp('lingwo_dictionary');
  }

  public function testSettingsWithDefault() {
    $value = lingwo_dictionary_settings('lookup_path');
    $this->assertEqual($value, 'lookup');

    lingwo_dictionary_settings('lookup_path', 'new_path');
    $value = lingwo_dictionary_settings('lookup_path');
    $this->pass($value);
    $this->assertEqual($value, 'new_path');
  }

  public function testSettingsNoDefault() {
    $value = lingwo_dictionary_settings('entry_content_type');
    $this->assertNull($value);

    lingwo_dictionary_settings('entry_content_type', 'entry');
    $value = lingwo_dictionary_settings('entry_content_type');
    $this->assertEqual($value, 'entry');
  }

  // TODO: find some way to intercept the error/exception!
  /*
  public function testNonExistant() {
    $value = lingwo_dictionary_settings('blah');
    $this->assertNull($value);
  }
  */

  // TODO: we can't seem to test the message!!
  public function testCheck() {
    $check = lingwo_dictionary_check_settings();
    $this->assertFalse($check, t('lingwo_dictionary_check_settings() == FALSE'));
    $this->drupalGet('node');
    //$this->assertText('Lingwo Dictionary will not work correctly until it is configured');

    lingwo_dictionary_settings('entry_content_type', 'entry');
    lingwo_dictionary_settings('field_pos', 6);

    $check = lingwo_dictionary_check_settings();
    $this->assertTrue($check, t('lingwo_dictionary_check_settings() == TRUE'));
    $this->drupalGet('node');
    //$this->assertNoText('Lingwo Dictionary will not work correctly until it is configured');
  }
}

