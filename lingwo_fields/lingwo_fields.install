<?php
// $Id: $

/**
 * @file
 * Install file for lingwo_fields.
 */

/**
 * Implementation of hook_schema().
 */
function lingwo_fields_schema() {
  $schema['lingwo_fields_revisions'] = array(
    'description' => 'Stores the fields data for a revision of a given entry',
    'fields' => array(
      'vid' => array(
        'description' => 'The primary identifier for this version.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0
      ),
      'nid' => array(
        'description' => 'The {node} this version belongs to.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0
      ),
      'data' => array(
        'description' => 'Serialized data representing the fields.',
        'type' => 'text',
        'size' => 'normal',
        'serialize' => TRUE,
        'not null' => TRUE,
      ),
    ),
    'indexes' => array(
      'nid' => array('nid'),
    ),
    'primary key' => array('vid'),
  );

  $schema['lingwo_fields_forms'] = array(
    'description' => 'A lookup table for finding entries based on their forms.',
    'fields' => array(
      'nid' => array(
        'description' => 'The {node} that this form is from.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'form' => array(
        'description' => 'The form of the of this entry.',
        'type' => 'varchar',
        'length' => '255',
        'not null' => TRUE,
      ),
      'form_name' => array(
        'description' => 'The name of this form.',
        'type' => 'varchar',
        'length' => '255',
      ),
    ),
    'indexes' => array(
      'nid' => array('nid'),
      'form' => array('form'),
    ),
  );

  return $schema;
}

function _lingwo_fields_insert_new_fields($items) {
  $node = node_load($items[0]->nid);
  if (_lingwo_is_translation($entry)) {
    // we don't want to have fields setup for translations
    return;
  }

  $new = (object)array(
    'vid'  => $items[0]->vid,
    'nid'  => $items[0]->nid,
    'data' => array(),
  );

  foreach ($items as $item) {
    if (!is_null($item->value)) {
      $new->data[$item->name] = array(
        'type'      => $item->type,
        'name'      => $item->name,
        'value'     => $item->value,
        'automatic' => $item->automatic,
      );
    }
  }

  # clean up the data
  _lingwo_fields_clean($new->data);

  # actually write to the db
  _lingwo_fields_write_record($new, FALSE);
}

/*
 * In this version is where we move from CCK to a raw database table.
 */
function lingwo_fields_update_6001() {
  module_load_include('inc', 'content', 'includes/content.crud');

  $schema['lingwo_fields_revisions'] = array(
    'description' => 'Stores the fields data for a revision of a given entry',
    'fields' => array(
      'vid' => array(
        'description' => 'The primary identifier for this version.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0
      ),
      'nid' => array(
        'description' => 'The {node} this version belongs to.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0
      ),
      'data' => array(
        'description' => 'Serialized data representing the fields.',
        'type' => 'text',
        'size' => 'normal',
        'serialize' => TRUE,
        'not null' => TRUE,
      ),
    ),
    'indexes' => array(
      'nid' => array('nid'),
    ),
    'primary key' => array('vid'),
  );

  $schema['lingwo_fields_forms'] = array(
    'description' => 'A lookup table for finding entries based on their forms.',
    'fields' => array(
      'nid' => array(
        'description' => 'The {node} that this form is from.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'form' => array(
        'description' => 'The form of the of this entry.',
        'type' => 'varchar',
        'length' => '255',
        'not null' => TRUE,
      ),
      'form_name' => array(
        'description' => 'The name of this form.',
        'type' => 'varchar',
        'length' => '255',
      ),
    ),
    'indexes' => array(
      'nid' => array('nid'),
      'form' => array('form'),
    ),
  );

  $ret = array();
  db_create_table($ret, 'lingwo_fields_revisions', $schema['lingwo_fields_revisions']);
  db_create_table($ret, 'lingwo_fields_forms',     $schema['lingwo_fields_forms']);

  # rebuild the schema cache so that drupal_write_record() will work.
  drupal_get_schema(NULL, TRUE);

  # copy all the data from the CCK table to this table..
  $entry_content_type = LingwoEntry::$settings->entry_content_type;
  if (!empty($entry_content_type)) {
    foreach (content_fields(NULL, $entry_content_type) as $field_name => $field) {
      // dsm()
      if ($field['module'] == 'lingwo_fields') {
        $items = array();
        $last = NULL;
        $res = db_query('SELECT nid, vid, delta, '.
          $field_name .'_type as type, '.
          $field_name .'_name as name, '.
          $field_name .'_value as value, '.
          $field_name .'_automatic as automatic '.
          'FROM {content_'. $field_name .'} ORDER BY nid, vid, delta'
        );
        while ($row = db_fetch_object($res)) {
          $cur = implode(':', array($row->nid, $row->vid));
          if ($last != $cur) {
            if (!is_null($last)) {
              _lingwo_fields_insert_new_fields($items);
              $items = array();
            }
            $last = $cur;
          }
          $items[] = $row;
        }
        _lingwo_fields_insert_new_fields($items);

        // remove the CCK field
        content_field_instance_delete($field_name, $entry_content_type);
      }
    }
  }

  // we need to happen after the lingwo_dictionary module with weight 50
  update_sql("UPDATE {system} SET weight = 51 WHERE name = 'lingwo_fields'");

  return $ret;
}

/**
 * Implementation of hook_install().
 */
function lingwo_fields_install() {
  drupal_install_schema('lingwo_fields');

  // we need to happen after the lingwo_dictionary module with weight 50
  update_sql("UPDATE {system} SET weight = 51 WHERE name = 'lingwo_fields'");
}

/**
 * Implementation of hook_uninstall().
 */
function lingwo_fields_uninstall() {
  drupal_uninstall_schema('lingwo_fields');
}

/**
 * Implementation of hook_enable().
 */
function lingwo_fields_enable() {
}

/**
 * Implementation of hook_disable().
 */
function lingwo_fields_disable() {
}

