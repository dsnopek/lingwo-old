<?php
// $Id$

/**
 * @file
 * Implements a CCK field for dictionary entries, which will be different for each language and part of speech
 */

/**
 * Implementation of hook_menu().
 */
function lingwo_fields_menu() {
  $items = array();

  $items['lingwo_fields/ahah/%'] = array(
    'title' => 'Lingwo Dictionary Fields AHAH',
    'page callback' => 'lingwo_fields_ahah',
    'page arguments' => array(2),
    // TODO: What should this be?
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK
  );

  return $items;
}

/**
 * Implementation of hook_theme().
 */
function lingwo_fields_theme() {
  return array(
    'lingwo_fields_widget' => array(
      'arguments' => array('element' => NULL),
    ),
    'lingwo_fields_formatter_default' => array(
      'arguments' => array('element' => NULL),
    ),
  );
}

/**
 * CCK hooks
 */

/**
 * Implementation of hook_field_info().
 */
function lingwo_fields_field_info() {
  return array(
    'lingwo_fields' => array(
      'label' => t('Lingwo Dictionary Fields'),
      'description' => t('Store dictionary fields in the database.'),
    ),
  );
}

/**
 * Implementation of hook_widget_info().
 */
function lingwo_fields_widget_info() {
  return array(
    'lingwo_fields_widget' => array(
      'label' => 'Lingwo Dictionary Fields Widget',
      'field types' => array('lingwo_fields'),
      'multiple values' => CONTENT_HANDLE_MODULE,
      //'multiple values' => CONTENT_HANDLE_CORE,
      'description' => t('Widget for editing fields for a dictionary entry .'),
    ),
  );
}

/**
 * Implementation of hook_field_formatter_info().
 */
function lingwo_fields_field_formatter_info() {
  return array(
    'default' => array(
      'label' => t('Lingwo Dictionary Fields Formatter'),
      'field types' => array('lingwo_fields'),
      'multiple values' => CONTENT_HANDLE_MODULE,
    ),
  );
}

/**
 * Implementation of hook_field_settings().
 */
function lingwo_fields_field_settings($op, $field) {
  switch ($op) {
    case 'database columns':
      $columns['type'] = array(
        'type' => 'varchar',
        'length' => 10,
        'not null' => TRUE,
        'sortable' => TRUE,
        'views' => TRUE
      );
      $columns['name'] = array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'sortable' => TRUE,
        'views' => TRUE
      );
      $columns['value'] = array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'sortable' => TRUE,
        'views' => TRUE
      );
      return $columns;
  }
}

/**
 * Implementation of hook_field().
 */
/*
function lingwo_fields_field($op, &$node, $field, &$items, $teaser, $page) {
  switch ($op) {
    case 'load':
      // Content_storage does serialize each field item's columns (if the 
      // 'serialize' key for that column is set) upon writing to the db,
      // but does not unserialize when reading from the db. Hopefully,
      // this will be fixed in the future, but for now, we have to 
      // explicitly unserialize.
      if (is_array($items)) {
        foreach ($items as &$item) {
          if (is_string($item['data'])) {
            $item['data'] = unserialize($item['data']);
          }
        }
        return (array($field['field_name'] => $items));
      }
      break;
    case 'validate':
      return $items;
  }
}
*/

/**
 * Implementation of hook_content_is_empty().
 */
function lingwo_fields_content_is_empty($item, $field) {
  return empty($item['value']);
}

/**
 * Implementation of hook_widget
 */
function lingwo_fields_widget(&$form, &$form_state, $field, $items, $delta = 0) {
  $node = $form['#node'];
  if (!isset($node)) {
    $node = (object)$form_state['node'];
  }

  $pos_vid = lingwo_dictionary_pos_vocabulary();

  if (isset($node->taxonomy)) {
    foreach ($node->taxonomy as $term) {
      if ($term->vid == $pos_vid) {
        $pos = $term;
        break;
      }
    }
  }

  $default_values = array();
  foreach ($items as $item) {
    $default_values[$item['type']][$item['name']] = $item['value'];
  }

  $field_name = $field['field_name'];

  $element = array(
    '#type' => 'fieldset',
    '#title' => $field['field_label']
  );

  // If this node is new, then add the AHAH and 'Refresh' button that allows
  // changing which fields are available.
  if (!$node->nid) {
    $ahah = array(
      //'event' => 'change',
      'path' => 'lingwo_fields/ahah/'. $field_name,
      'wrapper' => $field_name .'-wrapper',
      'effect' => 'fade',
    );
    $form['language']['#ahah'] = $ahah; // + array('event' => 'change');

    if (isset($form['taxonomy'][$pos_vid])) {
      $form['taxonomy'][$pos_vid]['#ahah'] = $ahah;
      // DRS: hack to make sure the ahah stuff gets added even if i18ntaxonomy
      // is going to rebuild the taxonomy form elements in a form_alter hook.
      $form['taxonomy'][$pos_vid]['#id'] = 'edit-taxonomy-'. $pos_vid;
      form_expand_ahah($form['taxonomy'][$pos_vid]);
    }

    $element['refresh'] = array(
      '#type' => 'submit',
      '#value' => t('Refresh'),
      '#submit' => array('lingwo_fields_change_pos_submit'),
      // TODO: do we need this?
      '#field_name' => $field_name,
      '#ahah' => $ahah + array('event' => 'click')
    );
  }

  $element['wrapper'] = array(
    '#prefix' => '<div id="'. $field_name .'-wrapper">',
    '#suffix' => '</div>',
  );
  $element['wrapper']['fields'] = array(
    //'#theme' => 'lingwo_fields_widget_form',
    '#parents' => array($field_name),
  );

  $index = 0;
  foreach (lingwo_language_fields($node->language, strtolower($pos->name)) as $field) {
    $field_form = array();
    $field_form['name'] = array(
      '#type' => 'hidden',
      '#value' => $field['name']
    );
    $field_form['type'] = array(
      '#type' => 'hidden',
      '#value' => $field['type'],
    );
    $field_form['value'] = array(
      '#title' => isset($field['label']) ? $field['label'] : $field['name'],
      '#default_value' => $default_values[$field['type']][$field['name']],
      // TODO: we need to enforce required with select boxes
      '#required' => $field['required'] ? TRUE : FALSE
    );
    switch ($field['type']) {
      case 'class':
        $field_form['value'] += array(
          '#type' => 'checkbox',
        );
        break;;
      case 'option':
        $field_form['value'] += array(
          '#type' => 'select',
          '#options' => $field['values'],
        );
        break;;
      case 'form':
        $field_form['value'] += array(
          '#type' => 'textfield',
        );
        break;;
    };

    $element['wrapper']['fields'][$index++] = $field_form;
  }

  if ($index == 0) {
    $element['wrapper']['placeholder'] = array(
      '#type' => 'markup',
      '#value' => '<p>'. t('No fields for this Language and Part of Speech') .'</p>'
    );
  }

  drupal_add_js(drupal_get_path('module', 'lingwo_dictionary') .'/morphology/morphology.js');

  $language_list = $node->language ?
    (object)array('enabled' => TRUE, 'language' => $node->language) : language_list();
  foreach ($language_list as $lang) {
    $lang_js = drupal_get_path('module', 'lingwo_dictionary') .'/morphology/'. $lang->language .'.js';
    if ($lang->enabled && file_exists($lang_js)) {
        drupal_add_js($lang_js);
    }
  }

  drupal_add_js(array('lingwo_fields' => array(
    'field_name' => $field_name,
    'is_new' => $node->nid == 0)
  ), 'setting');
  drupal_add_js(drupal_get_path('module', 'lingwo_fields') .'/lingwo_fields.js');

  return $element;
}

function lingwo_fields_ahah($field_name) {
  module_load_include('inc', 'node', 'node.pages');
  $form_state = array('storage' => NULL, 'submitted' => FALSE);
  $form_build_id = $_POST['form_build_id'];

  $form = form_get_cache($form_build_id, $form_state);

  _ld_disable_validation($form);

  $args = $form['#parameters'];
  $form_id = array_shift($args);
  $form_state['post'] = $form['#post'] = $_POST;
  $form['#post']['form_id'] = $form_id;
  $form['#programmed'] = $form['#redirect'] = FALSE;

  // DRS: prevents submit, not sure what other consequences this has
  $form_state['rebuild'] = TRUE;

  drupal_process_form($form_id, $form, $form_state);
  $node = _ld_form_to_node($form, $form_state);

  $form = drupal_rebuild_form($form_id, $form_state, $args, $form_build_id);

  $element = $form[$field_name]['wrapper']; 
  unset($element['#prefix'], $element['#suffix']);
  $output = theme('status_messages') . drupal_render($element);

  drupal_json(array('status' => TRUE, 'data' => $output));
}

function lingwo_fields_change_pos_submit($form, &$form_state) {
  $node = _ld_form_to_node($form, $form_state);
  $field_name = $form_state['clicked_button']['#field_name'];

  //$form_state[$field_name]['senses'] = $senses;
}

/*
 * Theming
 */

function theme_lingwo_fields_widget($form) {
  // TODO: me!!
}

function theme_lingwo_fields_formatter_default($element) {
  // TODO: me!!
  return '<p>formatter!!</p>';
}

