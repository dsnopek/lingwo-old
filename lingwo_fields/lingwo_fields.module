<?php
// $Id$

/**
 * @file
 * Implements a CCK field for dictionary entries, which will be different for each language and part of speech
 */

/**
 * Implementation of hook_menu().
 */
function lingwo_fields_menu() {
  $items = array();

  // TODO: now that we are using ahah_helper, this should be removed
  $items['lingwo_fields/ahah/%'] = array(
    'title' => 'Lingwo Dictionary Fields AHAH',
    'page callback' => 'lingwo_fields_ahah',
    'page arguments' => array(2),
    // TODO: What should this be?
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK
  );

  return $items;
}

/**
 * Implementation of hook_theme().
 */
function lingwo_fields_theme() {
  return array(
    'lingwo_fields_widget_form_wrapper' => array(
      'arguments' => array('element' => NULL),
    ),
    'lingwo_fields_widget_form' => array(
      'arguments' => array('element' => NULL),
      'pattern' => 'lingwo_fields_widget_form_',
    ),
    'lingwo_fields_formatter_default' => array(
      'arguments' => array('element' => NULL),
    ),
    'lingwo_fields_view' => array(
      'arguments' => array('element' => NULL),
      'pattern' => 'lingwo_fields_view_',
    ),
  );
}

/**
 * CCK hooks
 */

/**
 * Implementation of hook_field_info().
 */
function lingwo_fields_field_info() {
  return array(
    'lingwo_fields' => array(
      'label' => t('Lingwo Dictionary Fields'),
      'description' => t('Store dictionary fields in the database.'),
    ),
  );
}

/**
 * Implementation of hook_widget_info().
 */
function lingwo_fields_widget_info() {
  return array(
    'lingwo_fields_widget' => array(
      'label' => 'Lingwo Dictionary Fields Widget',
      'field types' => array('lingwo_fields'),
      'multiple values' => CONTENT_HANDLE_MODULE,
      //'multiple values' => CONTENT_HANDLE_CORE,
      'description' => t('Widget for editing fields for a dictionary entry .'),
    ),
  );
}

/**
 * Implementation of hook_field_formatter_info().
 */
function lingwo_fields_field_formatter_info() {
  return array(
    'default' => array(
      'label' => t('Lingwo Dictionary Fields Formatter'),
      'field types' => array('lingwo_fields'),
      'multiple values' => CONTENT_HANDLE_MODULE,
    ),
  );
}

/**
 * Implementation of hook_field_settings().
 */
function lingwo_fields_field_settings($op, $field) {
  switch ($op) {
    case 'database columns':
      $columns['type'] = array(
        'type' => 'varchar',
        'length' => 10,
        'sortable' => TRUE,
        'views' => TRUE,
      );
      $columns['name'] = array(
        'type' => 'varchar',
        'length' => 255,
        'sortable' => TRUE,
        'views' => TRUE
      );
      $columns['value'] = array(
        'type' => 'varchar',
        'length' => 255,
        'sortable' => TRUE,
        'views' => TRUE
      );
      $columns['automatic'] = array(
        'description' => 'Boolean indicating whether this field was generated automatically or not',
        'type' => 'int',
        'default' => 1,
        'views' => TRUE,
      );
      return $columns;
  }
}

/**
 * Implementation of hook_field().
 */
function lingwo_fields_field($op, &$node, $field, &$items, $teaser, $page) {
  switch ($op) {
    case 'load':
      foreach ($items as &$item) {
        if ($item['type'] == 'class') {
          $item['value'] = intval($item['value']);
        }
      }
      break;
    case 'presave':
      # remove the phantom refresh button that tries to sneak in here occasionally.
      if (isset($items['refresh'])) {
        unset($items['refresh']);
      }
      break;
    case 'validate':
      # TODO: check for required items!
      return $items;
  }
}


/**
 * Implementation of hook_content_is_empty().
 */
function lingwo_fields_content_is_empty($item, $field) {
  if (empty($item['value'])) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Implementation of hook_widget
 */
function lingwo_fields_widget(&$form, &$form_state, $field, $items, $delta = 0) {
  $node = $form['#node'];
  if (!isset($node)) {
    $node = (object)$form_state['node'];
  }

  if (lingwo_dictionary_is_translation($node)) {
    return NULL;
  }

  ahah_helper_register($form, $form_state);

  $pos_vid = lingwo_dictionary_pos_vocabulary();
  $pos = lingwo_dictionary_get_pos($node);

  $default_values = array();
  foreach ($items as $item) {
    $default_values[$item['type']][$item['name']] = $item;
  }

  $field_name = $field['field_name'];

  $element = array(
    '#type' => 'fieldset',
    '#title' => $field['field_label'],
    '#theme' => 'lingwo_fields_widget_form_wrapper'
  );

  // If this node is new, then add the AHAH and 'Refresh' button that allows
  // changing which fields are available.
  if (!$node->nid) {
    $ahah = array(
      //'event' => 'change',
      'path' => ahah_helper_path(array($field_name, 'wrapper')),
      //'path' => 'lingwo_fields/ahah/'. $field_name,
      'wrapper' => $field_name .'-wrapper',
      'effect' => 'fade',
    );
    $form['language']['#ahah'] = $ahah; // + array('event' => 'change');

    if (isset($form['taxonomy'][$pos_vid])) {
      $form['taxonomy'][$pos_vid]['#ahah'] = $ahah;
      // DRS: hack to make sure the ahah stuff gets added even if i18ntaxonomy
      // is going to rebuild the taxonomy form elements in a form_alter hook.
      $form['taxonomy'][$pos_vid]['#id'] = 'edit-taxonomy-'. $pos_vid;
      form_expand_ahah($form['taxonomy'][$pos_vid]);
    }

    $element['refresh'] = array(
      '#type' => 'submit',
      '#value' => t('Refresh'),
      '#submit' => array('lingwo_fields_change_pos_submit'),
      // TODO: do we need this?
      '#field_name' => $field_name,
      '#ahah' => $ahah + array('event' => 'click')
    );
  }

  $element['wrapper'] = array(
    '#prefix' => '<div id="'. $field_name .'-wrapper">',
    '#suffix' => '</div>',
  );
  $element['wrapper']['fields'] = array(
    '#theme' => array(
      'lingwo_fields_widget_form_'. $node->language .'_'. $pos,
      'lingwo_fields_widget_form_'. $node->language, 
      'lingwo_fields_widget_form'
    ),

    '#parents' => array($field_name),
  );

  $field_name_enc = str_replace('_', '-', $field_name);
  $field_map = array(
    'classes' => array(),
    'options' => array(),
    'forms' => array()
  );

  $index = 0;
  foreach (lingwo_language_fields($node->language, $pos) as $field) {
    // TODO: use $form_state['storage'] to get the interim default values!
    $default = $default_values[$field['type']][$field['name']];
    $field_form = array(
      '#prefix' => '<div>',
      '#suffix' => '</div>',
    );
    $field_form['name'] = array(
      '#type' => 'hidden',
      '#value' => $field['name']
    );
    $field_form['type'] = array(
      '#type' => 'hidden',
      '#value' => $field['type'],
    );
    $field_form['value'] = array(
      '#title' => isset($field['label']) ? $field['label'] : $field['name'],
      '#default_value' => $default['value'],
      // TODO: we need to enforce required with select boxes
      '#required' => $field['required'] ? TRUE : FALSE,
      '#attributes' => array(
        'class' => $field_name_enc .'-control',
        'data-type' => $field['type'],
        'data-name' => $field['name'],
        'data-show' => $field['show'],
      ),
      '#description' => $field['description'],
    );

    switch ($field['type']) {
      case 'class':
        $field_form['value'] += array(
          '#type' => 'select',
          '#options' => array(
            0 => t('False'),
            1 => t('True'),
          ),
        );
        break;;
      case 'option':
        $options = $field['options'];
        $options = array('' => '-none-') + $options;

        $field_form['value'] += array(
          '#type' => 'select',
          '#options' => $options,
        );
        break;;
      case 'form':
        $field_form['value'] += array(
          '#type' => 'textfield',
        );
        break;;
    };

    $field_form['automatic'] = array(
      '#type' => 'checkbox',
      '#title' => t('Automatic'),
      '#default_value' => !empty($default) ? $default['automatic'] : TRUE,
    );

    $element['wrapper']['fields'][$index++] = $field_form;
  }

  if ($index == 0) {
    $element['wrapper']['placeholder'] = array(
      '#type' => 'markup',
      '#value' => '<p>'. t('No fields for this Language and Part of Speech') .'</p>'
    );
  }

  // for the theme function
  $element['#node'] = $node;
  $element['#pos'] = $pos;
  $element['#field_name_enc'] = $field_name_enc;

  return $element;
}

function theme_lingwo_fields_widget_form_wrapper($element) {
  $node = $element['#node'];

  drupal_add_js(drupal_get_path('module', 'lingwo_dictionary') .'/morphology/morphology.js');

  // load the required language(s)
  $language_list = $node->language ?
    array((object)array('enabled' => TRUE, 'language' => $node->language)) : language_list();
  foreach ($language_list as $lang) {
    $lang_js = drupal_get_path('module', 'lingwo_dictionary') .'/morphology/'. $lang->language .'.js';
    if ($lang->enabled && file_exists($lang_js)) {
        drupal_add_js($lang_js);
    }
  }

  // get a map of all the pos values
  $pos_vid = lingwo_dictionary_pos_vocabulary();
  $pos_values = array();
  foreach (taxonomy_get_tree($pos_vid) as $term) {
    $pos_values[$term->tid] = strtolower($term->name);
  }

  drupal_add_js(array('lingwo_fields' => array(
    'field_name' => $element['#field_name_enc'],
    'is_new' => $node->nid == 0,
    'pos_vid' => $pos_vid,
    'pos_values' => $pos_values,
    'lang' => $node->language,
    'pos' => $element['#pos'],
  )), 'setting');
  drupal_add_js(drupal_get_path('module', 'lingwo_fields') .'/lingwo_fields.js');

  return drupal_render($element); 
}

// TODO: now that we are using ahah_helper, this should be removed
function lingwo_fields_ahah($field_name) {
  module_load_include('inc', 'node', 'node.pages');
  $form_state = array('storage' => NULL, 'submitted' => FALSE);
  $form_build_id = $_POST['form_build_id'];

  $form = form_get_cache($form_build_id, $form_state);

  _ld_disable_validation($form);

  $args = $form['#parameters'];
  $form_id = array_shift($args);
  $form_state['post'] = $form['#post'] = $_POST;
  $form['#post']['form_id'] = $form_id;
  $form['#programmed'] = $form['#redirect'] = FALSE;

  // DRS: prevents submit, not sure what other consequences this has
  $form_state['rebuild'] = TRUE;

  drupal_process_form($form_id, $form, $form_state);
  $node = _ld_form_to_node($form, $form_state);

  $form = drupal_rebuild_form($form_id, $form_state, $args, $form_build_id);

  $element = $form[$field_name]['wrapper']; 
  unset($element['#prefix'], $element['#suffix']);
  $output = theme('status_messages') . drupal_render($element);

  drupal_json(array('status' => TRUE, 'data' => $output));
}

function lingwo_fields_change_pos_submit($form, &$form_state) {
  $node = _ld_form_to_node($form, $form_state);
  $field_name = $form_state['clicked_button']['#field_name'];
}

/*
 * Our "API" functions
 */
function lingwo_fields_map_items($node, $items) {
  $fields = array();
  foreach (lingwo_language_fields($node->language, lingwo_dictionary_get_pos($node)) as $field) {
    $fields[$field['type'] .':'. $field['name']] = $field;
  }
  foreach (element_children($items) as $index) {
    // From the formatter them function we get $items[$index]['#item'] but if we just toss
    // $node->$field_name in here, we get $items[$index] -- both modes are supported.
    $item = $items[$index]['#item'] ? $items[$index]['#item'] : $items[$index];
    $key = $item['type'] .':'. $item['name'];
    if (isset($fields[$key])) {
      $fields[$key] += $item;
    }
  }

  return $fields;
}

/*
 * Theming
 */

function template_preprocess_lingwo_fields_widget_form(&$variables) {
  $variables['fields'] = array(
    'forms' => array(),
    'classes' => array(),
    'options' => array()
  );

  foreach (element_children($variables['element']) as $name) {
    $el = &$variables['element'][$name];
    $type = $el['type']['#value'];
    $type .= ($type == 'class') ? 'es' : 's';
    $variables['fields'][$type][$el['name']['#value']] = &$el;
  }
}

function theme_lingwo_fields_widget_form($element) {
  return drupal_render($element);
}

function theme_lingwo_fields_formatter_default($element) {
  $node = $element['#node'];

  lingwo_dictionary_load_translation_source($node);
  if ($node->translation_source) {
    // display the fields as if this were the source node (with the source nodes
    // language) and not a member of this language
    $node = $node->translation_source;
    $field_name = $element['#field_name'];
    $element = $node->$field_name;
  }

  foreach (lingwo_fields_map_items($node, $element) as $name => $item) {
    $value = $item['value'];
    if ($item['type'] == 'class') {
      $value = $item['value'] ? t('true') : t('false');
    }
    $form[$name] = array(
      '#type' => 'item',
      '#title' => isset($item['label']) ? $item['label'] : $item['name'],
      '#value' => $value,
      '#automatic' => $item['automatic'],
      '#weight' => $index
    );
    $index++;
  }

  // pack the form with some useful data
  $form['#node'] = $node;

  // Since CCK forces our theme name, we send to another theme to do the real
  // theming, with possible specific themes.
  $pos = lingwo_dictionary_get_pos($node);

  return theme(array(
      'lingwo_fields_view_'. $node->language .'_'. $pos,
      'lingwo_fields_view_'. $node->language, 
      'lingwo_fields_view'
  ), $form);
}

function theme_lingwo_fields_view($element) {
  return drupal_render($element);
}

