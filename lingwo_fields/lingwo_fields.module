<?php
// $Id$

/**
 * @file
 * Implements a CCK field for dictionary entries, which will be different for each language and part of speech
 */

/**
 * Implementation of hook_menu().
 */
function lingwo_fields_menu() {
  $items = array();

  // TODO: now that we are using ahah_helper, this should be removed
  /*
  $items['lingwo_fields/ahah/%'] = array(
    'title' => 'Lingwo Dictionary Fields AHAH',
    'page callback' => 'lingwo_fields_ahah',
    'page arguments' => array(2),
    // TODO: What should this be?
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK
  );
  */

  return $items;
}

/**
 * Implementation of hook_theme().
 */
function lingwo_fields_theme() {
  return array(
    'lingwo_fields_widget_form_wrapper' => array(
      'arguments' => array('element' => NULL),
    ),
    'lingwo_fields_widget_form' => array(
      'arguments' => array('element' => NULL),
      'pattern' => 'lingwo_fields_widget_form_',
    ),
    'lingwo_fields_formatter_default' => array(
      'arguments' => array('node' => NULL),
    ),
    'lingwo_fields_view' => array(
      'arguments' => array('element' => NULL),
      'pattern' => 'lingwo_fields_view_',
    ),
  );
}

/*
 * Implementation of hook_form_alter().
 */
function lingwo_fields_form_alter(&$form, $form_state, $form_id) {
  if ($form_id == (lingwo_dictionary_settings('entry_content_type') .'_node_form')) {
    $node = $form['#node'];
    if (!lingwo_dictionary_entry_is_translation($node)) {
      // only applies to entries that are not translations
      $form['lingwo_fields'] = lingwo_fields_widget($form, $form_state);
    }
  }
}

/**
 * Implementation of hook_content_extra_fields().
 */
function lingwo_fields_content_extra_fields($type_name) {
  $extra = array();

  if (lingwo_dictionary_settings('entry_content_type') == $type_name) {
    $extra['lingwo_fields'] = array(
      'label' => t('Lingwo Fields'),
      'description' => t('lingwo_fields module.'),
      'weight' => 1,
    );
  }

  return $extra;
}

function _lingwo_fields_clean(&$items) {
  unset($items['refresh']);

  foreach ($items as &$item) {
    if ($item['type'] == 'class') {
      $item['value'] = intval($item['value']);
    }
    $item['automatic'] = (bool)$item['automatic'];
  }
}


function _lingwo_fields_write_record($fields, $is_update) {
  if ($is_update) {
    drupal_write_record('lingwo_fields_revisions', $fields, 'vid');
  }
  else {
    drupal_write_record('lingwo_fields_revisions', $fields);
  }

  # update our lookup table!
  # TODO: in the future we will have many more lookup tables!
  db_query('DELETE FROM {lingwo_fields_forms} WHERE nid = %d', $fields->nid);
  foreach ($fields->data as $field) {
    if ($field['type'] == 'form') {
      $form = (object)array(
        'nid'       => $fields->nid,
        'form'      => $field['value'],
        'form_name' => $field['name'],
      );
      drupal_write_record('lingwo_fields_forms', $form);
    }
  }
}

/**
 * Implementation of hook_nodeapi().
 */
function lingwo_fields_nodeapi(&$node, $op, $a3=NULL, $a4=NULL) {
  // only applies to entries
  if ($node->type != lingwo_dictionary_settings('entry_content_type'))
    return NULL;

  // view should happen for both sources and translations
  if ($op == 'view') {
    $node->content['lingwo_fields'] = array(
      '#value' => theme('lingwo_fields_formatter_default', $node),
    );
  }

  // the rest only apply to sources
  if (lingwo_dictionary_entry_is_translation($node))
    return NULL;

  switch ($op) {
    case 'load':
      $res = db_query("SELECT data FROM {lingwo_fields_revisions} WHERE vid = %d", $node->vid);
      if ($row = db_fetch_object($res)) {
        return array('lingwo_fields' => unserialize($row->data));
      }
      break;

    case 'presave':
    case 'prepare':
      if (!empty($node->lingwo_fields)) {
        _lingwo_fields_clean($node->lingwo_fields);
      }
      break;

    case 'insert':
    case 'update':
      $object = (object)array(
        'nid'  => $node->nid,
        'vid'  => $node->vid,
        'data' => $node->lingwo_fields,
      );

      _lingwo_fields_write_record($object, empty($node->revision) && $op == 'update');
      break;

    case 'delete revision':
      db_query("DELETE FROM {lingwo_fields_revisions} WHERE vid = %s", $node->vid);
      break;

    case 'delete':
      db_query("DELETE FROM {lingwo_fields_revisions} WHERE nid = %s", $node->nid);
      db_query("DELETE FROM {lingwo_fields_forms}     WHERE nid = %s", $node->nid);
      break;
  }
}

/**
 * Implementation of hook_widget
 */
function lingwo_fields_widget(&$form, &$form_state) {
  $node = $form['#node'];
  if (!isset($node)) {
    $node = (object)$form_state['node'];
  }

  ahah_helper_register($form, $form_state);

  $pos = lingwo_dictionary_entry_get_pos($node);
  $items = $node->lingwo_fields;

  $default_values = array();
  if (!empty($items)) {
    foreach ($items as $item) {
      $default_values[$item['name']] = $item;
    }
  }

  $element = array(
    '#type'  => 'fieldset',
    '#title' => t('Fields'),
    '#theme' => 'lingwo_fields_widget_form_wrapper',
    '#tree'  => TRUE,
  );

  // If this node is new, then add the AHAH and 'Refresh' button that allows
  // changing which fields are available.
  if (!$node->nid) {
    $ahah = array(
      //'event' => 'change',
      'path' => ahah_helper_path(array('lingwo_fields', 'wrapper')),
      //'path' => 'lingwo_fields/ahah/'. $field_name,
      'wrapper' => 'lingwo_fields-wrapper',
      'effect' => 'fade',
    );
    $form['language']['#ahah'] = $ahah; // + array('event' => 'change');
    $form['pos']['#ahah'] = $ahah;

    $element['refresh'] = array(
      '#type' => 'submit',
      '#value' => t('Refresh'),
      '#submit' => array('lingwo_fields_change_pos_submit'),
      '#ahah' => $ahah + array('event' => 'click')
    );
  }

  $element['wrapper'] = array(
    '#prefix' => '<div id="lingwo_fields-wrapper">',
    '#suffix' => '</div>',
  );
  $element['wrapper']['fields'] = array(
    '#theme' => array(
      'lingwo_fields_widget_form_'. $node->language .'_'. $pos,
      'lingwo_fields_widget_form_'. $node->language, 
      'lingwo_fields_widget_form'
    ),
    '#parents' => array('lingwo_fields'),
  );

  $field_map = array(
    'classes' => array(),
    'options' => array(),
    'forms' => array()
  );

  $index = 0;
  foreach (lingwo_language_fields($node->language, $pos) as $name => $field) {
    // TODO: use $form_state['storage'] to get the interim default values!
    $default = $default_values[$name];
    if (empty($default)) {
      $default = array(
        'type' => $field['type'],
        'name' => $name,
        'value' => NULL,
        'automatic' => TRUE,
      );
    }
    $field_form = array(
      '#prefix' => '<div>',
      '#suffix' => '</div>',
      '#item'   => $default,
    );
    $field_form['name'] = array(
      '#type' => 'hidden',
      '#value' => $name,
    );
    $field_form['type'] = array(
      '#type' => 'hidden',
      '#value' => $field['type'],
    );
    $field_form['value'] = array(
      '#title' => isset($field['label']) ? $field['label'] : $name,
      '#default_value' => $default['value'],
      // TODO: we need to enforce required with select boxes
      '#required' => $field['required'] ? TRUE : FALSE,
      '#attributes' => array(
        'class' => 'lingwo-fields-control',
        'data-type' => $field['type'],
        'data-name' => $name,
      ),
      '#description' => $field['description'],
    );

    switch ($field['type']) {
      case 'class':
        $field_form['value'] += array(
          '#type' => 'select',
          '#options' => array(
            0 => t('False'),
            1 => t('True'),
          ),
        );
        break;;
      case 'option':
        $options = $field['options'];
        $options = array('' => '-none-') + $options;

        $field_form['value'] += array(
          '#type' => 'select',
          '#options' => $options,
        );
        break;;
      case 'form':
        $field_form['value'] += array(
          '#type' => 'textfield',
        );
        break;;
    };

    $field_form['automatic'] = array(
      '#type' => 'checkbox',
      '#title' => t('Automatic'),
      '#default_value' => $default['automatic'],
    );

    $element['wrapper']['fields'][$index++] = $field_form;
  }

  if ($index == 0) {
    $element['wrapper']['placeholder'] = array(
      '#type' => 'markup',
      '#value' => '<p>'. t('No fields for this Language and Part of Speech') .'</p>'
    );
  }

  // for the theme function
  $element['#node'] = $node;
  $element['#pos'] = $pos;

  return $element;
}

function theme_lingwo_fields_widget_form_wrapper($element) {
  $node = $element['#node'];

  lingwo_dictionary_add_require_js();

  drupal_add_js(array('lingwo_fields' => array(
    'is_new' => $node->nid == 0,
    // TODO: do we really need this now that it is static?
    'pos_field' => 'edit-pos',
    'lang' => $node->language,
    'pos' => $element['#pos'],
  )), 'setting');
  drupal_add_js(drupal_get_path('module', 'lingwo_fields') .'/lingwo_fields.js');

  return drupal_render($element); 
}

// TODO: now that we are using ahah_helper, this should be removed
/*
function lingwo_fields_ahah($field_name) {
  module_load_include('inc', 'node', 'node.pages');
  $form_state = array('storage' => NULL, 'submitted' => FALSE);
  $form_build_id = $_POST['form_build_id'];

  $form = form_get_cache($form_build_id, $form_state);

  _ld_disable_validation($form);

  $args = $form['#parameters'];
  $form_id = array_shift($args);
  $form_state['post'] = $form['#post'] = $_POST;
  $form['#post']['form_id'] = $form_id;
  $form['#programmed'] = $form['#redirect'] = FALSE;

  // DRS: prevents submit, not sure what other consequences this has
  $form_state['rebuild'] = TRUE;

  drupal_process_form($form_id, $form, $form_state);
  $node = _ld_form_to_node($form, $form_state);

  $form = drupal_rebuild_form($form_id, $form_state, $args, $form_build_id);

  $element = $form[$field_name]['wrapper']; 
  unset($element['#prefix'], $element['#suffix']);
  $output = theme('status_messages') . drupal_render($element);

  drupal_json(array('status' => TRUE, 'data' => $output));
}
*/

function lingwo_fields_change_pos_submit($form, &$form_state) {
  // TODO: should we really do this?
  $node = _ld_form_to_node($form, $form_state);
}

/*
 * Our "API" functions
 */
function lingwo_fields_map_items(&$items, $fapi = FALSE) {
  $map = array(
    ':classes' => array(),
    ':options' => array(),
    ':forms'   => array(),
  );

  foreach (element_children($items) as $index) {
    // From the formatter them function we get $items[$index]['#item'] but if we just toss
    // $node->lingwo_fields in here, we get $items[$index] -- both modes are supported.
    $item_info = $items[$index];
    /*
    if ($fapi) {
      if (empty($item_info['#item'])) {
        // This isn't an item, so skip it
        continue;
      }
      $item_info = $item_info['#item'];
    }
    */

    $item_info = $items[$index]['#item'] ? $items[$index]['#item'] : $items[$index];
    $type = $item_info['type'];
    $name = $item_info['name'];

    // put into the basic flat map
    $map[$name] = &$items[$index];
    // and group by type
    $type .= ($type == 'class') ? 'es' : 's';
    $map[':'. $type][] = &$items[$index];
  }

  return $map;
}

/*
 * Theming
 */

function template_preprocess_lingwo_fields_widget_form(&$vars) {
  $vars['fields'] = lingwo_fields_map_items($vars['element'], TRUE);
}

function theme_lingwo_fields_widget_form($element) {
  return drupal_render($element);
}

function theme_lingwo_fields_formatter_default($node) {
  lingwo_dictionary_entry_load_translation_source($node);
  if ($node->translation_source) {
    // display the fields as if this were the source node (with the source nodes
    // language) and not a member of this language
    $node = $node->translation_source;
  }
  $items = $node->lingwo_fields;

  $fdef = lingwo_language_fields($node->language, lingwo_dictionary_entry_get_pos($node));

  // fill element with real FAPI elements that simple display the item
  $element = array();
  foreach ($items as $item) {
    $name = $item['name'];
    $label = isset($fdef[$name]['label']) ? $fdef[$name]['label'] : $name;

    $element[] = array(
      '#type' => 'item',
      '#title' => $label,
      '#value' => $item['value'],
      '#item'  => $item,
    );
  }

  // Since CCK forces our theme name, we send to another theme to do the real
  // theming, with possible specific themes.
  $pos = lingwo_dictionary_entry_get_pos($node);

  return theme(array(
      'lingwo_fields_view_'. $node->language .'_'. $pos,
      'lingwo_fields_view_'. $node->language, 
      'lingwo_fields_view'
  ), $element);
}

function template_preprocess_lingwo_fields_view(&$vars) {
  $vars['fields'] = lingwo_fields_map_items($vars['element'], TRUE);
}

function theme_lingwo_fields_view($element) {
  return drupal_render($element);
}

