<?php

require_once(drupal_get_path('module', 'lingwo_dictionary') .'/lingwo_dictionary.test.inc');

class LingwoFieldsTestCase extends LingwoDictionaryWebTestCase {
  private $pos_terms;

  public static function getInfo() {
    return array(
      'name' => 'lingwo_fields',
      'description' => 'Testing the web functionality provided by lingwo_fields.',
      'group' => 'Lingwo Dictionary',
    );
  }

  public function setUp() {
    parent::setUp('ahah_helper', 'lingwo_language', 'lingwo_fields');

    $entry_type = lingwo_dictionary_entry_content_type();

    // add the lingwo_senses CCK field to the entry content type
    $edit = array(
      '_add_new_field[label]'       => 'Fields',
      '_add_new_field[field_name]'  => 'fields',
      '_add_new_field[type]'        => 'lingwo_fields',
      '_add_new_field[widget_type]' => 'lingwo_fields_widget',
    );
    $this->drupalPost('admin/content/node-type/'. $entry_type .'/fields', $edit, 'Save');
    $this->drupalPost(NULL, array('multiple' => 1), 'Save field settings');
  }

  # Checks that we can load the fields for a language/pos and save them normally.
  # Also checks for the presense of two bugs that existed in early implementations:
  #  (1) One caused taxonomy to do strange things (not appear on the form, throw warnings)
  #  (2) CCK would attempt to save empty fields causing database errors.
  public function testCreate() {
    $entry_type = lingwo_dictionary_entry_content_type();
    $pos_vid = lingwo_dictionary_pos_vocabulary();

    // get that the create page is all good
    $this->drupalGet('node/add/'. $entry_type);
    $this->assertFieldByName("taxonomy[$pos_vid]");

    // set the language and pos, then refresh the fields
    $edit = $this->getEntryEdit(array(
        'headword' => 'czerwony',
        'language' => 'pl',
        'pos' => 'Adjective',
    ));
    $this->drupalPost(NULL, $edit, 'Refresh');
    // check that the fields have appeared
    $this->assertFieldByName('field_fields[1][name]', '*stem');
    $this->assertFieldByName('field_fields[1][type]', 'form');
    $this->assertFieldByName('field_fields[1][automatic]', TRUE);
    $this->assertFieldByName('field_fields[1][value]');

    // set the stem
    $edit['field_fields[1][value]'] = 'czerwonXYZ';
    $edit['field_fields[1][automatic]'] = FALSE;
    $this->drupalPost(NULL, $edit, 'Save');
    $this->assertText(t('@type czerwony has been created.', array('@type' => $entry_type)));
    // check for the field!!!
    $this->assertText("*stem: \n czerwonXYZ");
    // taxonomy related bug!
    $this->assertNoText('Illegal offset');

    // go to the edit page again
    $nid = lingwo_dictionary_find_entry('czerwony', 'pl', 'adjective');
    $this->drupalGet("node/$nid/edit");
    // taxonomy field should be there
    $this->assertFieldByName("taxonomy[$pos_vid]");
    // taxonomy related bug!
    $this->assertNoText('Illegal offset');
  }

  public function testCreateEmpty() {
    $entry_type = lingwo_dictionary_entry_content_type();
    $pos_vid = lingwo_dictionary_pos_vocabulary();

    // get that the create page is all good
    $this->drupalGet('node/add/'. $entry_type);

    // create an Entry
    $entry = array(
      'headword' => 'test',
      'language' => 'zzz',
      'pos' => 'Adjective',
    );
    $this->createEntry($entry);
    $this->assertText(t('@type test has been created.', array('@type' => $entry_type)));
    // CCK empty-ness bug
    $this->assertNoRaw('Column &amp;#039;field_fields_type&amp;#039; cannot be null');
  }

  // This is basically the same test from lingwo_dictionary.test again, but there are problems
  // with it when lingwo_fields is enabled.
  // TODO: We have to call the AHAH submit handler to get this problem to happen.
  /*
  public function testValidationConflict() {
    $entry_type = lingwo_dictionary_entry_content_type();

    $entry = array(
      'headword' => 'czerwony',
      'language' => 'pl',
      'pos' => 'Adjective',
    );

    // Create the first time
    $this->createEntry($entry);
    $this->assertText(t('@type czerwony has been created.', array('@type' => $entry_type)));

    // Try to create a second time (and get a duplicate!)
    $this->createEntry($entry);
    $this->assertText(t('Entry with this language, part of speech and headword combination already exists: @name', array('@name' => $entry['name'])));

    // Modifying the part of speech should be enough to allow it to be created
    $entry['pos'] = 'Noun';
    $this->createEntry($entry);
    $this->assertText(t('@type czerwony has been created.', array('@type' => $entry_type)));
  }
  */
}

