<?php
// $Id$

/**
 * @file
 * Extends Lingwo Dictionary for annotating texts
 */

/**
 * Implementation of hook_menu().
 */
function lingwo_korpus_menu() {
  $items = array();
  $items['admin/settings/lingwo_dictionary/korpus'] = array(
    'title' => 'Korpus',
    'description' => 'Settings for Lingwo Korpus module.',
    'access arguments' => array('administer site configuration'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('lingwo_korpus_admin_settings'),
    'file' => 'lingwo_korpus.admin.inc',
    'type' => MENU_LOCAL_TASK,
  );
  $items['lingwo_korpus/lookup_entry'] = array(
    'title' => 'Lookup Entry',
    'page arguments' => array(2),
    'page callback' => 'lingwo_korpus_lookup_entry',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/*
 * Our entry lookup AJAX callback.
 */
function lingwo_korpus_lookup_entry() {
  global $user;

  // get the "Lingwo ID" out of the 'url' GET argument
  $url = urldecode($_GET['url']);
  $url = preg_replace(':^'.base_path().':', '', $url);
  $url = preg_replace(':^'.lingwo_dictionary_settings('lookup_path').'/:', '', $url);

  // load the node with this ID
  $node = node_load(lingwo_dictionary_entry_from_id($url));

  if (module_exists('rules')) {
    rules_invoke_event('lingwo_korpus_lookup', $user, $node);
  }

  // return the HTML to the Ajax caller
  drupal_json(array(
    'content' => node_view($node, TRUE)
  ));
}

/*
 * Implementation of hook_theme().
 */
function lingwo_korpus_theme() {
  return array(
    'lingwo_korpus_annotation_reader_block' => array(
      'arguments' => array(
        'footer_id' => NULL,
        'footer_margin' => NULL,
      )
    )
  );
}

/*
 * Implementation of hook_rules_event_info().
 */
function lingwo_korpus_rules_event_info() {
  return array(
    'lingwo_korpus_lookup' => array(
      'label' => t('User looks up an entry using the annotation reader.'),
      'module' => 'Lingwo Korpus',
      'arguments' => array(
        'user' => array('type' => 'user', 'label' => t('User which looks up the entry.')),
        'node' => array('type' => 'node', 'label' => t('The node looked up.'))
      ),
    )
  );
}

/*
 * Implementation of hook_flush_caches().
 */
function lingwo_korpus_flush_caches() {
  return array('cache_lingwo_korpus');
}

/*
 * Implementation of hook_nodeapi().
 */
function lingwo_korpus_nodeapi(&$node, $op, $a3=NULL, $a4=NULL) {
  global $user;

  if ($node->type != lingwo_korpus_text_content_type())
    return;

  if ($op == 'update' || $op == 'delete') {
    // clear all cached texts for this node
    cache_clear_all($node->nid, 'cache_lingwo_korpus', TRUE);

    // clear the entries used in this corpus text
    db_query('DELETE FROM {lingwo_korpus_entry} WHERE nid = %d', $node->nid);
  }

  if ($op == 'create' || $op == 'update') {
    // record all the entries used in this corpus text
    foreach (lingwo_korpus_text_entry_list($node->body, $node->language) as $entry) {
      $entry->nid = $node->nid;
      drupal_write_record('lingwo_korpus_entry', $entry);
    }
  }

  if ($op == 'view') {
    // display the text with the reader
    if ($a4) {
      $node_language = $node->language ? $node->language : language_default();
      if ($node_language == $user->language) {
        drupal_set_message(t('You are reading a text written in the same language as your language!  Please set "My Language" to your correct native language or find a different text.'), 'error');
        return;
      }

      $lang_pair =  $node_language .'-'. $user->language;
      $cid = $node->nid .'-'. $lang_pair;

      // get from the cache or process the data
      $data = cache_get($cid, 'cache_lingwo_korpus');
      if ($data) {
        $data = $data->data;
      }
      else {
        $data = lingwo_korpus_filter_text($node->content['body']['#value'], $lang_pair);
        cache_set($cid, $data, 'cache_lingwo_korpus');
      }
      $node->content['body']['#value'] = $data;

      drupal_add_js(drupal_get_path('module', 'lingwo_dictionary') .'/lingwo_korpus/annotation-reader.js');
      drupal_add_css(drupal_get_path('module', 'lingwo_dictionary') .'/lingwo_dictionary.css');
      drupal_add_css(drupal_get_path('module', 'lingwo_dictionary') .'/lingwo_korpus/annotation-reader.css');
    }
  }
}

function lingwo_korpus_filter_text($text, $lang_pair) {
  require_once(drupal_get_path('module', 'lingwo_dictionary') .'/includes/3rdparty/simplehtmldom/simple_html_dom.php');

  $html = str_get_html($text); 
  foreach($html->find('word') as $el) {
    // get all the attributes and clear them
    $attrs = $el->attr;
    $el->attr = array();

    // get the headword
    $headword = isset($attrs['headword']) ? $attrs['headword'] : $el->plaintext;

    // TODO: nested <a> tags is no good, so we need some solution here.
    // convert to a link
    $el->tag = 'a';
    $el->class = 'anno';
    $el->href = url(lingwo_dictionary_settings('lookup_path').'/'.$lang_pair.'/'.$headword.'('.$attrs['pos'].')');
    $el->setAttribute('data-form', $attrs['form']);
    $el->setAttribute('data-sense', $attrs['sense']);
  }

  return $html->outertext;
}

function lingwo_korpus_text_entry_list($text, $lang) {
  require_once(drupal_get_path('module', 'lingwo_dictionary') .'/includes/3rdparty/simplehtmldom/simple_html_dom.php');

  $entries = array();
  $found = array();

  $html = str_get_html($text); 
  foreach($html->find('word') as $el) {
    // get all the attributes and clear them
    $attrs = $el->attr;
    $el->attr = array();

    // get the headword
    $entry = (object)array(
      'headword' => isset($attrs['headword']) ? $attrs['headword'] : $el->plaintext,
      'pos' => $attrs['pos'],
      'language' => $lang,
      'sense' => $attrs['sense'],
    );

    $key = $entry->language.':'.$entry->pos.':'.$entry->headword;
    if (!isset($found[$key])) {
      $found[$key] = TRUE;
      $entries[] = $entry;
    }
  }

  return $entries;
}

/**
 * Implementation of hook_form_alter().
 */
function lingwo_korpus_form_alter(&$form, $form_state, $form_id) {
  if ($form_id == (lingwo_korpus_text_content_type() .'_node_form')) {
    // remove language neutral and set language as required (for asthetic purposes)
    unset($form['language']['#options']['']);
    $form['language']['#required'] = TRUE;
  }
}


/*
 * Implementation of hook_block().
 */
function lingwo_korpus_block($op = 'list', $delta = 0, $edit = array()) {
  switch ($op) {
    case 'list':
      $blocks[0] = array(
        'info' => t('Lingwo Korpus: Annotation Reader block'),
      );
      return $blocks;
    case 'configure':
      if ($delta == 0) {
        $form['footer_id'] = array(
          '#type' => 'textfield',
          '#title' => t('Footer ID'),
          '#default_value' => variable_get('lingwo_korpus_annotation_reader_block_footer_id', 'footer')
        );
        $form['footer_margin'] = array(
          '#type' => 'textfield',
          '#title' => t('Footer Margin'),
          '#default_value' => variable_get('lingwo_korpus_annotation_reader_block_footer_margin', '0')
        );
        return $form;
      }
    case 'save':
      if ($delta == 0) {
        variable_set('lingwo_korpus_annotation_reader_block_footer_id', $edit['footer_id']);
        variable_set('lingwo_korpus_annotation_reader_block_footer_margin', $edit['footer_margin']);
      }
    case 'view':
      $footer_id = variable_get('lingwo_korpus_annotation_reader_block_footer_id', 'footer');
      $footer_margin = variable_get('lingwo_korpus_annotation_reader_block_footer_margin', '0');

      $block['content'] = theme('lingwo_korpus_annotation_reader_block', $footer_id, $footer_margin);
      return $block;
  }
}

function theme_lingwo_korpus_annotation_reader_block($footer_id, $footer_margin) {
  return '<div id="lingwo-korpus-dock" data-footer-id="'.$footer_id.'" data-footer-margin="'.$footer_margin.'"></div>';
}

/*
 * Settings
 */
function lingwo_korpus_text_content_type($value=NULL) {
  if (is_null($value)) {
    return variable_get('lingwo_korpus_text_content_type', '');
  }

  variable_set('lingwo_korpus_text_content_type', $value);
}

