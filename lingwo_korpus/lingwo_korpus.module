<?php
// $Id$

/**
 * @file
 * Extends Lingwo Dictionary for annotating texts
 */

/**
 * Implementation of hook_perm().
 */
function lingwo_korpus_perm() {
  return array('annotate lingwo_korpus texts');
}

/**
 * Implementation of hook_menu().
 */
function lingwo_korpus_menu() {
  $items = array();
  $items['admin/settings/lingwo_dictionary/korpus'] = array(
    'title' => 'Korpus',
    'description' => 'Settings for Lingwo Korpus module.',
    'access arguments' => array('administer site configuration'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('lingwo_korpus_admin_settings'),
    'file' => 'lingwo_korpus.admin.inc',
    'type' => MENU_LOCAL_TASK,
  );

  # Add the annotation tab to korpus nodes
  $items['node/%node/annotate'] = array(
    'title' => 'Annotate',
    'page arguments' => array('lingwo_korpus_annotator_form', 1),
    'page callback' => 'drupal_get_form',
    'access callback' => 'lingwo_korpus_annotator_access',
    'access arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
  );

  # AJAX callbacks for the text Reader and the annotator
  $items['lingwo_korpus/lookup_entry'] = array(
    'title' => 'Lookup Entry',
    'page arguments' => array(2),
    'page callback' => 'lingwo_korpus_lookup_entry',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  $items['lingwo_korpus/lookup_senses'] = array(
    'title' => 'Lookup Senses',
    'page callback' => 'lingwo_korpus_lookup_senses',
    'access arguments' => array('annotate lingwo_korpus texts'),
    'type' => MENU_CALLBACK,
  );
  $items['lingwo_korpus/pos_list'] = array(
    'title' => 'Part of Speech list',
    'page callback' => 'lingwo_korpus_pos_list',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/*
 * Our entry lookup AJAX callback.
 */
function lingwo_korpus_lookup_entry() {
  global $user, $language;

  if ($_GET['hash']) {
    // by passing TRUE, we return the source if the translation can't be found
    $entry = LingwoEntry::fromHash(urldecode($_GET['hash']), $language->language, TRUE);
  }

  if ($entry) {
    if (module_exists('rules')) {
      rules_invoke_event('lingwo_korpus_lookup', $user, $entry->getNode());
    }
    $content = node_view($entry->getNode(), TRUE);
  }
  else {
    // TODO: This should be slicker!  Probably themed, provide a link for creating the entry.
    $content = t('Entry not found.');
  }

  // return the HTML to the Ajax caller
  drupal_json(array('content' => $content));
}

/*
 * Our senses lookup AJAX callback.
 */
function lingwo_korpus_lookup_senses() {
  $language = urldecode($_GET['language']);
  $pos = urldecode($_GET['pos']);
  $headword = urldecode($_GET['headword']);

  $nid = LingwoEntry::key2nid($language, $pos, $headword);
  if (!empty($nid)) {
    $node = node_load($nid);
    $senses = array();
    foreach ($node->lingwo_senses as $sense) {
      $senses[$sense['id']] = array(
        'example'    => $sense['data']['example'],
        'difference' => $sense['data']['difference'],
      );
    }
  }

  drupal_json(array('senses' => $senses));
}

/*
 * Returns a list of the POS
 */
function lingwo_korpus_pos_list() {
  // Because JSON can't hold the order in an Object we need to return an Array
  $map = LingwoEntry::getPosOptions(TRUE);
  $list = array();
  foreach ($map as $value => $label) {
    $list[] = array('label' => $label, 'value' => $value);
  }
  drupal_json(array(
    'pos_map' => $map,
    'pos_list' => $list
  ));
}

/* 
 * Check if the user can annotate texts.
 */
function lingwo_korpus_annotator_access($node) {
  return user_access('access content') &&
         user_access('annotate lingwo_korpus texts') &&
         lingwo_korpus_text_content_type() == $node->type;
}

/*
 * Show the annotator.
 */
function lingwo_korpus_annotator_form(&$form_state, $node) {
  $text = $node->body;

  $form['#node'] = $node;

  $form['lingwo-annotator-toolbar'] = array(
    '#value' => '<div id="lingwo-korpus-annotator-toolbar" class="clear-block"></div>',
  );

  $form['korpus-text'] = array(
    '#value' => '<div id="edit-korpus-text">'. $text .'</div>',
  );
  $form['korpus-text-value'] = array(
    '#type' => 'hidden',
  );

  $form['save'] = array(
    '#type'  => 'submit',
    '#value' => t('Save'),
  );
  $form['auto'] = array(
    '#type'  => 'submit',
    '#value' => t('Auto Annotate'),
  );

  drupal_add_js(array(
    'lingwo_korpus' => array(
      'text' => array(
        'nid'      => $node->nid,
        'language' => $node->language,
      ),
    ),
  ), 'setting');

  _ld_add_require_js(array('text'));
  drupal_add_js(drupal_get_path('module', 'lingwo_korpus') .'/annotator.js');
  drupal_add_css(drupal_get_path('module', 'lingwo_korpus') .'/annotation-reader.less');
  drupal_add_css(drupal_get_path('module', 'lingwo_korpus') .'/annotator.less');

  return $form;
}


function lingwo_korpus_annotator_form_submit($form, &$form_state) {
  require_once(_ld_project_path() .'/includes/3rdparty/simplehtmldom/simple_html_dom.php');

  $node = $form['#node'];
  $node_body = $node->body;
  $node_body = preg_replace('/\r/', '', $node_body);

  $text = $form_state['values']['korpus-text-value'];
  $text = preg_replace('/\r/', '', $text);

  // There is weird tendency for self-closed <embed> and <param> tags to come back
  // without the self-closing slash, which breaks simplehtmldom -- and makes for 
  // invalid XHTML!
  $text = preg_replace('/<embed ([^>]*)(?<!\/)>/i','<embed \1 />', $text);
  $text = preg_replace('/<param ([^>]*)(?<!\/)>/i','<param \1 />', $text);

  if (str_get_html($text)->plaintext != str_get_html($node_body)->plaintext) {
    drupal_set_message(t('Annotator modified the content of the text'), 'error');
    // For debugging this situation!
    // TODO: When we have normal users using the annotator, we should log this somewhere
    // we can get to it later to diagnose problems...
    /*
    file_put_contents('ttt-node.txt', str_get_html($node_body)->plaintext);
    file_put_contents('ttt-anno.txt', str_get_html($text)->plaintext);
    file_put_contents('ttt-node.html', $node_body);
    file_put_contents('ttt-anno.html', $text);
    */
    return;
  }

  $node->body = $text;
  if ($form_state['clicked_button']['#value'] == t('Auto Annotate')) {
    drupal_set_message(t('Automatic annotator complete.'));
    $node->lingwo_korpus_auto_annotate = array('segment','lookup');
    _lingwo_korpus_auto_annotate_node($node);
  }

  $node->teaser = node_teaser($node->body, $node->format);
  node_save($node);

  drupal_set_message(t('Annotation saved.'));
}

/**
 * Implementation of hook_views_api().
 */
function lingwo_korpus_views_api() {
  return array(
    'api'  => 2,
    'path' => drupal_get_path('module', 'lingwo_korpus'),
  );
}

/*
 * Implementation of hook_theme().
 */
function lingwo_korpus_theme() {
  return array(
    'lingwo_korpus_annotation_reader_block' => array(
      'arguments' => array(
        'footer_id' => NULL,
        'footer_margin' => NULL,
      )
    ),
  );
}

/*
 * Implementation of hook_rules_event_info().
 */
function lingwo_korpus_rules_event_info() {
  return array(
    'lingwo_korpus_lookup' => array(
      'label' => t('User looks up an entry using the annotation reader.'),
      'module' => 'Lingwo Korpus',
      'arguments' => array(
        'user' => array('type' => 'user', 'label' => t('User which looks up the entry.')),
        'node' => array('type' => 'node', 'label' => t('The node looked up.'))
      ),
    )
  );
}

/*
 * Implementation of hook_flush_caches().
 */
function lingwo_korpus_flush_caches() {
  return array('cache_lingwo_korpus');
}

function lingwo_korpus_generate_hash(&$item) {
  $item->row_hash =
    sha1(join(':', array($item->nid, $item->language, $item->pos, $item->headword, $item->sense)));
  $item->entry_hash =
    sha1(join(':', array($item->language, $item->pos, $item->headword)));
}

/*
 * Implementation of hook_nodeapi().
 */
function lingwo_korpus_nodeapi(&$node, $op, $a3=NULL, $a4=NULL) {
  global $user, $language;

  if ($node->type != lingwo_korpus_text_content_type())
    return;

  $auto_annotate = isset($node->lingwo_korpus_auto_annotate) ? array_filter(array_values($node->lingwo_korpus_auto_annotate)) : NULL;
  $auto_annotate = !empty($auto_annotate);

  if ($op == 'presave' && $auto_annotate) {
    $orig_body = $node->body;
    if (!_lingwo_korpus_auto_annotate_node($node, 'body')) {
      // if there are any errors, we don't need to continue
      return;
    }

    if ($node->teaser_include && $node->teaser == substr($orig_body, 0, strlen($node->teaser))) {
      // The teaser is just a section of the body, they are a connected whole.
      // So, we need to regenerate the teaser bit since we've altered the body
      // (lifted from node/node.module's node_submit() function)
      $node->teaser = node_teaser($node->body, isset($node->format) ? $node->format : NULL);
    }
    else {
      // The teaser and body are two distinct parts, the teaser isn't shown when
      // on the node display page (atleast I think this is what teaser_include is about)
      // I know that we don't show the annotation reader for just the teaser, but 
      // I think segmenting the teaser is the right thing to do...  If one day we want
      // to have the annotation reader in the text browser, it will help.
      _lingwo_korpus_auto_annotate_node($node, 'teaser');
    }
  }

  if ($op == 'update' || $op == 'delete') {
    // clear all cached texts for this node
    cache_clear_all($node->nid, 'cache_lingwo_korpus', TRUE);

    // clear the entries used in this corpus text
    db_query('DELETE FROM {lingwo_korpus_entry} WHERE nid = %d', $node->nid);
  }

  if ($op == 'insert' || $op == 'update') {
    // record all the entries used in this corpus text
    foreach (lingwo_korpus_text_entry_list($node->body, $node->language) as $entry) {
      if (!empty($entry->pos)) {
        $entry->nid = $node->nid;
        lingwo_korpus_generate_hash($entry);
        drupal_write_record('lingwo_korpus_entry', $entry);
      }
    }

  }

  if ($op == 'view') {
    static $warned = FALSE;
    static $messaged = FALSE;

    // display the text with the reader
    if ($a4 || ($a3 && variable_get('lingwo_korpus_reader_on_teaser', 0) && $node->build_mode != NODE_BUILD_RSS)) {
      $node_language = $node->language ? $node->language : language_default();
      if ($node_language == $language->language) {
        // Only show this message on a page
        if ($a4) {
          drupal_set_message(t('You are reading a text written in the same language as your language!  Please set "My Language" to your correct native language or find a different text.'), 'error');
        }
        elseif (!$warned) {
          drupal_set_message(t('Some texts on this page are written in the same language as your language!  You will not be able to get translations for these texts.  Please check that "My Language" is correct.'), 'warning');
          $warned = TRUE;
        }
        // But skip filtering the text always
        return;
      }

      if (!$messaged) {
        drupal_set_message(t('Click on a word to receive a translation in your native language.'));
        $messaged = TRUE;
      }

      // TODO: we should probably do this filtering always, because we don't want to expose the underlying 
      // korpus format to outside users (since it isn't valid HTML).  For now, we don't because we use this
      // to control whether the node can be read or not.
      $cid = $node->nid . ($a3 ? ':teaser' : '');
      $node->content['body']['#value'] = lingwo_korpus_filter_text($node->content['body']['#value'], $node_language, $cid);

      _lingwo_korpus_add_reader_js();
    }
  }
}

function _lingwo_korpus_add_reader_js() {
  static $added = FALSE;

  if (!$added) {
    _ld_add_require_js();
    drupal_add_js(array(
      'language' => $language->language,
      'baseUrl' => url('', array('absolute' => TRUE))
    ), 'setting');
    drupal_add_js(drupal_get_path('module', 'lingwo_korpus') .'/annotation-reader.js');
    drupal_add_css(drupal_get_path('module', 'lingwo_dictionary') .'/lingwo_dictionary.css');
    drupal_add_css(drupal_get_path('module', 'lingwo_korpus') .'/annotation-reader.less');

    $added = TRUE;
  }
}

/**
 * Implementation of hook_content_extra_fields().
 */
function lingwo_korpus_content_extra_fields($type_name) {
  $extra = array();

  if (lingwo_korpus_text_content_type() == $type_name) {
    $extra['lingwo_korpus_settings'] = array(
      'label' => t('Auto Annotate'),
      'description' => t('Lingwo Korpus "Auto Annotate" field.'),
      'weight' => 0,
    );
  }

  return $extra;
}

function lingwo_korpus_filter_text($text, $language, $cid=NULL) {
  if (!is_null($cid)) {
    $data = cache_get($cid, 'cache_lingwo_korpus');
    if ($data) {
      return $data->data;
    }
  }

  if ($filtered = _lingwo_korpus_exec_korpus2html_py("-l $language -", $text)) {
    if (!is_null($cid)) {
      cache_set($cid, $filtered, 'cache_lingwo_korpus');
    }

    return $filtered;
  }
  
  return $text;
}

function lingwo_korpus_text_entry_list($text, $lang) {
  require_once(_ld_project_path() .'/includes/3rdparty/simplehtmldom/simple_html_dom.php');

  $entries = array();
  $found = array();

  $html = str_get_html($text); 
  foreach($html->find('word') as $el) {
    if ($el->attr['hidden'] == 'true') {
      continue;
    }
    // get all the attributes and clear them
    $attrs = $el->attr;
    $el->attr = array();

    // get the headword
    $entry = (object)array(
      'headword' => isset($attrs['headword']) ? $attrs['headword'] : $el->plaintext,
      'pos' => $attrs['pos'],
      'language' => $lang,
      'sense' => $attrs['sense'],
    );

    $key = $entry->language.':'.$entry->pos.':'.$entry->headword;
    if (!isset($found[$key])) {
      $found[$key] = TRUE;
      $entries[] = $entry;
    }
  }

  return $entries;
}

/**
 * Implementation of hook_form_alter().
 */
function lingwo_korpus_form_alter(&$form, $form_state, $form_id) {
  if ($form_id == (lingwo_korpus_text_content_type() .'_node_form')) {
    // remove language neutral and set language as required (for asthetic purposes)
    unset($form['language']['#options']['']);
    $form['language']['#required'] = TRUE;

    // add the automatic annotation stuff
    $form['lingwo_korpus_settings'] = array(
      '#type' => 'fieldset',
      // TODO: this will take more thought.  If the item isn't there, then we'll have to
      // copy the defaults in at some point.
      //'#access' => user_access('administer lingwo_korpus'),
      '#title' => t('Auto annotate'),
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
      '#tree' => FALSE,
    );
    $form['lingwo_korpus_settings']['lingwo_korpus_auto_annotate'] = array(
      '#type'  => 'checkboxes',
      //'#title' => t('Auto annotate'),
      '#options' => array(
        'segment' => t("Segment text into sentences and words"),
        'lookup'  => t("Try to lookup words in the dictionary"),
      ),
      // TODO: the default value should be configurable on the admin page
      '#default_value' => empty($form['#node']->nid) ? array('segment') : array(),
    );
  }
}

/*
 * Implementation of hook_block().
 */
function lingwo_korpus_block($op = 'list', $delta = 0, $edit = array()) {
  switch ($op) {
    case 'list':
      $blocks[0] = array(
        'info' => t('Lingwo Korpus: Annotation Reader block'),
      );
      return $blocks;
    case 'configure':
      if ($delta == 0) {
        $form['footer_id'] = array(
          '#type' => 'textfield',
          '#title' => t('Footer ID'),
          '#default_value' => variable_get('lingwo_korpus_annotation_reader_block_footer_id', 'footer')
        );
        $form['footer_margin'] = array(
          '#type' => 'textfield',
          '#title' => t('Footer Margin'),
          '#default_value' => variable_get('lingwo_korpus_annotation_reader_block_footer_margin', '0')
        );
        return $form;
      }
    case 'save':
      if ($delta == 0) {
        variable_set('lingwo_korpus_annotation_reader_block_footer_id', $edit['footer_id']);
        variable_set('lingwo_korpus_annotation_reader_block_footer_margin', $edit['footer_margin']);
      }
    case 'view':
      $footer_id = variable_get('lingwo_korpus_annotation_reader_block_footer_id', 'footer');
      $footer_margin = variable_get('lingwo_korpus_annotation_reader_block_footer_margin', '0');

      $block['content'] = theme('lingwo_korpus_annotation_reader_block', $footer_id, $footer_margin);
      return $block;
  }
}

function theme_lingwo_korpus_annotation_reader_block($footer_id, $footer_margin) {
  return '<div id="lingwo-korpus-dock" data-footer-id="'.$footer_id.'" data-footer-margin="'.$footer_margin.'"></div>';
}

/*
 * Dealing with the automatic annotator.
 */

function _lingwo_korpus_auto_annotate_node(&$node, $which='body') {
  $cmd  = "-l ". $node->language ." ";
  $cmd .= "-m ". implode(",", array_filter(array_values($node->lingwo_korpus_auto_annotate)));
  $cmd .= " -";
  if ($result = _lingwo_korpus_exec_annotate_py($cmd, $node->$which)) {
    $node->$which = rtrim($result);
    return TRUE;
  }
  return FALSE;
}

function _lingwo_korpus_exec_python($script, $args, $data) {
  $cmd = implode(' ', array(
    lingwo_korpus_python_exec(),
    _ld_project_path() .'/'. $script,
    $args,
  ));

  $descspec = array(
    0 => array('pipe', 'r'),
    1 => array('pipe', 'w'),
    2 => array('pipe', 'w'),
  );

  $ret = array();

  $process = proc_open($cmd, $descspec, $pipes, NULL, NULL);
  if (is_resource($process)) {
    // write the node body to the child's stdin
    fwrite($pipes[0], $data);
    fclose($pipes[0]);

    // read the result from the child's stdout
    $ret['result'] = stream_get_contents($pipes[1]);
    fclose($pipes[1]);

    // read the error stream
    $ret['error'] = stream_get_contents($pipes[2]);
    fclose($pipes[2]);

    // if the program was successful, update the node
    $ret['return_value'] = proc_close($process);
  }

  return $ret;
}

function _lingwo_korpus_exec_annotate_py($cmd, $data) {
  $ret = _lingwo_korpus_exec_python('nlp/annotate.py', $cmd, $data);

  if (!empty($ret['error'])) {
    if ($ret['return_value'] == 0) {
      drupal_set_message(t('Got warnings when running the automatic annotator.'), 'warning');
      watchdog('lingwo_korpus', 'Warnings from annotate.py: '. $ret['error'], NULL, WATCHDOG_WARNING);
    }
    else {
      drupal_set_message(t('Error running automatic annotator.'), 'error');
      watchdog('lingwo_korpus', "Error running annotate.py: ". $ret['error'], NULL, WATCHDOG_ERROR);
    }
  }

  // if the program was successful, update return the result
  if ($ret['return_value'] == 0) {
    return $ret['result'];
  }
}

function _lingwo_korpus_exec_korpus2html_py($cmd, $data) {
  $ret = _lingwo_korpus_exec_python('nlp/korpus2html.py', $cmd, $data);

  // if the program was successful, update return the result
  if ($ret['return_value'] == 0) {
    return $ret['result'];
  }
  else {
    drupal_set_message(t('Error converting content item to HTML.'), 'error');
    watchdog('lingwo_korpus', "Error running korpus2html.py: ". $ret['error'], NULL, WATCHDOG_ERROR);
  }
}

/*
 * Settings
 */

function lingwo_korpus_text_content_type($value=NULL) {
  if (is_null($value)) {
    return variable_get('lingwo_korpus_text_content_type', '');
  }

  variable_set('lingwo_korpus_text_content_type', $value);
}

function lingwo_korpus_python_exec($value=NULL) {
  if (is_null($value)) {
    return variable_get('lingwo_korpus_python_exec', '/usr/bin/python');
  }

  variable_set('lingwo_korpus_python_exec', $value);
}

