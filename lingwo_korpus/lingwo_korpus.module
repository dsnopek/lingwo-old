<?php
// $Id$

/**
 * @file
 * Extends Lingwo Dictionary for annotating texts
 */

/**
 * Implementation of hook_perm().
 */
function lingwo_korpus_perm() {
  return array('annotate lingwo_korpus texts');
}

/**
 * Implementation of hook_menu().
 */
function lingwo_korpus_menu() {
  $items = array();
  $items['admin/settings/lingwo_dictionary/korpus'] = array(
    'title' => 'Korpus',
    'description' => 'Settings for Lingwo Korpus module.',
    'access arguments' => array('administer site configuration'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('lingwo_korpus_admin_settings'),
    'file' => 'lingwo_korpus.admin.inc',
    'type' => MENU_LOCAL_TASK,
  );
  $items['lingwo_korpus/lookup_entry'] = array(
    'title' => 'Lookup Entry',
    'page arguments' => array(2),
    'page callback' => 'lingwo_korpus_lookup_entry',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  $items['lingwo_korpus/lookup_content'] = array(
    'title' => 'Lookup Content',
    'page arguments' => array(2),
    'page callback' => 'lingwo_korpus_lookup_content',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  $items['lingwo_korpus/lookup_senses'] = array(
    'title' => 'Lookup Senses',
    'page callback' => 'lingwo_korpus_lookup_senses',
    'access arguments' => array('annotate lingwo_korpus texts'),
    'type' => MENU_CALLBACK,
  );
  $items['lingwo_korpus/admin/list_entries'] = array(
    'title' => 'List Entries',
    'page arguments' => array('lingwo_korpus_admin_list_entries'),
    'page callback' => 'drupal_get_form',
    'access arguments' => array('access administration pages'),
    'type' => MENU_CALLBACK,
  );
  $items['node/%node/annotate'] = array(
    'title' => 'Annotate',
    'page arguments' => array('lingwo_korpus_annotator_form', 1),
    'page callback' => 'drupal_get_form',
    'access callback' => 'lingwo_korpus_annotator_access',
    'access arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
  );

  return $items;
}

// Copied and modified version of drupal_json()
function drupal_jsonp($var = NULL) {
  // We are returning JavaScript, so tell the browser.
  drupal_set_header('Content-Type: text/javascript; charset=utf-8');

  $callback = urldecode($_GET['callback']);
  if (isset($var)) {
    if (!empty($callback)) {
      echo $callback .'('. drupal_to_js($var) .')';
    }
    else {
      echo drupal_to_js($var);
    }
  }
}


/*
 * Our entry lookup AJAX callback.
 */
function lingwo_korpus_lookup_entry() {
  global $user, $language;

  // get the "Lingwo ID" out of the 'url' GET argument
  $url = urldecode($_GET['url']);
  $url = preg_replace(':.*?'.lingwo_dictionary_settings('lookup_path').'/(.*):', '$1', $url);
  
  if ($entry = LingwoEntry::fromLingwoId($url)) {
    if (module_exists('rules')) {
      rules_invoke_event('lingwo_korpus_lookup', $user, $entry->getNode());
    }

    // HACK: force the language to be set to whatever the $node->language is!  This is 
    // necessary for when we are using embed.js and always load from http://www.bibliobird.com
    $languages = language_list();
    $language = $languages[$entry->getNode()->language];

    $content = node_view($entry->getNode(), TRUE);
  }
  else {
    // This should be slicker!  Probably themed, provide a link for creating the entry.
    $content = t('Entry not found.');
  }

  // return the HTML to the Ajax caller
  drupal_jsonp(array('content' => $content));
}

/*
 * Our content lookup AJAX callback.
 */
function lingwo_korpus_lookup_content() {
  $url = urldecode($_GET['url']);
  $to_lang = urldecode($_GET['to_lang']);

  // TODO: we shouldn't hard-code the 'field_remote_url' field
  $field = content_fields('field_remote_url', 'content');
  $db_info = content_database_info($field);
  $res = db_query("SELECT nid FROM ".$db_info['table']." WHERE ".$db_info['columns']['value']['column']." = '%s' LIMIT 1", $url);

  if ($obj = db_fetch_object($res)) {
    $node = node_load($obj->nid);

    // TODO: merge this code with the same code in hook_nodeapi() below, we 
    // copy-pasted this from there.
    $lang_pair = $node->language .'-'. $to_lang;
    $cid = $node->nid .'-'. $lang_pair;
    $data = cache_get($cid, 'cache_lingwo_korpus');
    if ($data) {
      $data = $data->data;
    }
    else {
      $data = lingwo_korpus_filter_text($node->body, $lang_pair);
      cache_set($cid, $data, 'cache_lingwo_korpus');
    }

    // return the HTML to the Ajax caller
    drupal_jsonp(array('content' => $data, 'nid' => $node->nid));
  }
  else {
    drupal_not_found();
  }
}

/*
 * Our senses lookup AJAX callback.
 */
function lingwo_korpus_lookup_senses() {
  $language = urldecode($_GET['language']);
  $pos = urldecode($_GET['pos']);
  $headword = urldecode($_GET['headword']);

  $nid = lingwo_dictionary_entry_lookup($language, $pos, $headword);
  if (!empty($nid)) {
    $node = node_load($nid);
    $senses = array();
    foreach ($node->lingwo_senses as $sense) {
      $senses[$sense['id']] = array(
        'example'    => $sense['data']['example'],
        'difference' => $sense['data']['difference'],
      );
    }
  }

  drupal_json(array('senses' => $senses));
}

/* 
 * Check if the user can annotate texts.
 */
function lingwo_korpus_annotator_access($node) {
  return user_access('access content') &&
         user_access('annotate lingwo_korpus texts') &&
         lingwo_korpus_text_content_type() == $node->type;
}

/*
 * Show the annotator.
 */
function lingwo_korpus_annotator_form(&$form_state, $node) {
  $text = $node->body;

  $form['#node'] = $node;
  $form['edit-mode'] = array(
    '#type' => 'radios',
    '#title' => t('Edit Mode'),
    '#default_value' => 'edit',
    '#options' => array(
        'edit' => t('Edit existing'),
        'add'  => t('Add new')
    ),
  );
  $form['korpus-text'] = array(
    '#value' => '<div id="edit-korpus-text">'. $text .'</div>',
  );
  $form['korpus-text-value'] = array(
    '#type' => 'hidden',
  );

  // the annotation form that pops up
  $form['anno-form'] = array(
    '#prefix' => '<div id="edit-anno-form" style="display: none;">',
    '#suffix' => '</div>',
    '#tree' => TRUE,
  );
  $form['anno-form']['headword'] = array(
    '#type' => 'textfield',
    '#title' => t('Headword'),
  );
  $form['anno-form']['pos'] = array(
    '#type' => 'select',
    '#title' => t('Part of Speech'),
    '#options' => lingwo_dictionary_pos_options(TRUE),
  );
  $form['anno-form']['attributive'] = array(
    '#type' => 'checkbox',
    '#title' => t('Attributive'),
  );

  $form['anno-form']['save'] = array(
    '#value' => '<a href="#" class="anno-form-button" id="edit-anno-form-save">'. t('Save') .'</a>',
  );
  $form['anno-form']['delete'] = array(
    '#value' => '<a href="#" class="anno-form-button" id="edit-anno-form-delete">'. t('Delete') .'</a>',
  );
  $form['anno-form']['cancel'] = array(
    '#value' => '<a href="#" class="anno-form-button" id="edit-anno-form-cancel">'. t('Cancel') .'</a>',
  );

  $form['anno-form']['select-senses'] = array(
    '#value' => '<a href="#" class="anno-form-button" id="edit-anno-form-select-senses">'.
      t('Select Senses...') .'</a>',
  );

  $form['save'] = array(
    '#type'  => 'submit',
    '#value' => t('Save'),
  );
  $form['auto'] = array(
    '#type'  => 'submit',
    '#value' => t('Auto Annotate'),
  );

  drupal_add_js(array(
    'lingwo_korpus' => array(
      'text' => array(
        'nid'      => $node->nid,
        'language' => $node->language,
      ),
    ),
  ), 'setting');

  lingwo_dictionary_add_require_js();
  drupal_add_js(drupal_get_path('module', 'lingwo_dictionary') .'/lingwo_korpus/annotator.js');
  drupal_add_css(drupal_get_path('module', 'lingwo_dictionary') .'/lingwo_korpus/annotation-reader.css');
  drupal_add_css(drupal_get_path('module', 'lingwo_dictionary') .'/lingwo_korpus/annotator.css');

  return $form;
}

function lingwo_korpus_annotator_form_submit($form, &$form_state) {
  require_once(drupal_get_path('module', 'lingwo_dictionary') .'/includes/3rdparty/simplehtmldom/simple_html_dom.php');

  $node = $form['#node'];
  $node_body = $node->body;
  $node_body = preg_replace('/\r/', '', $node_body);

  $text = $form_state['values']['korpus-text-value'];
  $text = preg_replace('/\r/', '', $text);

  if (str_get_html($text)->plaintext != str_get_html($node_body)->plaintext) {
    drupal_set_message(t('Annotator modified the content of the text'), 'error');
    return;
  }

  $node->body = $text;
  if ($form_state['clicked_button']['#value'] == t('Auto Annotate')) {
    drupal_set_message(t('Automatic annotator complete.'));
    _lingwo_korpus_autolookup_node($node);
  }

  $node->teaser = node_teaser($node->body, $node->format);
  $node->_lingwo_korpus_no_segment = TRUE;
  node_save($node);

  drupal_set_message(t('Annotation saved.'));
}

/**
 * Implementation of hook_views_api().
 */
function lingwo_korpus_views_api() {
  return array(
    'api'  => 2,
    'path' => drupal_get_path('module', 'lingwo_korpus'),
  );
}

/*
 * Implementation of hook_theme().
 */
function lingwo_korpus_theme() {
  return array(
    'lingwo_korpus_annotation_reader_block' => array(
      'arguments' => array(
        'footer_id' => NULL,
        'footer_margin' => NULL,
      )
    )
  );
}

/*
 * Implementation of hook_rules_event_info().
 */
function lingwo_korpus_rules_event_info() {
  return array(
    'lingwo_korpus_lookup' => array(
      'label' => t('User looks up an entry using the annotation reader.'),
      'module' => 'Lingwo Korpus',
      'arguments' => array(
        'user' => array('type' => 'user', 'label' => t('User which looks up the entry.')),
        'node' => array('type' => 'node', 'label' => t('The node looked up.'))
      ),
    )
  );
}

/*
 * Implementation of hook_flush_caches().
 */
function lingwo_korpus_flush_caches() {
  return array('cache_lingwo_korpus');
}

function lingwo_korpus_generate_hash(&$item) {
  $item->row_hash =
    sha1(join(':', array($item->nid, $item->language, $item->pos, $item->headword, $item->sense)));
  $item->entry_hash =
    sha1(join(':', array($item->language, $item->pos, $item->headword)));
}

/*
 * Implementation of hook_nodeapi().
 */
function lingwo_korpus_nodeapi(&$node, $op, $a3=NULL, $a4=NULL) {
  global $user, $language;

  if ($node->type != lingwo_korpus_text_content_type())
    return;

  if ($op == 'presave' && !$node->_lingwo_korpus_no_segment) {
    $orig_body = $node->body;
    if (!_lingwo_korpus_autolookup_node($node, 'body', FALSE)) {
      // if there are any errors, we don't need to continue
      return;
    }

    if ($node->teaser_include && $node->teaser == substr($orig_body, 0, strlen($node->teaser))) {
      // The teaser is just a section of the body, they are a connected whole.
      // So, we need to regenerate the teaser bit since we've altered the body
      // (lifted from node/node.module's node_submit() function)
      $node->teaser = node_teaser($node->body, isset($node->format) ? $node->format : NULL);
    }
    else {
      // The teaser and body are two distinct parts, the teaser isn't shown when
      // on the node display page (atleast I think this is what teaser_include is about)
      // I know that we don't show the annotation reader for just the teaser, but 
      // I think segmenting the teaser is the right thing to do...  If one day we want
      // to have the annotation reader in the text browser, it will help.
      _lingwo_korpus_autolookup_node($node, 'teaser', FALSE);
    }
  }

  if ($op == 'update' || $op == 'delete') {
    // clear all cached texts for this node
    cache_clear_all($node->nid, 'cache_lingwo_korpus', TRUE);

    // clear the entries used in this corpus text
    db_query('DELETE FROM {lingwo_korpus_entry} WHERE nid = %d', $node->nid);
  }

  if ($op == 'insert' || $op == 'update') {
    // record all the entries used in this corpus text
    foreach (lingwo_korpus_text_entry_list($node->body, $node->language) as $entry) {
      if (!empty($entry->pos)) {
        $entry->nid = $node->nid;
        lingwo_korpus_generate_hash($entry);
        drupal_write_record('lingwo_korpus_entry', $entry);
      }
    }

  }

  if ($op == 'view') {
    // display the text with the reader
    if ($a4) {
      $node_language = $node->language ? $node->language : language_default();
      if ($node_language == $language->language) {
        drupal_set_message(t('You are reading a text written in the same language as your language!  Please set "My Language" to your correct native language or find a different text.'), 'error');
        return;
      }

      $lang_pair =  $node_language .'-'. $language->language;
      $cid = $node->nid .'-'. $lang_pair;

      // get from the cache or process the data
      $data = cache_get($cid, 'cache_lingwo_korpus');
      if ($data) {
        $data = $data->data;
      }
      else {
        $data = lingwo_korpus_filter_text($node->content['body']['#value'], $lang_pair);
        cache_set($cid, $data, 'cache_lingwo_korpus');
      }
      $node->content['body']['#value'] = $data;

      lingwo_dictionary_add_require_js();
      drupal_add_js(drupal_get_path('module', 'lingwo_dictionary') .'/lingwo_korpus/annotation-reader.js');
      drupal_add_css(drupal_get_path('module', 'lingwo_dictionary') .'/lingwo_dictionary.css');
      drupal_add_css(drupal_get_path('module', 'lingwo_dictionary') .'/lingwo_korpus/annotation-reader.css');
    }
  }
}

function lingwo_korpus_filter_text($text, $lang_pair) {
  require_once(drupal_get_path('module', 'lingwo_dictionary') .'/includes/3rdparty/simplehtmldom/simple_html_dom.php');

  $html = str_get_html($text); 
  foreach($html->find('word') as $el) {
    // get all the attributes and clear them
    $attrs = $el->attr;
    $el->attr = array();

    // get the headword
    $headword = isset($attrs['headword']) ? $attrs['headword'] : $el->plaintext;

    // TODO: nested <a> tags is no good, so we need some solution here.
    // convert to a link
    $el->tag = 'a';
    $el->class = 'anno';
    # TODO: this should be a library function somewhere
    $el->href = url(lingwo_dictionary_settings('lookup_path').'/'.$lang_pair.'/'.$headword.'('.$attrs['pos'].')', array('absolute' => TRUE));
    $el->setAttribute('data-form', $attrs['form']);
    $el->setAttribute('data-sense', $attrs['sense']);
  }

  return $html->outertext;
}

function lingwo_korpus_text_entry_list($text, $lang) {
  require_once(drupal_get_path('module', 'lingwo_dictionary') .'/includes/3rdparty/simplehtmldom/simple_html_dom.php');

  $entries = array();
  $found = array();

  $html = str_get_html($text); 
  foreach($html->find('word') as $el) {
    // get all the attributes and clear them
    $attrs = $el->attr;
    $el->attr = array();

    // get the headword
    $entry = (object)array(
      'headword' => isset($attrs['headword']) ? $attrs['headword'] : $el->plaintext,
      'pos' => $attrs['pos'],
      'language' => $lang,
      'sense' => $attrs['sense'],
    );

    $key = $entry->language.':'.$entry->pos.':'.$entry->headword;
    if (!isset($found[$key])) {
      $found[$key] = TRUE;
      $entries[] = $entry;
    }
  }

  return $entries;
}

function lingwo_korpus_admin_list_entries(&$form_state) {
  $form['input'] = array(
    '#type' => 'textarea',
    '#title' => t('Korpus Text'),
    '#default_value' => $form_state['values']['input'],
  );

  # TODO: this should be a library function, probably.
  $language_list = language_list('enabled');
  foreach ($language_list[1] as $lang_name => $lang) {
    $language_options[$lang_name] = $lang->name;
  }
  $form['from_lang'] = array(
    '#type' => 'select',
    '#title' => t('From Language'),
    '#options' => $language_options,
    '#default_value' => $form_state['values']['from_lang'],
  );
  $form['to_lang'] = array(
    '#type' => 'select',
    '#title' => t('To Language'),
    '#options' => array('' => '-') + $language_options,
    '#default_value' => $form_state['values']['to_lang'],
  );
  $form['as_nid'] = array(
    '#type' => 'checkbox',
    '#title' => t('As Nid'),
    '#default_value' => $form_state['values']['as_nid']
  );

  if ($form_state['values']['input']) {
    $links = array();
    foreach (lingwo_korpus_text_entry_list($form_state['values']['input'], $form_state['values']['from_lang']) as $entry) {
      $nid = lingwo_dictionary_entry_lookup($entry->language, $entry->pos, $entry->headword);

      if (!empty($form_state['values']['to_lang'])) {
        $trans = translation_node_get_translations($nid);
        if ($trans[$form_state['values']['to_lang']]) {
          $nid = $trans[$form_state['values']['to_lang']]->nid;
        }
      }

      if ($form_state['values']['as_nid']) {
        $links[] = $nid;
      }
      else {
        $links[] = url('node/'. $nid, array('absolute' => TRUE));
      }
    }

    $form['output'] = array(
      '#type' => 'textarea',
      '#value' => implode("\n", $links)
    );
  }
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Submit'),
  );
  return $form;
}

function lingwo_korpus_admin_list_entries_submit($form, &$form_state) {
  $form_state['rebuild'] = TRUE;
}

/**
 * Implementation of hook_form_alter().
 */
function lingwo_korpus_form_alter(&$form, $form_state, $form_id) {
  if ($form_id == (lingwo_korpus_text_content_type() .'_node_form')) {
    // remove language neutral and set language as required (for asthetic purposes)
    unset($form['language']['#options']['']);
    $form['language']['#required'] = TRUE;
  }
}

/*
 * Implementation of hook_block().
 */
function lingwo_korpus_block($op = 'list', $delta = 0, $edit = array()) {
  switch ($op) {
    case 'list':
      $blocks[0] = array(
        'info' => t('Lingwo Korpus: Annotation Reader block'),
      );
      return $blocks;
    case 'configure':
      if ($delta == 0) {
        $form['footer_id'] = array(
          '#type' => 'textfield',
          '#title' => t('Footer ID'),
          '#default_value' => variable_get('lingwo_korpus_annotation_reader_block_footer_id', 'footer')
        );
        $form['footer_margin'] = array(
          '#type' => 'textfield',
          '#title' => t('Footer Margin'),
          '#default_value' => variable_get('lingwo_korpus_annotation_reader_block_footer_margin', '0')
        );
        return $form;
      }
    case 'save':
      if ($delta == 0) {
        variable_set('lingwo_korpus_annotation_reader_block_footer_id', $edit['footer_id']);
        variable_set('lingwo_korpus_annotation_reader_block_footer_margin', $edit['footer_margin']);
      }
    case 'view':
      $footer_id = variable_get('lingwo_korpus_annotation_reader_block_footer_id', 'footer');
      $footer_margin = variable_get('lingwo_korpus_annotation_reader_block_footer_margin', '0');

      $block['content'] = theme('lingwo_korpus_annotation_reader_block', $footer_id, $footer_margin);
      return $block;
  }
}

function theme_lingwo_korpus_annotation_reader_block($footer_id, $footer_margin) {
  return '<div id="lingwo-korpus-dock" data-footer-id="'.$footer_id.'" data-footer-margin="'.$footer_margin.'"></div>';
}

/*
 * Dealing with the automatic annotator.
 */

function _lingwo_korpus_autolookup_node(&$node, $which='body', $full_lookup=TRUE) {
  $cmd = $full_lookup ? '-' : '-s -';
  if ($result = _lingwo_korpus_exec_autolookup_py($cmd, $node->$which)) {
    $node->$which = rtrim($result);
    return TRUE;
  }
  return FALSE;
}

function _lingwo_korpus_exec_autolookup_py($cmd, $data) {
  $cmd = implode(' ', array(
    lingwo_korpus_python_exec(),
    drupal_get_path('module', 'lingwo_dictionary') .'/nlp/autolookup.py',
    $cmd,
  ));

  $descspec = array(
    0 => array('pipe', 'r'),
    1 => array('pipe', 'w'),
    2 => array('pipe', 'w'),
  );

  $process = proc_open($cmd, $descspec, $pipes, NULL, NULL);
  if (is_resource($process)) {
    // write the node body to the child's stdin
    fwrite($pipes[0], $data);
    fclose($pipes[0]);

    // read the result from the child's stdout
    $result = stream_get_contents($pipes[1]);
    fclose($pipes[1]);

    // read the error stream
    $error = stream_get_contents($pipes[2]);
    fclose($pipes[2]);

    // if the program was successful, update the node
    $return_value = proc_close($process);
    if ($return_value == 0) {
      return $result;
    }
    else {
      drupal_set_message(t('Error running automatic annotator.'), 'error');
      watchdog('lingwo_korpus', "Error running autolookup.py: ". $error, NULL, WATCHDOG_ERROR);
    }
  }
}

/*
 * Settings
 */

function lingwo_korpus_text_content_type($value=NULL) {
  if (is_null($value)) {
    return variable_get('lingwo_korpus_text_content_type', '');
  }

  variable_set('lingwo_korpus_text_content_type', $value);
}

function lingwo_korpus_python_exec($value=NULL) {
  if (is_null($value)) {
    return variable_get('lingwo_korpus_python_exec', '/usr/bin/python');
  }

  variable_set('lingwo_korpus_python_exec', $value);
}

