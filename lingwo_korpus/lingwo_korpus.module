<?php
// $Id$

/**
 * @file
 * Extends Lingwo Dictionary for annotating texts
 */

require_once DRUPAL_ROOT . '/' . dirname(__FILE__) . '/../includes/internal.inc';

/**
 * Implements hook_permission().
 */
function lingwo_korpus_permission() {
  return array(
    'annotate lingwo_korpus texts' => array(
      'title' => t('annotate lingwo_korpus texts'),
      'description' => t('TODO Add a description for \'annotate lingwo_korpus texts\''),
    ),
    'annotate own lingwo_korpus texts' => array(
      'title' => t('annotate own lingwo_korpus texts'),
      'description' => t('TODO Add a description for \'annotate own lingwo_korpus texts\''),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function lingwo_korpus_menu() {
  $items = array();
  $items['admin/config/lingwo/korpus'] = array(
    'title' => 'Korpus',
    'description' => 'Settings for Lingwo Korpus module.',
    'access arguments' => array('administer site configuration'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('lingwo_korpus_admin_settings'),
    'file' => 'lingwo_korpus.admin.inc',
    'type' => MENU_LOCAL_TASK,
  );

  # Add the annotation tab to korpus nodes
  $items['node/%node/annotate'] = array(
    'title' => 'Annotate',
    'page arguments' => array('lingwo_korpus_annotator_form', 1),
    'page callback' => 'drupal_get_form',
    'access callback' => 'lingwo_korpus_annotator_access',
    'access arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
  );

  # AJAX callbacks for the text Reader and the annotator
  $items['lingwo_korpus/lookup_entry'] = array(
    'title' => 'Lookup Entry',
    'page arguments' => array(2),
    'page callback' => 'lingwo_korpus_lookup_entry',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  $items['lingwo_korpus/lookup_senses'] = array(
    'title' => 'Lookup Senses',
    'page callback' => 'lingwo_korpus_lookup_senses',
    'access callback' => 'lingwo_korpus_annotator_ajax_access',
    'type' => MENU_CALLBACK,
  );
  $items['lingwo_korpus/pos_list'] = array(
    'title' => 'Part of Speech list',
    'page callback' => 'lingwo_korpus_pos_list',
    'access callback' => 'lingwo_korpus_annotator_ajax_access',
    'type' => MENU_CALLBACK,
  );
  $items['lingwo_korpus/%node/check_html'] = array(
    'title' => 'Check HTML from annotator',
    'page callback' => 'lingwo_korpus_check_html',
    'page arguments' => array(1),
    'access callback' => 'lingwo_korpus_annotator_ajax_access',
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/*
 * Our entry lookup AJAX callback.
 */
/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function lingwo_korpus_lookup_entry() {
  global $user, $language;

  if ($_GET['hash']) {
    // by passing TRUE, we return the source if the translation can't be found
    $entry = LingwoEntry::fromHash(urldecode($_GET['hash']), $language->language, TRUE);
  }

  if ($entry) {
    module_invoke_all('lingwo_korpus_lookup', $user, $entry);
    $content = node_view($entry->getNode(), TRUE);
  }
  else {
    // TODO: This should be slicker!  Probably themed, provide a link for creating the entry.
    $content = t('Entry not found.');
  }

  // return the HTML to the Ajax caller
  drupal_json_output(array('content' => $content));
}

/*
 * Our senses lookup AJAX callback.
 */
/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function lingwo_korpus_lookup_senses() {
  $language = urldecode($_GET['language']);
  $pos = urldecode($_GET['pos']);
  $headword = urldecode($_GET['headword']);

  $result = array();
  foreach (LingwoEntry::searchHeadword($headword, array('language' => $language)) as $obj) {
    $result[$obj->pos] = array();

    $entry = LingwoEntry::fromNid($obj->nid);
    foreach ($entry->senses as $sense) {
      $result[$obj->pos][] = array(
        'nid' => $obj->nid,
        'id' => $sense->id,
        'example' => $sense->example,
        'difference' => $sense->difference,
      );
    }
  }

  drupal_json_output(array('senses' => $result));
}

/*
 * Returns a list of the POS
 */
/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function lingwo_korpus_pos_list() {
  // Because JSON can't hold the order in an Object we need to return an Array
  $map = LingwoEntry::getPosOptions($_GET['language'], TRUE);
  $list = array();
  foreach ($map as $value => $label) {
    $list[] = array(
      'label' => $label,
      'value' => $value,
    );
  }
  drupal_json_output(array(
    'pos_map' => $map,
    'pos_list' => $list,
  ));
}

/**
 * Does a sanity check on the HTML passed back from the annotator.
 */
function lingwo_korpus_check_html($node) {
  $text = _lingwo_korpus_annotator_fix_html($_POST['html']);

  drupal_json_output(array(
    'ok' => (bool) _lingwo_korpus_annotator_check_html($node->body, $text),
  ));
}

/*
 * Check if the user can annotate texts.
 */
/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function lingwo_korpus_annotator_access($node, $account = NULL) {
  global $user;

  if (is_null($account)) {
    $account = $user;
  }

  return user_access('access content') &&
         lingwo_korpus_text_content_type() == $node->type &&
         (user_access('annotate lingwo_korpus texts') ||
         (user_access('annotate own lingwo_korpus texts') && $node->uid == $account->uid));
}

/**
 * Check if the user has permission to call the annotator AJAX callbacks.
 */
function lingwo_korpus_annotator_ajax_access() {
  return user_access('annotate lingwo_korpus texts') || user_access('annotate own lingwo_korpus texts');
}

/**
 * Escape certain text that isn't safe in the annotator.
 */
function _lingwo_korpus_annotator_escape($text) {
  // iframes with a 'src' attr that points to another domain will lose their 'src' attr when
  // coming back out of the annotator (because of browser security features). Since we can't really
  // annotate an iframe anyway, we simply escape it in an HTML comment.
  $text = preg_replace(',(<iframe.*?</iframe>),s', '<!--ESCAPE:$1:ESCAPE-->', $text);
  return $text;
}

/**
 * Unescape text that was escaped by the previous function.
 */
function _lingwo_korpus_annotator_unescape($text) {
  $text = preg_replace(',<!--ESCAPE:(.*?):ESCAPE-->,s', '$1', $text);
  return $text;
}

/*
 * Show the annotator.
 */
/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function lingwo_korpus_annotator_form($form, &$form_state, $node) {
  $text = _lingwo_korpus_annotator_escape($node->body);

  if (module_exists('automodal')) {
    automodal_add('.automodal');
  }

  $form['#node'] = $node;

  $form['changed'] = array(
    '#type' => 'hidden',
    '#default_value' => $node->changed,
  );

  $form['lingwo-annotator-toolbar'] = array(
    '#value' => '<div id="lingwo-korpus-annotator-toolbar" class="clear-block"></div>',
  );

  $form['korpus-text'] = array(
    '#value' => '<div id="edit-korpus-text">' . t('Loading annotator...') . '</div>',
  );
  $form['korpus-text-value'] = array(
    '#type' => 'hidden',
    '#default_value' => $text,
  );

  $form['save'] = array(
    '#type' => 'submit',
    '#value' => t('Save'),
  );
  /*
   $form['auto'] = array(
   '#type'  => 'submit',
   '#value' => t('Auto Annotate'),
   );
   */
  // TODO: This shouldn't be added here, but in a hook_form_alter() from a bbcom_* module
  /*
   if (!$node->status) {
   $form['publish'] = array(
   '#type'  => 'submit',
   '#value' => t('Publish'),
   );
   }
   */

  drupal_add_js(array(
    'lingwo_korpus' => array(
      'text' => array(
        'nid' => $node->nid,
        'language' => $node->language,
      ),
      'entry_type' => LingwoEntry::$settings->content_type,
    ),
  ), array('type' => 'setting', 'scope' => JS_DEFAULT));

  _lingwo_old_add_require_js(array('text'));
  drupal_add_js(drupal_get_path('module', 'lingwo_korpus') . '/annotator.js');
  drupal_add_css(drupal_get_path('module', 'lingwo_korpus') . '/annotation-reader.css');
  drupal_add_css(drupal_get_path('module', 'lingwo_korpus') . '/annotator.css');

  return $form;
}

// Fix the HTML back from the annotator
function _lingwo_korpus_annotator_fix_html($text) {
  $text = preg_replace('/\r/', '', $text);

  // There is weird tendency for self-closed <embed> and <param> tags to come back
  // without the self-closing slash, which breaks simplehtmldom -- and makes for
  // invalid XHTML!
  $text = preg_replace('/<embed ([^>]*)(?<!\/)>/i', '<embed \1 />', $text);
  $text = preg_replace('/<param ([^>]*)(?<!\/)>/i', '<param \1 />', $text);

  // ultimately do our unescape
  $text = _lingwo_korpus_annotator_unescape($text);

  return $text;
}

// Compare original node body against the text back from the annotator to see if it's good
function _lingwo_korpus_annotator_check_html($node_body, $text) {
  require_once DRUPAL_ROOT . '/' . _lingwo_old_project_path() . '/includes/3rdparty/simplehtmldom/simple_html_dom.php';

  $node_body = preg_replace('/\r/', '', $node_body);

  if (str_get_html($text)->plaintext != str_get_html($node_body)->plaintext) {
    // For debugging this situation!
    // TODO: When we have normal users using the annotator, we should log this somewhere
    // we can get to it later to diagnose problems...
    file_put_contents('/tmp/ttt-node.txt', str_get_html($node_body)->plaintext);
    file_put_contents('/tmp/ttt-anno.txt', str_get_html($text)->plaintext);
    file_put_contents('/tmp/ttt-node.html', $node_body);
    file_put_contents('/tmp/ttt-anno.html', $text);

    return FALSE;
  }

  return TRUE;
}

/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function lingwo_korpus_annotator_form_validate($form, &$form_state) {
  $node = $form['#node'];
  $text = _lingwo_korpus_annotator_fix_html($form_state['values']['korpus-text-value']);

  if (node_last_changed($node->nid) > $form_state['values']['changed']) {
    form_set_error('save', t('This content has been modified by another user, changes cannot be saved.'));
    return;
  }

  if (!_lingwo_korpus_annotator_check_html($node->body, $text)) {
    form_set_error('save', t('Annotator modified the content in an unsafe way, changes cannot be saved.'));
    return;
  }
}

/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function lingwo_korpus_annotator_form_submit($form, &$form_state) {
  $node = $form['#node'];
  $text = _lingwo_korpus_annotator_fix_html($form_state['values']['korpus-text-value']);

  _lingwo_korpus_update_body($node, $text);
  if ($form_state['clicked_button']['#value'] == t('Auto Annotate')) {
    drupal_set_message(t('Automatic annotator complete.'));
    _lingwo_korpus_auto_annotate_node($node);
  }
  /*
   elseif ($form_state['clicked_button']['#value'] == t('Publish')) {
   $node->status = 1;
   $form_state['redirect'] = 'node/' . $node->nid;
   }
   */

  // set the revision flag if this node type has it set as the default
  $node_options = variable_get('node_options_' . $node->type, array('status', 'promote'));
  if (in_array('revision', $node_options)) {
    $node->revision = TRUE;
    $node->log = '';
  }

  node_save($node);

  drupal_set_message(t('Annotation saved.'));
}

/**
 * Implements hook_views_api().
 */
function lingwo_korpus_views_api() {
  return array(
    'api' => 2,
    'path' => drupal_get_path('module', 'lingwo_korpus'),
  );
}

/*
 * Implementation of hook_theme().
 */
/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function lingwo_korpus_theme() {
  return array(
    'lingwo_korpus_annotation_reader_block' => array(
      'variables' => array(
        'footer_id' => NULL,
        'footer_margin' => NULL,
      ),
    ),
  );
}

/*
 * Implementation of hook_rules_event_info().
 */
/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function lingwo_korpus_rules_event_info() {
  return array(
    'lingwo_korpus_lookup' => array(
      'label' => t('User looks up an entry using the annotation reader.'),
      'module' => 'Lingwo Korpus',
      'arguments' => array(
        'user' => array(
          'type' => 'user',
          'label' => t('User which looks up the entry.'),
        ),
        'node' => array(
          'type' => 'node',
          'label' => t('The node looked up.'),
        ),
      ),
    ),
  );
}

// Rules integration
/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function lingwo_korpus_lingwo_korpus_lookup($user, $entry) {
  if (module_exists('rules')) {
    rules_invoke_event('lingwo_korpus_lookup', $user, $entry->getNode());
  }
}

/*
 * Implementation of hook_flush_caches().
 */
/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function lingwo_korpus_flush_caches() {
  return array('cache_lingwo_korpus');
}

/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function lingwo_korpus_generate_hash(&$item) {
  $item->row_hash =
    sha1(join(':', array($item->nid, $item->language, $item->pos, $item->headword, $item->sense)));
  $item->entry_hash =
    sha1(join(':', array($item->language, $item->pos, $item->headword)));
}

function _lingwo_korpus_update_body(&$node, $body) {
  $orig_body = $node->body;
  $node->body = $body;

  if ($node->teaser == substr($orig_body, 0, strlen($node->teaser))) {
    // The teaser is just a section of the body, they are a connected whole.
    // So, we need to regenerate the teaser bit since we've altered the body
    // (lifted from node/node.module's node_submit() function)
    $node->teaser = node_teaser($node->body, isset($node->format) ? $node->format : NULL);

    // Return TRUE so that the caller knows that the teaser has been handled
    return TRUE;
  }

  // The teaser and body are two distinct parts, the teaser isn't shown when
  // on the node display page (atleast I think this is what teaser_include is about)
  // Return FALSE so that the caller knows it needs to handle teaser seperately
  return FALSE;
}

/*
 * Implementation of hook_nodeapi().
 */
/**
 * Implements hook_node_presave().
 */
function lingwo_korpus_node_presave($node) {
  if ($node->type == LingwoEntry::$settings->content_type && TRUE && module_exists('lingwo_senses')) {
    $search = array();
    $replace = array();
    foreach ($node->lingwo_senses as $sense) {
      if ($sense['remove'] && !empty($sense['replace_with'])) {
        $search[] = $sense['id'];
        $replace[] = $sense['replace_with'];
      }
    }
    if (!empty($search) && !empty($replace)) {
      _lingwo_korpus_replace_content($search, $replace);
    }
    return;
  }
}

/**
 * Implements hook_node_update().
 */
function lingwo_korpus_node_update($node) {
  if (TRUE || TRUE) {
    // clear all cached texts for this node
    cache_clear_all($node->nid, 'cache_lingwo_korpus', TRUE);

    // clear the entries used in this corpus text
    // TODO Please review the conversion of this statement to the D7 database API syntax.
    /* db_query('DELETE FROM {lingwo_korpus_entry} WHERE nid = %d', $node->nid) */
    db_delete('lingwo_korpus_entry')
  ->condition('nid', $node->nid)
  ->execute();
  }
}

/**
 * Implements hook_node_delete().
 */
function lingwo_korpus_node_delete($node) {
  if (TRUE || TRUE) {
    // clear all cached texts for this node
    cache_clear_all($node->nid, 'cache_lingwo_korpus', TRUE);

    // clear the entries used in this corpus text
    // TODO Please review the conversion of this statement to the D7 database API syntax.
    /* db_query('DELETE FROM {lingwo_korpus_entry} WHERE nid = %d', $node->nid) */
    db_delete('lingwo_korpus_entry')
  ->condition('nid', $node->nid)
  ->execute();
  }
}

/**
 * Implements hook_node_insert().
 */
function lingwo_korpus_node_insert($node) {
  if (TRUE || TRUE) {
    // record all the entries used in this corpus text
    foreach (lingwo_korpus_text_entry_list($node->body, $node->language) as $entry) {
      if (!empty($entry->pos)) {
        $entry->nid = $node->nid;
        lingwo_korpus_generate_hash($entry);
        drupal_write_record('lingwo_korpus_entry', $entry);
      }
    }

    $auto_annotate = isset($node->lingwo_korpus_auto_annotate) ? array_filter(array_values($node->lingwo_korpus_auto_annotate)) : NULL;
    if (!empty($auto_annotate)) {
      _lingwo_korpus_batch_auto_annotate_node($node);
    }

    // if the user has permission to annotate the text, send them to the annotate page
    // NOTE: we only want this to fire when coming off the node edit form (hence the
    // $node->form_id check).
    // TODO: should be configurable on the admin page (ex: always, only on new, never)
    if (isset($node->form_id) && lingwo_korpus_annotator_access($node)) {
      $_GET['destination'] = 'node/' . $node->nid . '/annotate';
    }
  }
}

/**
 * Implements hook_node_update().
 */
function lingwo_korpus_node_update($node) {
  if (TRUE || TRUE) {
    // record all the entries used in this corpus text
    foreach (lingwo_korpus_text_entry_list($node->body, $node->language) as $entry) {
      if (!empty($entry->pos)) {
        $entry->nid = $node->nid;
        lingwo_korpus_generate_hash($entry);
        drupal_write_record('lingwo_korpus_entry', $entry);
      }
    }

    $auto_annotate = isset($node->lingwo_korpus_auto_annotate) ? array_filter(array_values($node->lingwo_korpus_auto_annotate)) : NULL;
    if (!empty($auto_annotate)) {
      _lingwo_korpus_batch_auto_annotate_node($node);
    }

    // if the user has permission to annotate the text, send them to the annotate page
    // NOTE: we only want this to fire when coming off the node edit form (hence the
    // $node->form_id check).
    // TODO: should be configurable on the admin page (ex: always, only on new, never)
    if (isset($node->form_id) && lingwo_korpus_annotator_access($node)) {
      $_GET['destination'] = 'node/' . $node->nid . '/annotate';
    }
  }
}

/**
 * Implements hook_node_view().
 */
function lingwo_korpus_node_view($node, $view_mode = 'full') {
  if (TRUE) {
    static $warned = FALSE;
    static $messaged = FALSE;

    // display the text with the reader
    if ($a4 || ($a3 && variable_get('lingwo_korpus_reader_on_teaser', 0) && $node->build_mode != NODE_BUILD_RSS)) {
      $node_language = $node->language ? $node->language : language_default();
      if ($node_language == $language->language) {
        // Only show this message on a page
        if ($a4) {
          drupal_set_message(t('You are reading a text written in the same language as your language!  Please set "My Language" to your correct native language or find a different text.'), 'error');
        }
        elseif (!$warned) {
          drupal_set_message(t('Some texts on this page are written in the same language as your language!  You will not be able to get translations for these texts.  Please check that "My Language" is correct.'), 'warning');
          $warned = TRUE;
        }

        // Filter out our data
        $node->content['body']['#value'] = _lingwo_korpus_remove_annotations($node->content['body']['#value']);
        return;
      }

      if (!$messaged) {
        drupal_set_message(t('Click on a word to receive a translation in your native language.'));
        $messaged = TRUE;
      }

      // TODO: we should probably do this filtering always, because we don't want to expose the underlying
      // korpus format to outside users (since it isn't valid HTML).  For now, we don't because we use this
      // to control whether the node can be read or not.
      $cid = $node->nid . ($a3 ? ':teaser' : '');
      $node->content['body']['#value'] = lingwo_korpus_filter_text($node->content['body']['#value'], $node_language, $cid);

      _lingwo_korpus_add_reader_js();
    }
    else {
      // Filter out our data
      $node->content['body']['#value'] = _lingwo_korpus_remove_annotations($node->content['body']['#value']);
    }
  }
}

/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function lingwo_korpus_nodeapi_OLD(&$node, $op, $a3 = NULL, $a4 = NULL) {
  // TODO Remaining code in this function needs to be moved to the appropriate new hook function.
  global $user, $language;
  if ($node->type != lingwo_korpus_text_content_type()) {
    return;
  }
}

/**
 * Removes annotation information from HTML.
 */
function _lingwo_korpus_remove_annotations($text) {
  return preg_replace(',</?(word|sent)[^>]*>,s', '', $text);
}

function _lingwo_korpus_add_reader_js() {
  static $added = FALSE;

  if (!$added) {
    _lingwo_old_add_require_js();
    drupal_add_js(array(
      'language' => $language->language,
      'baseUrl' => url('', array('absolute' => TRUE)),
    ), array('type' => 'setting', 'scope' => JS_DEFAULT));
    drupal_add_js(drupal_get_path('module', 'lingwo_korpus') . '/annotation-reader.js');
    drupal_add_css(drupal_get_path('module', 'lingwo_senses') . '/lingwo_senses.css');
    drupal_add_css(drupal_get_path('module', 'lingwo_korpus') . '/annotation-reader.css');

    // hack for lingwo_pron's audio player
    // TODO: remove this once we go to the iframe based reader!
    if (module_exists('lingwo_pron')) {
      drupal_add_js(drupal_get_path('module', 'lingwo_pron') . '/lingwo_pron.player.js');
    }

    $added = TRUE;
  }
}

/**
 * Implements hook_content_extra_fields().
 */
function lingwo_korpus_content_extra_fields($type_name) {
  $extra = array();

  if (lingwo_korpus_text_content_type() == $type_name) {
    $extra['lingwo_korpus_settings'] = array(
      'label' => t('Auto Annotate'),
      'description' => t('Lingwo Korpus "Auto Annotate" field.'),
      'weight' => 0,
    );
  }

  return $extra;
}

/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function lingwo_korpus_filter_text($text, $language, $cid = NULL) {
  if (!is_null($cid)) {
    $data = cache_get($cid, 'cache_lingwo_korpus');
    if ($data) {
      return $data->data;
    }
  }

  if ($filtered = _lingwo_korpus_exec_korpus2html_py("-l $language -", $text)) {
    if (!is_null($cid)) {
      cache_set($cid, $filtered, 'cache_lingwo_korpus');
    }

    return $filtered;
  }

  return $text;
}

/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function lingwo_korpus_text_entry_list($text, $lang) {
  require_once DRUPAL_ROOT . '/' . _lingwo_old_project_path() . '/includes/3rdparty/simplehtmldom/simple_html_dom.php';

  $entries = array();
  $found = array();

  $html = str_get_html($text);
  foreach ($html->find('word') as $el) {
    if ($el->attr['data-hidden'] == 'true') {
      continue;
    }
    // get all the attributes and clear them
    $attrs = $el->attr;
    $el->attr = array();

    // get the headword
    $entry = (object) array(
      'headword' => html_entity_decode(isset($attrs['headword']) ? $attrs['headword'] : $el->plaintext),
      'pos' => $attrs['pos'],
      'language' => $lang,
      'sense' => $attrs['sense'],
    );

    $key = $entry->language . ':' . $entry->pos . ':' . $entry->headword;
    if (!isset($found[$key])) {
      $found[$key] = TRUE;
      $entries[] = $entry;
    }
  }

  return $entries;
}

/**
 * Implements hook_form_alter().
 */
function lingwo_korpus_form_alter(&$form, $form_state, $form_id) {
  if ($form_id == (lingwo_korpus_text_content_type() . '_node_form')) {
    // remove language neutral and set language as required (for asthetic purposes)
    unset($form['language']['#options']['']);
    $form['language']['#required'] = TRUE;

    // add the automatic annotation stuff
    $form['lingwo_korpus_settings'] = array(
      '#type' => 'fieldset',
      '#access' => user_access('administer lingwo_korpus'),
      '#title' => t('Auto annotate'),
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
      '#tree' => FALSE,
    );
    $form['lingwo_korpus_settings']['lingwo_korpus_auto_annotate'] = array(
      '#type' => 'checkboxes',
      //'#title' => t('Auto annotate'),
      '#options' => array(
        'segment' => t("Segment text into sentences and words"),
        'lookup' => t("Try to lookup words in the dictionary"),
      ),
      // TODO: the default value should be configurable on the admin page
      '#default_value' => empty($form['#node']->nid) ? array('segment', 'lookup') : array(),
    );

    // TODO: This shouldn't be added here, but in a hook_form_alter() from a bbcom_* module
    /*
     if ($form['#node']->nid == 0) {
     $form['options']['status']['#default_value'] = 0;
     }
     */
  }
  else if ($form_id == (LingwoEntry::$settings->content_type . '_node_form')) {
    drupal_add_js(drupal_get_path('module', 'lingwo_korpus') . '/lingwo_korpus.entry.js');

    // we modify the senses form for source entries
    if (module_exists('lingwo_senses') && !_lingwo_is_translation($form['#node'])) {
      // make a list of options
      $options = array();
      foreach (element_children($form['lingwo_senses']['wrapper']['senses']) as $key) {
        $row = &$form['lingwo_senses']['wrapper']['senses'][$key];
        $options[$row['id']['#value']] = t('Sense #@sense_num', array('@sense_num' => $key + 1));
      }

      // we add a 'Replace with' select for all old senses
      $index = 0;
      foreach (element_children($form['lingwo_senses']['wrapper']['senses']) as $key) {
        $row = &$form['lingwo_senses']['wrapper']['senses'][$key];

        if (isset($row['operations']) && !$row['new']['#value']) {
          $row['operations']['replace_with'] = array(
            '#type' => 'select',
            '#title' => t('Replace with'),
            '#options' => array('' => t('Nothing')) + $options,
            '#attributes' => array('class' => 'lingwo-korpus-replace-with'),
            '#default_value' => $form_state['values']['lingwo_senses'][$key]['replace_with'],
          );
          // remove self from the list of options to replace with
          unset($row['operations']['replace_with']['#options'][$row['id']['#value']]);
        }

        $index++;
      }
    }
  }
}

function _lingwo_korpus_batch_auto_annotate_node($node) {
  $batch = array(
    'operations' => array(),
    'title' => t('Automatically annotating text'),
  );
  foreach ($node->lingwo_korpus_auto_annotate as $type => $enabled) {
    if ($enabled) {
      $batch['operations'][] = array('_lingwo_korpus_operation_auto_annotate_node', array($node->nid, $type));
    }
  }
  batch_set($batch);
}

function _lingwo_korpus_operation_auto_annotate_node($nid, $type, &$context) {
  $node = node_load($nid);
  _lingwo_korpus_auto_annotate_node($node, 'body', array($type));
  node_save($node);

  $context['sandbox']['node'] = $node;

  // clear the node cache!
  node_load(NULL, NULL, TRUE);
}

/*
 * Implementation of hook_block().
 */
/**
 * Implements hook_block_info().
 */
function lingwo_korpus_block_info() {
  // TODO Rename block deltas (e.g. delta-0) to readable strings.
  $blocks['delta-0'] = array(
    'info' => t('Lingwo Korpus: Annotation Reader block'),
  );
  return $blocks;
}

/**
 * Implements hook_block_configure().
 */
function lingwo_korpus_block_configure($delta) {
  // TODO Rename block deltas (e.g. delta-0) to readable strings.
  if ($delta == 'delta-0') {
    $form['footer_id'] = array(
      '#type' => 'textfield',
      '#title' => t('Footer ID'),
      '#default_value' => variable_get('lingwo_korpus_annotation_reader_block_footer_id', 'footer'),
    );
    $form['footer_margin'] = array(
      '#type' => 'textfield',
      '#title' => t('Footer Margin'),
      '#default_value' => variable_get('lingwo_korpus_annotation_reader_block_footer_margin', '0'),
    );
    return $form;
  }
}

/**
 * Implements hook_block_save().
 */
function lingwo_korpus_block_save($delta, $edit) {
  // TODO Rename block deltas (e.g. delta-0) to readable strings.
  if ($delta == 'delta-0') {
    variable_set('lingwo_korpus_annotation_reader_block_footer_id', $edit['footer_id']);
    variable_set('lingwo_korpus_annotation_reader_block_footer_margin', $edit['footer_margin']);
  }
}

/**
 * Implements hook_block_view().
 */
function lingwo_korpus_block_view($delta) {
  $footer_id = variable_get('lingwo_korpus_annotation_reader_block_footer_id', 'footer');
  $footer_margin = variable_get('lingwo_korpus_annotation_reader_block_footer_margin', '0');

  $block['content'] = theme('lingwo_korpus_annotation_reader_block', array('footer_id' => $footer_id, 'footer_margin' => $footer_margin));
  return $block;
}

/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function lingwo_korpus_block_OLD($op = 'list', $delta = 0, $edit = array()) { }

/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function theme_lingwo_korpus_annotation_reader_block($variables) {
  $footer_id = $variables['footer_id'];
  $footer_margin = $variables['footer_margin'];
  return '<div id="lingwo-korpus-dock" data-footer-id="' . $footer_id . '" data-footer-margin="' . $footer_margin . '"></div>';
}

/*
 * Dealing with the automatic annotator.
 */

function _lingwo_korpus_auto_annotate_node(&$node, $which = 'body', $type = array('segment', 'lookup')) {
  $cmd  = "-l " . $node->language . " ";
  $cmd .= "-m " . implode(",", $type);
  $cmd .= " -";
  if ($result = _lingwo_korpus_exec_annotate_py($cmd, $node->$which)) {
    $result = rtrim($result);
    if ($which == 'body') {
      if (!_lingwo_korpus_update_body($node, $result)) {
        _lingwo_korpus_auto_annotate_node($node, 'teaser', $type);
      }
    }
    else {
      $node->$which = $result;
    }

    return TRUE;
  }
  return FALSE;
}

function _lingwo_korpus_exec_python($script, $args, $data) {
  $cmd = implode(' ', array(
    lingwo_korpus_python_exec(),
    _lingwo_old_project_path() . '/' . $script,
    $args,
  ));

  $descspec = array(
    0 => array('pipe', 'r'),
    1 => array('pipe', 'w'),
    2 => array('pipe', 'w'),
  );

  $ret = array();

  $process = proc_open($cmd, $descspec, $pipes, NULL, NULL);
  if (is_resource($process)) {
    // write the node body to the child's stdin
    fwrite($pipes[0], $data);
    fclose($pipes[0]);

    // read the result from the child's stdout
    $ret['result'] = stream_get_contents($pipes[1]);
    fclose($pipes[1]);

    // read the error stream
    $ret['error'] = stream_get_contents($pipes[2]);
    fclose($pipes[2]);

    // if the program was successful, update the node
    $ret['return_value'] = proc_close($process);
  }

  return $ret;
}

function _lingwo_korpus_exec_annotate_py($cmd, $data) {
  $ret = _lingwo_korpus_exec_python('nlp/annotate.py', $cmd, $data);

  if (!empty($ret['error'])) {
    if ($ret['return_value'] == 0) {
      drupal_set_message(t('Got warnings when running the automatic annotator.'), 'warning');
      watchdog('lingwo_korpus', 'Warnings from annotate.py: ' . $ret['error'], NULL, WATCHDOG_WARNING);
    }
    else {
      drupal_set_message(t('Error running automatic annotator.'), 'error');
      watchdog('lingwo_korpus', "Error running annotate.py: " . $ret['error'], NULL, WATCHDOG_ERROR);
    }
  }

  // if the program was successful, update return the result
  if ($ret['return_value'] == 0) {
    return $ret['result'];
  }
}

function _lingwo_korpus_exec_korpus2html_py($cmd, $data) {
  $ret = _lingwo_korpus_exec_python('nlp/korpus2html.py', $cmd, $data);

  // if the program was successful, update return the result
  if ($ret['return_value'] == 0) {
    return $ret['result'];
  }
  else {
    drupal_set_message(t('Error converting content item to HTML.'), 'error');
    watchdog('lingwo_korpus', "Error running korpus2html.py: " . $ret['error'], NULL, WATCHDOG_ERROR);
  }
}

/*
 * Mass updating content
 */

function _lingwo_korpus_replace_content($search, $replace) {
  $batch = array(
    'title' => t('Updating corpus texts'),
    'operations' => array(),
  );

  $block = 0;
  $blocksize = 10;
  // TODO Please convert this statement to the D7 database API syntax.
  while ($result = db_query_range("SELECT DISTINCT nid FROM {lingwo_korpus_entry} WHERE sense IN (" . db_placeholders($search, 'varchar') . ")", $search)) {
    $nids = array();
    while ($row = db_fetch_array($result)) {
      $nids[] = $row['nid'];
    }
    if (count($nids) == 0) {
      break;
    }
    $batch['operations'][] = array('_lingwo_korpus_batch_replace_content', array($nids, $search, $replace));
    $block++;
  }

  if (!empty($batch['operations'])) {
    batch_set($batch);
  }
}

function _lingwo_korpus_batch_replace_content($nids, $search, $replace) {
  foreach ($nids as $nid) {
    $node = node_load($nid);
    $body = str_replace($search, $replace, $node->body);
    // update the body and attempt to automatically update the teaser
    if (!_lingwo_korpus_update_body($node, $body)) {
      // couldn't update the teaser automatically, so we do it here
      $node->teaser = str_replace($search, $replace, $node->teaser);
    }
    node_save($node);
  }
}

/*
 * Settings
 */

/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function lingwo_korpus_text_content_type($value = NULL) {
  if (is_null($value)) {
    return variable_get('lingwo_korpus_text_content_type', '');
  }

  variable_set('lingwo_korpus_text_content_type', $value);
}

/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function lingwo_korpus_python_exec($value = NULL) {
  if (is_null($value)) {
    return variable_get('lingwo_korpus_python_exec', '/usr/bin/python');
  }

  variable_set('lingwo_korpus_python_exec', $value);
}

