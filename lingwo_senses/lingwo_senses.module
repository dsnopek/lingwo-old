<?php
// $Id$

/**
 * @file
 * Implements a CCK field for storing multiple dictionary senses
 */

/**
 * Implementation of hook_menu().
 */
function lingwo_senses_menu() {
  $items = array();

  $items['lingwo_senses/ahah/%'] = array(
    'title' => 'Lingwo Dictionary Senses AHAH',
    'page callback' => 'lingwo_senses_ahah',
    'page arguments' => array(2),
    // TODO: What should this be?
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK
  );

  return $items;
}

/**
 * Implementation of hook_theme().
 */
function lingwo_senses_theme() {
  return array(
    'lingwo_senses_widget' => array(
      'arguments' => array('element' => NULL),
    ),
    'lingwo_senses_original_form' => array(
      'arguments' => array('form' => NULL),
    ),
    'lingwo_senses_translation_form' => array(
      'arguments' => array('form' => NULL),
    ),
    'lingwo_senses_formatter_default' => array(
      'arguments' => array('element' => NULL),
    ),
    'lingwo_senses_original' => array(
      'arguments' => array('node' => NULL, 'items' => NULL),
    ),
    'lingwo_senses_translation' => array(
      'arguments' => array('node' => NULL, 'items' => NULL),
    ),
  );
}

/**
 * CCK hooks
 */

/**
 * Implementation of hook_field_info().
 */
function lingwo_senses_field_info() {
  return array(
    'lingwo_senses' => array(
      'label' => t('Lingwo Dictionary Senses'),
      'description' => t('Store dictionary senses in the database.'),
    ),
  );
}

/**
 * Implementation of hook_widget_info().
 */
function lingwo_senses_widget_info() {
  return array(
    'lingwo_senses_widget' => array(
      'label' => 'Lingwo Dictionary Senses Widget',
      'field types' => array('lingwo_senses'),
      'multiple values' => CONTENT_HANDLE_MODULE,
      //'multiple values' => CONTENT_HANDLE_CORE,
      'description' => t('Widget for editing senses for a dictionary entry .'),
    ),
  );
}

/**
 * Implementation of hook_field_formatter_info().
 */
function lingwo_senses_field_formatter_info() {
  return array(
    'default' => array(
      'label' => t('Lingwo Dictionary Senses Formatter'),
      'field types' => array('lingwo_senses'),
      'multiple values' => CONTENT_HANDLE_MODULE,
    ),
  );
}

/**
 * Implementation of hook_field_settings().
 */
function lingwo_senses_field_settings($op, $field) {
  switch ($op) {
    case 'database columns':
      $columns['id'] = array(
        'type' => 'varchar',
        'length' => '36',
        'not null' => FALSE,
        'sortable' => FALSE
      );
      $columns['data'] = array(
        'type' => 'text',
        'size' => 'big',
        'not null' => FALSE,
        'sortable' => FALSE,
        'serialize' => TRUE
      );
      return $columns;
  }
}

/**
 * Implementation of hook_field().
 */
function lingwo_senses_field($op, &$node, $field, &$items, $teaser, $page) {
  switch ($op) {
    case 'load':
      // Content_storage does serialize each field item's columns (if the 
      // 'serialize' key for that column is set) upon writing to the db,
      // but does not unserialize when reading from the db. Hopefully,
      // this will be fixed in the future, but for now, we have to 
      // explicitly unserialize.
      if (is_array($items)) {
        foreach ($items as &$item) {
          if (is_string($item['data'])) {
            $item['data'] = unserialize($item['data']);
          }
        }
        return (array($field['field_name'] => $items));
      }
      break;

    case 'presave':
      // remove some cruft that sneaks into the data
      unset($items['wrapper']);
      foreach ($items as &$item) {
        // if 'same_as' is set, then we clear the other fields
        if (!empty($item['data']['same_as'])) {
          unset($item['data']['trans']);
          unset($item['data']['clue']);
        }
      }
      break;

    case 'validate':
      return $items;
  }
}

/**
 * Implementation of hook_content_is_empty().
 */
function lingwo_senses_content_is_empty($item, $field=NULL) {
  if ($item['retire_sense']) {
    return TRUE;
  }
  return FALSE;
}

function lingwo_senses_not_marker_row($item, $field=NULL) {
  return !empty($item['id']);
}

function lingwo_senses_widget(&$form, &$form_state, $field, $items, $delta = 0) {
  $node = $form['#node'];
  if (!isset($node)) {
    $node = (object)$form_state['node'];
  }

  $func = 'lingwo_senses_widget_'.
    (lingwo_dictionary_entry_is_translation($node) ? 'translation' : 'original');
  return $func($form, $form_state, $field, $items, $delta);
}

function lingwo_senses_widget_original(&$form, &$form_state, $field, $items, $delta = 0) {
  $field_name = $field['field_name'];
  if (isset($form_state[$field_name]['senses'])) {
    $items = $form_state[$field_name]['senses'];
  }

  $element = array(
    '#type' => 'fieldset',
    '#tree' => TRUE,
  );

  $element['wrapper'] = array(
    '#prefix' => '<div id="'. $field_name .'-wrapper">',
    '#suffix' => '</div>',
  );

  $element['wrapper']['senses'] = array(
    '#theme' => 'lingwo_senses_original_form',
    '#parents' => array($field['field_name']),
  );

  // filter out marker rows
  $items = array_filter($items, 'lingwo_senses_not_marker_row');
  if (count($items) == 0) {
    $items[] = array('data' => array());
  }

  // we count it as empty if there is less than 2 senses!
  $index = 0;
  foreach ($items as $sense) {
    if (!isset($sense['id'])) {
      $sense['id'] = _ld_make_uuid();
    }

    $row['id'] = array(
      '#type' => 'hidden',
      '#value' => $sense['id'],
    );

    if (count($items) > 1) {
      $row['data']['difference'] = array(
        '#title' => 'Difference',
        '#type' => 'textfield',
        '#default_value' => $sense['data']['difference'],
        '#maxlength' => 255,
      );
      $row['data']['example'] = array(
        '#title' => 'Example',
        '#type' => 'textfield',
        '#default_value' => $sense['data']['example'],
        '#maxlength' => 255,
      );
    }
    else {
      $row['message'] = array(
        '#value' => "<p><em>". t('This entry has only one sense.') ."</em></p>",
      );
      if ($sense['data']['difference']) {
        $row['data']['difference'] = array(
          '#title' => 'Difference',
          '#type' => 'item',
          '#value' => $sense['data']['difference'],
        );
      }
      if ($sense['data']['example']) {
        $row['data']['example'] = array(
          '#title' => 'Example',
          '#type' => 'item',
          '#value' => $sense['data']['example']
        );
      }
    }

    $row['weight'] = array(
      '#type' => 'weight',
      // TODO: Delta should probably be equal to the number of definitions?
      '#delta' => 50,
      '#default_value' => $index,
    );

    if (count($items) > 1) {
      $row['remove_sense'] = array(
        '#type' => 'submit',
        '#value' => t('Remove Sense #!num', array('!num' => $index + 1)),
        '#submit' => array('lingwo_senses_remove_submit'),
        '#field_name' => $field_name,
      );
    }

    $element['wrapper']['senses'][$index] = $row;
    $index ++;
  }
  $element['wrapper']['add_sense'] = array(
    '#type' => 'submit',
    '#value' => count($items) > 1 ? t('Add another sense') : t('Setup multiple senses'),
    '#submit' => array('lingwo_senses_add_submit'),
    '#field_name' => $field_name,
    /*
    '#ahah' => array(
      'event' => 'click',
      'path' => 'lingwo_senses/ahah/'. $field_name,
      'wrapper' => $field_name .'-wrapper',
      'effect' => 'fade',
    ),
    */
  );

  return $element;
}

function lingwo_senses_widget_translation(&$form, &$form_state, $field, $items, $delta = 0) {
  $node = $form['#node'];
  if (!isset($node)) {
    $node = (object)$form_state['node'];
  }

  $field_name = $field['field_name'];
  $field_id = preg_replace('/_/', '-', $field_name);

  $senses = lingwo_senses_get_translations($node, $field_name, $items);

  $element = array(
    '#type' => 'fieldset',
    '#tree' => TRUE,
    '#theme' => 'lingwo_senses_translation_form',
  );

  $index = 0;
  foreach ($senses as $sense) {
    $orig_sense = $sense['orig_sense'];

    $sense_form = array();
    $sense_form['id'] = array(
      '#type' => 'hidden',
      '#value' => $sense['id'],
    );
    if ($orig_sense) {
      if ($orig_sense['data']['difference']) {
        $sense_form['data']['difference'] = array(
          '#type' => 'item',
          '#title' => t('Difference'),
          '#value' => $orig_sense['data']['difference'],
        );
      }
      if ($orig_sense['data']['example']) {
        $sense_form['data']['example'] = array(
          '#type' => 'item',
          '#title' => t('Example'),
          '#value' => $orig_sense['data']['example'],
        );
      }
    }

    $sense_form['data']['translation'] = array(
      '#parents' => array($field_name, $index, 'data'),
      '#prefix' => "<div id=\"edit-$field_id-$index-data-translation\">",
      '#suffix' => '</div>',
    );
    if (count($senses) > 1) {
      $sense_form['data']['translation']['clue'] = array(
        '#type' => 'textfield',
        '#title' => t('Clue'),
        '#description' => t('A couple words that will clue the reader to how this sense is different.'),
        '#default_value' => $sense['data']['clue'],
        '#maxlength' => 255,
      );
    }

    $sense_form['data']['translation']['trans'] = array(
      '#prefix' => "<div id=\"edit-$field_id-$index-data-translation-trans\">",
      '#suffix' => "</div>",
    );
    for ($t = 0; $t < max(3, count($sense['data']['trans'])); $t++) {
      $sense_form['data']['translation']['trans'][$t] = array(
        '#type' => 'textfield',
        '#default_value' => $sense['data']['trans'][$t]
      );
    }
    $sense_form['data']['translation']['trans']['0']['#title'] = t('Translation');

    $sense_form['data']['translation']['no_equivalent'] = array(
      '#title' => t('No equivalent in this language'),
      '#type'  => 'checkbox',
      '#default_value' => $sense['data']['no_equivalent'],
      '#attributes' => array('class' => 'no-equivalent-checkbox'),
    );

    if (count($senses) > 1) {
      $same_as_options = array('' => '-');
      $same_as_count = 1;
      foreach ($senses as $sense2) {
        if (!empty($sense2['id']) && $sense2['id'] != $sense['id']) {
          $same_as_options[$sense2['id']] = t('Sense #!sense_num', array('!sense_num' => $same_as_count));
        }
        $same_as_count++;
      }

      $sense_form['data']['same_as'] = array(
        '#title' => t('Same as'),
        '#type' => 'select',
        '#options' => $same_as_options,
        '#default_value' => !empty($sense['data']['same_as']) ? $sense['data']['same_as'] : '',
        '#attributes' => array('class' => 'same-as-select'),
      );
    }

    if (!$orig_sense) {
      $sense_form['old_sense_message'] = array(
        '#prefix' => '<div class="lingwo-sense-old-message">* ',
        '#value' => t('This translation is for a sense that has been removed from the entry.'),
        '#suffix' => '</div>',
      );
      $sense_form['retire_sense'] = array(
        '#type' => 'checkbox',
        '#title' => t('Retire this obsolete sense.'),
      );
    }

    $element[$index++] = $sense_form;
  }

  drupal_add_js(drupal_get_path('module', 'lingwo_senses') .'/lingwo_senses.js');

  return $element;
}

/* Takes an entry and a trans and makes a list of trans senses in the appropriate
 * order, connected to the entry senses if one exists.
 */
function lingwo_senses_get_translations(&$node, $field_name, $items) {
  $orig = lingwo_dictionary_entry_load_translation_source($node);
  // TODO: does this make sense?  Why support not having a translation source??
  $orig_senses = isset($orig) ? $orig->$field_name : array();
  $orig_senses = array_filter($orig_senses, 'lingwo_senses_not_marker_row');

  $trans_map = array();
  $trans_senses = empty($items) ? array() : $items;
  $trans_senses = array_filter($trans_senses, 'lingwo_senses_not_marker_row');

  foreach ($trans_senses as $trans_sense) {
    $trans_map[$trans_sense['id']] = $trans_sense;
  }

  $senses = array();

  foreach ($orig_senses as $sense) {
    $trans_sense = $trans_map[$sense['id']];
    if (!isset($trans_sense)) {
      $trans_sense = array('id' => $sense['id']);
    }
    $trans_sense['orig_sense'] = $sense;
    
    $senses[] = $trans_sense;
    unset($trans_map[$sense['id']]);
  }

  // TODO: do we still need this?  Source entries without senses is no longer our thing.
  if (count($senses) == 0) {
    if ($trans_map && isset($trans_map['*'])) {
      $only_sense = $trans_map['*'];
    }
    else {
      $only_sense = array('id' => '*', 'data' => array());
    }
    $senses[] = $only_sense;
    unset($trans_map['*']);
  }

  foreach ($trans_map as $id => $trans_sense) {
    $senses[] = $trans_sense;
  }

  return $senses;
}

function _lingwo_senses_from_form($form, &$form_state) {
  $node = _ld_form_to_node($form, $form_state);
  $field_name = $form_state['clicked_button']['#field_name'];

  $senses = $form_state['values'][$field_name];
  if ($senses) {
    foreach ($senses as $index => $sense) {
      if (is_numeric($index)) {
        $weight[] = $sense['weight'];
        unset($sense['weight'], $sense['remove_sense']);
        $values[] = $sense;
      }
    }
    if (!empty($values)) {
      array_multisort($weight, SORT_ASC, $values);
    }
    $senses = $values;
  }
  else {
    $senses = array();
  }

  $form_state[$field_name]['senses'] = $senses;
  return $senses;
}

function lingwo_senses_add_submit($form, &$form_state) {
  $senses = _lingwo_senses_from_form($form, $form_state);
  $field_name = $form_state['clicked_button']['#field_name'];
  
  $form_state[$field_name]['senses'][] = array('id' => _ld_make_uuid());
}

function lingwo_senses_remove_submit($form, &$form_state) {
  // We have to remove first, so that changing the order doesn't change
  // which item gets removed.
  $field_name = $form_state['clicked_button']['#field_name'];
  $delta = $form_state['clicked_button']['#parents'][1];
  unset($form_state['values'][$field_name][$delta]);

  // get the senses onto the $form_state.
  _lingwo_senses_from_form($form, $form_state);
}

function lingwo_senses_ahah($field_name) {
  module_load_include('inc', 'node', 'node.pages');
  $form_state = array('storage' => NULL, 'submitted' => FALSE);
  $form_build_id = $_POST['form_build_id'];

  $form = form_get_cache($form_build_id, $form_state);

  _ld_disable_validation($form);

  $args = $form['#parameters'];
  $form_id = array_shift($args);
  $form_state['post'] = $form['#post'] = $_POST;
  $form['#post']['form_id'] = $form_id;
  $form['#programmed'] = $form['#redirect'] = FALSE;

  drupal_process_form($form_id, $form, $form_state);

  $form = drupal_rebuild_form($form_id, $form_state, $args, $form_build_id);

  $element = $form[$field_name]['wrapper']; 
  unset($element['#prefix'], $element['#suffix']);
  $output = theme('status_messages') . drupal_render($element);

  drupal_json(array('status' => TRUE, 'data' => $output));
}

function theme_lingwo_senses_original_form($form) {
  drupal_add_tabledrag('lingwo-definition-table', 'order', 'sibling', 'sense-weight');

  $elements = element_children($form);
  if (empty($elements)) {
    return '';
  }

  $header = array(
    '',
    array(
      'data' => t('Sense'),
      'width' => '100%',
    ),
    t('Weight'),
  );

  if (count($elements) > 1) {
    $header[] = t('Operations');
  }

  $rows = array();
  foreach (element_children($form) as $key) {
    $element = &$form[$key];
    $element['weight']['#attributes']['class'] = 'sense-weight';

    $weight = drupal_render($element['weight']);
    $delete = drupal_render($element['remove_sense']);

    $row = array();
    $row[] = '';
    $row[] = drupal_render($element);
    $row[] = $weight;

    if (count($elements) > 1) {
      $row[] = $delete;
    }

    $row = array('data' => $row);
    $row['class'] = !empty($row['class']) ? $row['class'] .' draggable' : 'draggable';
    $rows[] = $row;
  }

  return theme('table', $header, $rows, array('id' => 'lingwo-definition-table'));
}

function theme_lingwo_senses_translation_form($form) {
  $header = array(
    t('No.'),
    t('Sense'),
  );

  $rows = array();
  $elements = element_children($form);
  foreach ($elements as $key) {
    $row = array();
    $row[] = ($key + 1);
    $row[] = drupal_render($form[$key]);

    $rows[] = $row;
  }

  return theme('table', $header, $rows);
}

function theme_lingwo_senses_formatter_default($element) {
  $field_name = $element['#field_name'];
  $node = $element['#node'];
  $items = $node->$field_name;

  $theme = 'lingwo_senses';
  if (isset($node->translation_source) || ($node->nid && $node->tnid && $node->nid != $node->tnid)) {
    $items = lingwo_senses_get_translations($node, $field_name, $items);
    $theme = $theme .'_translation';
  }
  else {
    $theme = $theme .'_original';
  }

  // filter out empty items
  //require_once(drupal_get_path('module', 'lingwo_dictionary') .'/includes/3rdparty/Fn.php');
  //$items = Fn::filter(Fn::not('lingwo_senses_content_is_empty')), $items);
  $items = array_filter($items, 'lingwo_senses_not_marker_row');

  return theme($theme, $node, $items);
}

function theme_lingwo_senses_original($node, $items) {
  if (!empty($items)) {
    $output .= '<div class="lingwo-entry">';
    $output .= '<ol class="lingwo-sense-list">';
    foreach ($items as $sense) {
      $sense_id = $sense['id'];
      $sense = $sense['data'];

      $output .= '<li class="lingwo-sense lingwo-sense-id-'.$sense_id.'">';
      if ($sense['difference']) {
        $output .= '<span class="lingwo-sense-difference">'. $sense['difference'] .'</span>';
      }
      else {
        $output .= '<span class="lingwo-sense-nodifference">(';
        $output .= t('No difference given');
        $output .= ')</span>';
      }
      if ($sense['example']) {
        $output .= ': <blockquote class="lingwo-example">"'. $sense['example'] .'"</blockquote>';
      }
      $output .= '</li>';
    };
    $output .= '</ol>';
    $output .= '</div>';
  }
  else {
    $output .= '<p>'. t('No sense distinctions.') .'</p>';
  }

  drupal_add_css(drupal_get_path('module', 'lingwo_dictionary') .'/lingwo_dictionary.css');
  return $output;
}

function theme_lingwo_senses_translation($node, $items) {
  $output = '';
  $output .= '<div class="lingwo-entry">';
  $output .= '<ol class="lingwo-sense-list">';

  # group the ids together
  $ids = array();
  foreach ($items as $sense) {
    if ($sense['data']['same_as']) {
      $ids[$sense['data']['same_as']][] = $sense['id'];
    }
    else {
      $ids[$sense['id']][] = $sense['id'];
    }
  }

  $without_translations = 0;
  foreach ($items as $sense) {
    if (!empty($sense['data']['same_as'])) {
      continue;
    }
    $orig_sense = $sense['orig_sense'];
    $sense_id = $sense['id'];
    $sense = $sense['data'];
    
    $values = array();
    if ($sense['no_equivalent']) {
      $values[] = '<strong><span class="lingwo-sense-no-equivalent">'. t('No equivalent in this language') .'</span></strong>';
    }
    else if (!empty($sense['trans'])) {
      foreach ($sense['trans'] as $value) {
        if (!empty($value)) {
          // TODO: re-instate this!
          //$values[] = l($value, 'entry/'. $trans->target_lang .'/'. $entry->pos .'/'. $value);
          $values[] = $value;
        }
      }
    }
    if (empty($values)) {
      //$output .= t('No translation');
      $without_translations++;
      continue;
    }

    $output_ids = array();
    foreach ($ids[$sense_id] as $id) {
      $output_ids[] = 'lingwo-sense-id-'. $id;
    }
    $output_ids = implode(' ', $output_ids);

    $output .= '<li class="lingwo-sense '. $output_ids .'">';
    if ($sense['clue']) {
      $output .= '<span class="lingwo-sense-clue">('. $sense['clue'] .')</span> ';
    }

    $output .= join(', ', $values);

    if (!empty($orig_sense['data']['example'])) {
      $output .= '<blockquote class="lingwo-example">"'. $orig_sense['data']['example'] .'"</blockquote>';
    }
    $output .= '</li>';
  };
  $output .= '</ol>';

  // TODO: while this is an awesome idea, it has problems.  (1) it doesn't belong in lingwo_senses
  // because it is UX.  It should go in the theme or lingwoorg_dictionary. (2) it doesn't check
  // for edit permissions.  I've added trac ticket #42 to try and re-instate it somewhere.
  /*
  if ($without_translations > 0) {
    $output .= '<p>';
    $output .= t('There are @count senses without translations.', array('@count' => $without_translations));
    $output .= '  ';
    $output .= l(t('Edit this entry and contribute!'), 'node/'. $node->nid .'/edit');
    $output .= '</p>';
  }
  */

  $output .= '</div>';

  drupal_add_css(drupal_get_path('module', 'lingwo_dictionary') .'/lingwo_dictionary.css');
  return $output;
}

