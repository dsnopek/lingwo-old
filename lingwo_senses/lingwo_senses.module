<?php
// $Id$

/**
 * @file
 * Implements a CCK field for storing multiple dictionary senses
 */

// get our API functions for dealing with entries
require_once(dirname(__FILE__) .'/lingwo_senses.api.inc');

/**
 * Implementation of hook_menu().
 */
function lingwo_senses_menu() {
  $items = array();

  $items['lingwo_senses/ahah/%'] = array(
    'title' => 'Lingwo Dictionary Senses AHAH',
    'page callback' => 'lingwo_senses_ahah',
    'page arguments' => array(2),
    // TODO: What should this be?
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK
  );

  $items['admin/settings/lingwo_dictionary/senses'] = array(
    'title' => 'Data',
    'description' => 'Settings for Lingwo Senses module.',
    'access arguments' => array('administer site configuration'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('\lingwo_senses\admin_settings_form'),
    'file' => 'lingwo_senses.admin.inc',
    'type' => MENU_LOCAL_TASK,
  );

  return $items;
}

/**
 * Implementation of hook_theme().
 */
function lingwo_senses_theme() {
  return array(
    'lingwo_senses_original_form' => array(
      'arguments' => array('form' => NULL),
      'file' => 'lingwo_senses.theme.inc',
    ),
    'lingwo_senses_translation_form' => array(
      'arguments' => array('form' => NULL),
      'file' => 'lingwo_senses.theme.inc',
    ),
    'lingwo_senses_original' => array(
      'arguments' => array('node' => NULL),
      'file' => 'lingwo_senses.theme.inc',
    ),
    'lingwo_senses_translation' => array(
      'arguments' => array('node' => NULL, 'items' => NULL),
      'file' => 'lingwo_senses.theme.inc',
    ),
  );
}

/**
 * Implementation of hook_form_alter().
 */
function lingwo_senses_form_alter(&$form, $form_state, $form_id) {
  if ($form_id == (LingwoEntry::$settings->entry_content_type .'_node_form')) {
    $form['lingwo_senses'] = lingwo_senses_widget($form, $form_state);
    drupal_add_js(drupal_get_path('module', 'lingwo_senses') .'/lingwo_senses.js');
  }
}

/**
 * Implementation of hook_content_extra_fields().
 */
function lingwo_senses_content_extra_fields($type_name) {
  $extra = array();

  if (LingwoEntry::$settings->entry_content_type == $type_name) {
    $extra['lingwo_senses'] = array(
      'label' => t('Lingwo Senses'),
      'description' => t('lingwo_senses module.'),
      'weight' => 1,
    );
  }

  return $extra;
}

function _lingwo_senses_retire_helper($item) {
  if ($item['retire_sense']) {
    return FALSE;
  }
  return TRUE;
}

function _lingwo_senses_clean(&$senses) {
  unset($senses['wrapper']);

  // retire senses
  $senses = array_filter($senses, '_lingwo_senses_retire_helper');

  $weight = array();
  foreach ($senses as &$sense) {
    // weight and some other extra stuff..
    if (isset($sense['weight'])) {
      $weight[] = $sense['weight'];
    }
    unset($sense['weight'], $sense['remove_sense']);

    // if 'same_as' is set, then we clear the other fields
    if (!empty($sense['data']['same_as'])) {
      unset($sense['data']['trans']);
      unset($sense['data']['clue']);
    }
    else {
      unset($sense['data']['same_as']);
    }
    // clear translations on no_equivalent
    if ($sense['data']['no_equivalent']) {
      $sense['data']['trans'] = array();
    }
    else {
      unset($sense['data']['no_equivalent']);
    }
    // remove empty translations
    if (isset($sense['data']['trans'])) {
      $sense['data']['trans'] = array_filter($sense['data']['trans']);
    }

    // if "is" is set, clear difference
    if (!empty($sense['data']['is']['relationship'])) {
      unset($sense['data']['difference']);
    }
    else {
      unset($sense['data']['is']);
    }

    // remove empty fields
    foreach (array('example','example_translation','clue') as $name) {
      if (empty($sense['data'][$name])) {
        unset($sense['data'][$name]);
      }
    }
  }

  if (!empty($weight) && count($weight) == count($senses)) {
    // put in the order by weight (but only if it was given)
    array_multisort($weight, SORT_ASC, $senses);
  }
}

# TODO: should be a hook plus some default values stored in admin
# TODO: make this code generic, I copied it from lingwo_dictionary_pos_options()
function _lingwo_senses_relationship_options($translate = FALSE, $option_name = NULL) {
  $list = array(
    # imiesłów przymiotnikowy teraźniejszy czynny
    'imieslow.przy.t.c' => 'present active participle',
    # imiesłów przymiotnikowy przeszły bierny
    'imieslow.przy.p.b' => 'past passive participle',
    # imiesłów przymiotnikowy przeszły czynny
    'imieslow.przy.p.c' => 'past active participle',
  );

  // Only translate if we have i18nstrings
  $translate = $translate && module_exists('i18nstrings');

  $options = array();
  foreach ($list as $key => $value) {
    // if we are only looking for one key, skip all the rest
    if (!is_null($option_name) && $option_name != $key) {
      continue;
    }

    if ($translate) {
      # TODO: we need to integrate this for real with the i18n hooks!!
      #$value = i18nstrings('lingwo:field:sense_relationships:option_'. $key, $value);
    }

    if ($option_name == $key) {
      return $value;
    }

    $options[$key] = $value;
  }

  if (!is_null($option_name)) {
    // we requested an option but it isn't here!  Return the original.
    return $option_name;
  }

  asort($options);

  return $options;
}


/**
 * Implementation of hook_nodeapi().
 */
function lingwo_senses_nodeapi(&$node, $op, $a3=NULL, $a4=NULL) {
  if (!LingwoEntry::isEntryNode($node))
    return NULL;

  switch ($op) {
    case 'load':
      $res = db_query("SELECT data FROM {lingwo_senses_revisions} WHERE vid = %d", $node->vid);
      if ($row = db_fetch_object($res)) {
        return array('lingwo_senses' => unserialize($row->data));
      }
      break;

    case 'presave':
    case 'prepare':
      # prepare: an unclean $node->lingwo_senses can mess up the edit form
      # presave: clean the senses before save
      if (!empty($node->lingwo_senses)) {
        _lingwo_senses_clean($node->lingwo_senses);
      }
      break;

    case 'insert':
    case 'update':
      $object = (object)array(
        'nid'  => $node->nid,
        'vid'  => $node->vid,
        'data' => $node->lingwo_senses,
      );

      if (!empty($node->revision) || $op == 'insert' ) {
        drupal_write_record('lingwo_senses_revisions', $object);
      }
      else {
        drupal_write_record('lingwo_senses_revisions', $object, 'vid');
      }
      break;

    case 'view':
      $theme = 'lingwo_senses'. (_ld_is_translation($node) ? '_translation' : '_original');

      $node->content['lingwo_senses'] = array(
        '#value' => theme($theme, $node),
      );
      break;

    case 'delete revision':
      db_query("DELETE FROM {lingwo_senses_revisions} WHERE vid = %s", $node->vid);
      break;

    case 'delete':
      db_query("DELETE FROM {lingwo_senses_revisions} WHERE nid = %s", $node->nid);
      break;
  }
}

function lingwo_senses_widget(&$form, &$form_state) {
  $node = $form['#node'];
  if (!isset($node)) {
    $node = (object)$form_state['node'];
  }

  $func = 'lingwo_senses_widget_'. (_ld_is_translation($node) ? 'translation' : 'original');
  return $func($form, $form_state, $node);
}

function lingwo_senses_widget_original(&$form, &$form_state, $node) {
  $items = $node->lingwo_senses;

  $element = array(
    '#type' => 'fieldset',
    '#tree' => TRUE,
  );

  $element['wrapper'] = array(
    '#prefix' => '<div id="edit-lingwo_senses-wrapper">',
    '#suffix' => '</div>',
  );

  $element['wrapper']['senses'] = array(
    '#theme' => 'lingwo_senses_original_form',
    '#parents' => array('lingwo_senses'),
  );

  # if there are no items..
  if (count($items) == 0) {
    $items[] = array('data' => array());
  }

  // we count it as empty if there is less than 2 senses!
  $index = 0;
  foreach ($items as $sense) {
    if (!isset($sense['id'])) {
      $sense['id'] = _ld_make_uuid();
    }

    $row['id'] = array(
      '#type' => 'hidden',
      '#value' => $sense['id'],
    );

    if (count($items) > 1) {
      # only edit the difference when there are multiple senses
      $row['data']['difference'] = array(
        '#title' => 'Difference',
        '#type' => 'textfield',
        '#default_value' => $sense['data']['difference'],
        '#maxlength' => 255,
      );
    }
    else {
      # but preserve the value for if we delete down to one sense
      if ($sense['data']['difference']) {
        $row['data']['difference'] = array(
          '#title' => 'Difference',
          '#type' => 'item',
          '#value' => $sense['data']['difference'],
        );
      }
    }
    # always have an example
    $row['data']['example'] = array(
      '#title' => 'Example',
      '#type' => 'textfield',
      '#default_value' => $sense['data']['example'],
      '#maxlength' => 255,
    );

    # always have the ability to say it "is" a relationship to another entry
    $row['data']['is'] = array(
      '#type' => 'fieldset',
      '#title' => 'Relationship',
      '#collapsible' => TRUE,
      '#collapsed' => empty($sense['data']['is']['relationship']),
      #'#prefix' => '<div class="inline-controls clear-block">',
      #'#suffix' => '</div>',
    );
    $is_relationship_options = array('' => '-') + _lingwo_senses_relationship_options(TRUE);
    $row['data']['is']['relationship'] = array(
      '#title' => 'is',
      '#type'  => 'select',
      # TODO: should come from lingwo_language (or indirectly from a hook)
      '#options' => $is_relationship_options,
      '#default_value' => $sense['data']['is']['relationship'],
      '#attributes' => array('class' => 'is-relationship'),
    );
    $row['data']['is']['headword'] = array(
      '#title' => 'to',
      '#type'  => 'textfield',
      '#default_value' => $sense['data']['is']['headword'],
    );
    $row['data']['is']['pos'] = array(
      '#type'  => 'select',
      '#options' => lingwo_dictionary_pos_options(TRUE),
      '#default_value' => $sense['data']['is']['pos'],
    );

    $row['weight'] = array(
      '#type' => 'weight',
      // TODO: Delta should probably be equal to the number of definitions?
      '#delta' => 50,
      '#default_value' => $index,
    );

    if (count($items) > 1) {
      $row['remove_sense'] = array(
        '#type' => 'submit',
        '#value' => t('Remove Sense #!num', array('!num' => $index + 1)),
        '#submit' => array('lingwo_senses_remove_submit'),
      );
    }
    else {
      $row['message'] = array(
        '#value' => "<em>* ". t('This entry has only one sense.') ."</em>",
      );
    }

    $element['wrapper']['senses'][$index] = $row;
    $index ++;
  }
  $element['wrapper']['add_sense'] = array(
    '#type' => 'submit',
    '#value' => count($items) > 1 ? t('Add another sense') : t('Setup multiple senses'),
    '#submit' => array('lingwo_senses_add_submit'),
    /*
    '#ahah' => array(
      'event' => 'click',
      'path' => 'lingwo_senses/ahah/'. $field_name,
      'wrapper' => $field_name .'-wrapper',
      'effect' => 'fade',
    ),
    */
  );

  return $element;
}

function lingwo_senses_widget_translation(&$form, &$form_state, $node) {
  $senses = lingwo_senses_get_translations($node);

  $element = array(
    '#type' => 'fieldset',
    '#tree' => TRUE,
    '#theme' => 'lingwo_senses_translation_form',
  );

  $index = 0;
  foreach ($senses as $sense) {
    $orig_sense = $sense['orig_sense'];

    $sense_form = array();
    $sense_form['id'] = array(
      '#type' => 'hidden',
      '#value' => $sense['id'],
    );
    if ($orig_sense) {
      if ($orig_sense['data']['difference']) {
        $sense_form['data']['difference'] = array(
          '#type' => 'item',
          '#title' => t('Difference'),
          '#value' => $orig_sense['data']['difference'],
        );
      }
      if ($orig_sense['data']['example']) {
        $sense_form['data']['example'] = array(
          '#type' => 'item',
          '#title' => t('Example'),
          '#value' => $orig_sense['data']['example'],
        );
        $sense_form['data']['example_translation'] = array(
          '#type' => 'textfield',
          '#title' => t('Translation of Example'),
          '#default_value' => $sense['data']['example_translation'],
          '#maxlength' => 255,
        );
      }
    }

    if (!empty($orig_sense['data']['is']['relationship'])) {
      $sense_form['data']['relationship'] = array(
        '#value' => _theme_lingwo_senses_relationship($node, $orig_sense['data'])
      );
    }
    else {
      $sense_form['data']['translation'] = array(
        '#parents' => array('lingwo_senses', $index, 'data'),
        '#prefix' => "<div id=\"edit-lingwo-senses-$index-data-translation\">",
        '#suffix' => '</div>',
      );
      if (count($senses) > 1) {
        $sense_form['data']['translation']['clue'] = array(
          '#type' => 'textfield',
          '#title' => t('Clue'),
          '#description' => t('A couple words that will clue the reader to how this sense is different.'),
          '#default_value' => $sense['data']['clue'],
          '#maxlength' => 255,
        );
      }

      $sense_form['data']['translation']['trans'] = array(
        '#prefix' => "<div id=\"edit-lingwo-senses-$index-data-translation-trans\">",
        '#suffix' => "</div>",
      );
      for ($t = 0; $t < max(3, count($sense['data']['trans'])); $t++) {
        $sense_form['data']['translation']['trans'][$t] = array(
          '#type' => 'textfield',
          '#default_value' => $sense['data']['trans'][$t]
        );
      }
      $sense_form['data']['translation']['trans']['0']['#title'] = t('Translation');

      $sense_form['data']['translation']['no_equivalent'] = array(
        '#title' => t('No equivalent in this language'),
        '#type'  => 'checkbox',
        '#default_value' => $sense['data']['no_equivalent'],
        '#attributes' => array('class' => 'no-equivalent-checkbox'),
      );

      if (count($senses) > 1) {
        $same_as_options = array('' => '-');
        $same_as_count = 1;
        foreach ($senses as $sense2) {
          if (!empty($sense2['id']) && $sense2['id'] != $sense['id']) {
            $same_as_options[$sense2['id']] = t('Sense #!sense_num', array('!sense_num' => $same_as_count));
          }
          $same_as_count++;
        }

        $sense_form['data']['same_as'] = array(
          '#title' => t('Same as'),
          '#type' => 'select',
          '#options' => $same_as_options,
          '#default_value' => !empty($sense['data']['same_as']) ? $sense['data']['same_as'] : '',
          '#attributes' => array('class' => 'same-as-select'),
        );
      }
    }

    if (!$orig_sense) {
      $sense_form['old_sense_message'] = array(
        '#prefix' => '<div class="lingwo-sense-old-message">* ',
        '#value' => t('This translation is for a sense that has been removed from the entry.'),
        '#suffix' => '</div>',
      );
      $sense_form['retire_sense'] = array(
        '#type' => 'checkbox',
        '#title' => t('Retire this obsolete sense.'),
      );
    }

    $element[$index++] = $sense_form;
  }

  return $element;
}

/* Takes an entry and a trans and makes a list of trans senses in the appropriate
 * order, connected to the entry senses if one exists.
 */
function lingwo_senses_get_translations(&$node) {
  $orig = LingwoEntry::fromNode($node)->getTranslationSource();
  // TODO: does this make sense?  Why support not having a translation source??
  $orig_senses = isset($orig) ? $orig->lingwo_senses : array();

  $trans_map = array();
  $trans_senses = $node->lingwo_senses;

  # build our internal map of id => sense
  if (!empty($trans_senses)) {
    foreach ($trans_senses as $trans_sense) {
      $trans_map[$trans_sense['id']] = $trans_sense;
    }
  }

  $senses = array();

  foreach ($orig_senses as $sense) {
    $trans_sense = $trans_map[$sense['id']];
    if (!isset($trans_sense)) {
      $trans_sense = array('id' => $sense['id']);
    }
    $trans_sense['orig_sense'] = $sense;
    
    $senses[] = $trans_sense;
    unset($trans_map[$sense['id']]);
  }

  // TODO: do we still need this?  Source entries without senses is no longer our thing.
  if (count($senses) == 0) {
    if ($trans_map && isset($trans_map['*'])) {
      $only_sense = $trans_map['*'];
    }
    else {
      $only_sense = array('id' => '*', 'data' => array());
    }
    $senses[] = $only_sense;
    unset($trans_map['*']);
  }

  foreach ($trans_map as $id => $trans_sense) {
    $senses[] = $trans_sense;
  }

  return $senses;
}

function lingwo_senses_add_submit($form, &$form_state) {
  $node = &_ld_form_to_node($form, $form_state);
  array_push($node['lingwo_senses'], array('data' => array()));
}

function lingwo_senses_remove_submit($form, &$form_state) {
  // We have to remove first, so that changing the order doesn't change
  // which item gets removed.
  $delta = $form_state['clicked_button']['#parents'][1];
  array_splice($form_state['values']['lingwo_senses'], $delta, 1);

  // get the senses onto the $form_state.
  _ld_form_to_node($form, $form_state);
}

function lingwo_senses_ahah($field_name) {
  module_load_include('inc', 'node', 'node.pages');
  $form_state = array('storage' => NULL, 'submitted' => FALSE);
  $form_build_id = $_POST['form_build_id'];

  $form = form_get_cache($form_build_id, $form_state);

  _ld_disable_validation($form);

  $args = $form['#parameters'];
  $form_id = array_shift($args);
  $form_state['post'] = $form['#post'] = $_POST;
  $form['#post']['form_id'] = $form_id;
  $form['#programmed'] = $form['#redirect'] = FALSE;

  drupal_process_form($form_id, $form, $form_state);

  $form = drupal_rebuild_form($form_id, $form_state, $args, $form_build_id);

  $element = $form[$field_name]['wrapper']; 
  unset($element['#prefix'], $element['#suffix']);
  $output = theme('status_messages') . drupal_render($element);

  drupal_json(array('status' => TRUE, 'data' => $output));
}

function _theme_lingwo_senses_relationship($node, $sense) {
  if (_ld_is_translation($node)) {
    $source_lang = LingwoEntry::fromNode($node)->getSourceLanguage();
    $target_lang = $node->language;
    $spec = "$source_lang-$target_lang";
  }
  else {
    $spec = $source_lang = $target_lang = $node->language;
  }

  $pos = $sense['is']['pos'];
  $headword = $sense['is']['headword'];

  # TODO: this should be a function!
  # TODO: this should operate somehow, when we don't have a lookup path!
  $path = implode('/', array(
    LingwoEntry::$settings->lookup_path,
    $spec,
    $headword .'('. $pos .')'
  ));

  $entry_text = $headword .' ('. lingwo_dictionary_pos_options(TRUE, $pos) .')';
  // TODO: shouldn't be a link if there is no lookup path and this node doesn't exist!
  $entry_text = l($entry_text, $path, array(
    # setup for working in the korpus reader
    'attributes' => array(
      # TODO: hashing should be a function call!
      'data-entry' => sha1(join(':', array($source_lang, $pos, $headword))),
      'class' => 'anno'
    )
  ));

  return t('!rel of !entry', array(
    '!rel' => _lingwo_senses_relationship_options(TRUE, $sense['is']['relationship']),
    '!entry' => $entry_text
  ));
}


