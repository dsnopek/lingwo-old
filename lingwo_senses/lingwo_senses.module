<?php
// $Id$

/**
 * @file
 * Implements a CCK field for storing multiple dictionary senses
 */

/**
 * Implementation of hook_menu().
 */
function lingwo_senses_menu() {
  $items = array();

  $items['lingwo_senses/ahah/%'] = array(
    'title' => 'Lingwo Dictionary Senses AHAH',
    'page callback' => 'lingwo_senses_ahah',
    'page arguments' => array(2),
    // TODO: What should this be?
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK
  );

  return $items;
}

/**
 * Implementation of hook_theme().
 */
function lingwo_senses_theme() {
  return array(
    'lingwo_senses_widget' => array(
      'arguments' => array('element' => NULL),
    ),
    'lingwo_senses_original_form' => array(
      'arguments' => array('form' => NULL),
    ),
    'lingwo_senses_translation_form' => array(
      'arguments' => array('form' => NULL),
    ),
    'lingwo_senses_formatter_default' => array(
      'arguments' => array('element' => NULL),
    ),
    'lingwo_senses_original' => array(
      'arguments' => array('node' => NULL, 'items' => NULL),
    ),
    'lingwo_senses_translation' => array(
      'arguments' => array('node' => NULL, 'items' => NULL),
    ),
  );
}

/**
 * CCK hooks
 */

/**
 * Implementation of hook_field_info().
 */
function lingwo_senses_field_info() {
  return array(
    'lingwo_senses' => array(
      'label' => t('Lingwo Dictionary Senses'),
      'description' => t('Store dictionary senses in the database.'),
    ),
  );
}

/**
 * Implementation of hook_widget_info().
 */
function lingwo_senses_widget_info() {
  return array(
    'lingwo_senses_widget' => array(
      'label' => 'Lingwo Dictionary Senses Widget',
      'field types' => array('lingwo_senses'),
      'multiple values' => CONTENT_HANDLE_MODULE,
      //'multiple values' => CONTENT_HANDLE_CORE,
      'description' => t('Widget for editing senses for a dictionary entry .'),
    ),
  );
}

/**
 * Implementation of hook_field_formatter_info().
 */
function lingwo_senses_field_formatter_info() {
  return array(
    'default' => array(
      'label' => t('Lingwo Dictionary Senses Formatter'),
      'field types' => array('lingwo_senses'),
      'multiple values' => CONTENT_HANDLE_MODULE,
    ),
  );
}

/**
 * Implementation of hook_field_settings().
 */
function lingwo_senses_field_settings($op, $field) {
  switch ($op) {
    case 'database columns':
      $columns['data'] = array('type' => 'text', 'size' => 'big', 'not null' => FALSE, 'sortable' => FALSE, 'serialize' => TRUE);
      return $columns;
  }
}

/**
 * Implementation of hook_field().
 */
function lingwo_senses_field($op, &$node, $field, &$items, $teaser, $page) {
  switch ($op) {
    case 'load':
      // Content_storage does serialize each field item's columns (if the 
      // 'serialize' key for that column is set) upon writing to the db,
      // but does not unserialize when reading from the db. Hopefully,
      // this will be fixed in the future, but for now, we have to 
      // explicitly unserialize.
      if (is_array($items)) {
        foreach ($items as &$item) {
          if (is_string($item['data'])) {
            $item['data'] = unserialize($item['data']);
          }
        }
        return (array($field['field_name'] => $items));
      }
      break;

    case 'presave':
      // remove some cruft that sneaks into the data
      foreach ($items as &$item) {
        unset($item['data']['remove_sense']);
        unset($item['data']['weight']);
      }
      unset($items['wrapper']);
      break;

    case 'validate':
      return $items;
  }
}

/**
 * Implementation of hook_content_is_empty().
 */
function lingwo_senses_content_is_empty($item, $field=NULL) {
  if ($item['retire_sense']) {
    return TRUE;
  }
  if (isset($item['data']['difference'])) {
    // for originals
    if (empty($item['data']['difference']) && empty($item['data']['example'])) {
      return TRUE;
    }
  }
  else if (empty($item['data']['clue']) && empty($item['data']['trans'])) {
    // for translations
    return TRUE;
  }
  return FALSE;
}

// TODO: Hold over because we can use Fn::not() on PHP 5.2
function lingwo_senses_content_not_empty($item, $field=NULL) {
  return !lingwo_senses_content_is_empty($item, $field);
};

function lingwo_senses_widget(&$form, &$form_state, $field, $items, $delta = 0) {
  $node = $form['#node'];
  if (!isset($node)) {
    $node = (object)$form_state['node'];
  }

  $func = 'lingwo_senses_widget_'.
    (lingwo_dictionary_entry_is_translation($node) ? 'translation' : 'original');
  return $func($form, $form_state, $field, $items, $delta);
}

function lingwo_senses_widget_original(&$form, &$form_state, $field, $items, $delta = 0) {
  $field_name = $field['field_name'];
  if (isset($form_state[$field_name]['senses'])) {
    $items = $form_state[$field_name]['senses'];
  }

  $element = array(
    '#type' => 'fieldset',
    '#tree' => TRUE,
  );

  $element['wrapper'] = array(
    '#prefix' => '<div id="'. $field_name .'-wrapper">',
    '#suffix' => '</div>',
  );

  $element['wrapper']['senses'] = array(
    '#theme' => 'lingwo_senses_original_form',
    '#parents' => array($field['field_name']),
  );

  // filter out empty items
  //require_once(drupal_get_path('module', 'lingwo_dictionary') .'/includes/3rdparty/Fn.php');
  //$items = Fn::filter(Fn::not('lingwo_senses_content_is_empty')), $items);
  $items = array_filter($items, 'lingwo_senses_content_not_empty');

  // we count it as empty if there is less than 2 senses!
  if (!empty($items) && count($items) > 1) {
    $index = 0;
    foreach ($items as $sense) {
      $sense = $sense['data'];

      if (!isset($sense['id'])) {
        $sense['id'] = _ld_make_uuid();
      }

      $row['id'] = array(
        '#type' => 'hidden',
        '#value' => $sense['id'],
      );

      $row['difference'] = array(
        '#title' => 'Difference',
        '#type' => 'textfield',
        '#default_value' => $sense['difference'],
        '#maxlength' => 255,
      );
      $row['example'] = array(
        '#title' => 'Example',
        '#type' => 'textfield',
        '#default_value' => $sense['example'],
        '#maxlength' => 255,
      );
      $row['weight'] = array(
        '#type' => 'weight',
        // TODO: Delta should probably be equal to the number of definitions?
        '#delta' => 50,
        '#default_value' => $index,
      );
      if (count($items) > 2) {
        $row['remove_sense'] = array(
          '#type' => 'submit',
          '#value' => t('Remove Sense #!num', array('!num' => $index + 1)),
          '#submit' => array('lingwo_senses_remove_submit'),
          '#field_name' => $field_name,
        );
      }
      $element['wrapper']['senses'][$index]['data'] = $row;
      $index ++;
    }
  }
  $element['wrapper']['add_sense'] = array(
    '#type' => 'submit',
    '#value' => count($items) == 1 ? t('Setup multiple senses') : t('Add Another Sense'),
    '#submit' => array('lingwo_senses_add_submit'),
    '#field_name' => $field_name,
    /*
    '#ahah' => array(
      'event' => 'click',
      'path' => 'lingwo_senses/ahah/'. $field_name,
      'wrapper' => $field_name .'-wrapper',
      'effect' => 'fade',
    ),
    */
  );
  if (count($items) == 2) {
    $element['wrapper']['remove_sense'] = array(
      '#type' => 'submit',
      '#value' => t('Delete Senses'),
      '#submit' => array('lingwo_senses_remove_submit'),
      '#field_name' => $field_name,
    );
  }

  return $element;
}

function lingwo_senses_widget_translation(&$form, &$form_state, $field, $items, $delta = 0) {
  $node = $form['#node'];
  if (!isset($node)) {
    $node = (object)$form_state['node'];
  }

  $field_name = $field['field_name'];

  $senses = lingwo_senses_get_translations($node, $field_name, $items);
  $orig_senses = $node->translation_source->$field_name;
  if (count($orig_senses) == 1 && empty($orig_senses[0]['data'])) {
    $orig_senses = array();
  }

  $element = array(
    '#type' => 'fieldset',
    '#tree' => TRUE,
    '#theme' => 'lingwo_senses_translation_form',
  );

  $index = 0;
  foreach ($senses as $sense) {
    $orig_sense = $sense['orig_sense'];

    $sense_form = array();
    $sense_form['data']['id'] = array(
      '#type' => 'hidden',
      '#value' => $sense['data']['id'],
    );
    if ($orig_sense) {
      if ($orig_sense['difference']) {
        $sense_form['data']['difference'] = array(
          '#type' => 'item',
          '#title' => t('Difference'),
          '#value' => $orig_sense['difference'],
        );
      }
      if ($orig_sense['example']) {
        $sense_form['data']['example'] = array(
          '#type' => 'item',
          '#title' => t('Example'),
          '#value' => $orig_sense['example'],
        );
      }
    }
    if ($sense['data']['id'] != '*') {
      $sense_form['data']['clue'] = array(
        '#type' => 'textfield',
        '#title' => t('Clue'),
        '#description' => t('A couple words that will clue the reader to how this sense is different.'),
        '#default_value' => $sense['data']['clue'],
        '#maxlength' => 255,
      );
    }
    if (!$orig_sense && !($sense['data']['id'] == '*' && count($orig_senses) == 0)) {
      $sense_form['old_sense_message'] = array(
        '#prefix' => '<div class="lingwo-sense-old-message">* ',
        '#value' => t('This translation is for a sense that has been removed from the entry.'),
        '#suffix' => '</div>',
      );
      $sense_form['retire_sense'] = array(
        '#type' => 'checkbox',
        '#title' => t('Retire this obsolete sense.'),
      );
    }
    $sense_form['data']['trans'] = array();
    for ($t = 0; $t < max(3, count($sense['values'])); $t++) {
      $sense_form['data']['trans'][$t] = array(
        '#type' => 'textfield',
        '#default_value' => $sense['data']['trans'][$t]
      );
    }
    $sense_form['data']['trans']['0']['#title'] = t('Translation');

    $element[$index++] = $sense_form;
  }

  return $element;
}

/* Takes an entry and a trans and makes a list of trans senses in the appropriate
 * order, connected to the entry senses if one exists.
 */
function lingwo_senses_get_translations(&$node, $field_name, $items) {
  if (empty($node->translation_source)) {
    $node->translation_source = node_load($node->tnid);
  }

  $orig = $node->translation_source;
  $orig_senses = isset($orig) ? $orig->$field_name : array();
  if (count($orig_senses) == 1 && empty($orig_senses[0]['data'])) {
    $orig_senses = array();
  }

  $trans_map = array();
  $trans_senses = $node->nid ? $items : NULL;
  if (count($trans_senses) == 1 && empty($trans_senses[0]['data'])) {
    $trans_senses = array();
  }
  if (!empty($trans_senses)) {
    foreach ($trans_senses as $trans_sense) {
      $trans_map[$trans_sense['data']['id']] = $trans_sense;
    }
  }

  $senses = array();

  if (isset($orig_senses) && count($orig_senses) > 0) {
    foreach ($orig_senses as $sense) {
      $trans_sense = $trans_map[$sense['data']['id']];
      $trans_sense['orig_sense'] = $sense['data'];
      $trans_sense['data']['id'] = $sense['data']['id'];
      
      $senses[] = $trans_sense;
      unset($trans_map[$sense['data']['id']]);
    }
  }

  if (count($senses) == 0) {
    if ($trans_map && isset($trans_map['*'])) {
      $only_sense = $trans_map['*'];
    }
    else {
      $only_sense = array('data' => array('id' => '*'));
    }
    $senses[] = $only_sense;
    unset($trans_map['*']);
  }

  foreach ($trans_map as $id => $trans_sense) {
    $trans_sense['data']['id'] = $id;
    $senses[] = $trans_sense;
  }

  return $senses;
}

function _lingwo_senses_from_form($form, &$form_state) {
  $node = _ld_form_to_node($form, $form_state);
  $field_name = $form_state['clicked_button']['#field_name'];

  $senses = $form_state['values'][$field_name];
  if ($senses) {
    foreach ($senses as $index => $sense) {
      if (is_numeric($index)) {
        $weight[] = $sense['data']['weight'];
        unset($sense['data']['weight'], $sense['data']['remove_sense']);
        $values[] = $sense;
      }
    }
    if (!empty($values)) {
      array_multisort($weight, SORT_ASC, $values);
    }
    $senses = $values;
  }
  else {
    $senses = array();
  }

  $form_state[$field_name]['senses'] = $senses;
  return $senses;
}

function lingwo_senses_add_submit($form, &$form_state) {
  $senses = _lingwo_senses_from_form($form, $form_state);
  $field_name = $form_state['clicked_button']['#field_name'];
  
  if (count($senses) > 1) {
    $form_state[$field_name]['senses'][] = array();
  }
  else {
    $form_state[$field_name]['senses'] = array( array(), array() );
  }
}

function lingwo_senses_remove_submit($form, &$form_state) {
  $senses = _lingwo_senses_from_form($form, $form_state);
  $field_name = $form_state['clicked_button']['#field_name'];
  
  if (count($senses) == 2) {
    $form_state[$field_name]['senses'] = array();
  }
  else {
    $delta = $form_state['clicked_button']['#parents'][1];
    unset($form_state[$field_name]['senses'][$delta]);
  }
}

function lingwo_senses_ahah($field_name) {
  module_load_include('inc', 'node', 'node.pages');
  $form_state = array('storage' => NULL, 'submitted' => FALSE);
  $form_build_id = $_POST['form_build_id'];

  $form = form_get_cache($form_build_id, $form_state);

  _ld_disable_validation($form);

  $args = $form['#parameters'];
  $form_id = array_shift($args);
  $form_state['post'] = $form['#post'] = $_POST;
  $form['#post']['form_id'] = $form_id;
  $form['#programmed'] = $form['#redirect'] = FALSE;

  drupal_process_form($form_id, $form, $form_state);

  $form = drupal_rebuild_form($form_id, $form_state, $args, $form_build_id);

  $element = $form[$field_name]['wrapper']; 
  unset($element['#prefix'], $element['#suffix']);
  $output = theme('status_messages') . drupal_render($element);

  drupal_json(array('status' => TRUE, 'data' => $output));
}

function theme_lingwo_senses_original_form($form) {
  drupal_add_tabledrag('lingwo-definition-table', 'order', 'sibling', 'sense-weight');

  $elements = element_children($form);
  if (empty($elements)) {
    return '';
  }

  $header = array(
    '',
    t('Sense'),
    t('Weight'),
  );

  if (count($elements) > 2) {
    $header[] = t('Operations');
  }

  $rows = array();
  foreach (element_children($form) as $key) {
    $element = &$form[$key]['data'];
    $element['weight']['#attributes']['class'] = 'sense-weight';

    $weight = drupal_render($element['weight']);
    $delete = drupal_render($element['remove_sense']);

    $row = array();
    $row[] = '';
    $row[] = drupal_render($element);
    $row[] = $weight;

    if (count($elements) > 2) {
      $row[] = $delete;
    }

    $row = array('data' => $row);
    $row['class'] = !empty($row['class']) ? $row['class'] .' draggable' : 'draggable';
    $rows[] = $row;
  }

  return theme('table', $header, $rows, array('id' => 'lingwo-definition-table'));
}

function theme_lingwo_senses_translation_form($form) {
  $header = array(
    t('No.'),
    array('data' => t('Sense'), 'colspan' => 2),
  );

  $rows = array();
  $elements = element_children($form);
  foreach ($elements as $key) {
    $row = array();
    $row[] = ($key + 1);

    if (count($elements) > 1) {
      // split into trans in column 2 and everything else in column 1
      $trans = drupal_render($form[$key]['trans']);
      $row[] = drupal_render($form[$key]);
      $row[] = $trans;
    }
    else {
      $row[] = array('data' => drupal_render($form[$key]), 'colspan' => 2);
    }

    $rows[] = $row;
  }

  return theme('table', $header, $rows);
}

function theme_lingwo_senses_formatter_default($element) {
  $field_name = $element['#field_name'];
  $node = $element['#node'];
  $items = $node->$field_name;

  $theme = 'lingwo_senses';
  if (isset($node->translation_source) || ($node->nid && $node->tnid && $node->nid != $node->tnid)) {
    $items = lingwo_senses_get_translations($node, $field_name, $items);
    $theme = $theme .'_translation';
  }
  else {
    $theme = $theme .'_original';
  }

  // filter out empty items
  //require_once(drupal_get_path('module', 'lingwo_dictionary') .'/includes/3rdparty/Fn.php');
  //$items = Fn::filter(Fn::not('lingwo_senses_content_is_empty')), $items);
  $items = array_filter($items, 'lingwo_senses_content_not_empty');

  return theme($theme, $node, $items);
}

function theme_lingwo_senses_original($node, $items) {
  if (!empty($items)) {
    $output .= '<div class="lingwo-entry">';
    $output .= '<ol class="lingwo-sense-list">';
    foreach ($items as $sense) {
      $sense = $sense['data'];

      $output .= '<li class="lingwo-sense">';
      if ($sense['difference']) {
        $output .= '<span class="lingwo-sense-difference">'. $sense['difference'] .'</span>';
      }
      else {
        $output .= '<span class="lingwo-sense-nodifference">(';
        $output .= t('No difference given');
        $output .= ')</span>';
      }
      if ($sense['example']) {
        $output .= ': <blockquote class="lingwo-example">"'. $sense['example'] .'"</blockquote>';
      }
      $output .= '</li>';
    };
    $output .= '</ol>';
    $output .= '</div>';
  }
  else {
    $output .= '<p>'. t('No sense distinctions.') .'</p>';
  }

  drupal_add_css(drupal_get_path('module', 'lingwo_dictionary') .'/lingwo_dictionary.css');
  return $output;
}

function theme_lingwo_senses_translation($node, $items) {
  $output = '';
  $output .= '<div class="lingwo-entry">';
  $output .= '<ol class="lingwo-sense-list">';

  $without_translations = 0;
  foreach ($items as $sense) {
    $orig_sense = $sense['orig_sense'];
    $sense = $sense['data'];
    
    $values = array();
    if (!empty($sense['trans'])) {
      foreach ($sense['trans'] as $value) {
        if (!empty($value)) {
          // TODO: re-instate this!
          //$values[] = l($value, 'entry/'. $trans->target_lang .'/'. $entry->pos .'/'. $value);
          $values[] = $value;
        }
      }
    }
    if (empty($values)) {
      //$output .= t('No translation');
      $without_translations++;
      continue;
    }

    $output .= '<li class="lingwo-sense">';
    if ($sense['clue']) {
      $output .= '<span class="lingwo-sense-clue">('. $sense['clue'] .')</span> ';
    }

    $output .= join(', ', $values);

    if (!empty($orig_sense['example'])) {
      $output .= ': <blockquote class="lingwo-example">"'. $orig_sense['example'] .'"</blockquote>';
    }
    $output .= '</li>';
  };
  $output .= '</ol>';

  // TODO: while this is an awesome idea, it has problems.  (1) it doesn't belong in lingwo_senses
  // because it is UX.  It should go in the theme or lingwoorg_dictionary. (2) it doesn't check
  // for edit permissions.  I've added trac ticket #42 to try and re-instate it somewhere.
  /*
  if ($without_translations > 0) {
    $output .= '<p>';
    $output .= t('There are @count senses without translations.', array('@count' => $without_translations));
    $output .= '  ';
    $output .= l(t('Edit this entry and contribute!'), 'node/'. $node->nid .'/edit');
    $output .= '</p>';
  }
  */

  $output .= '</div>';

  drupal_add_css(drupal_get_path('module', 'lingwo_dictionary') .'/lingwo_dictionary.css');
  return $output;
}

