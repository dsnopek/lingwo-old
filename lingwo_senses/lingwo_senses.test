<?php

module_load_include('inc', 'lingwo_dictionary', 'lingwo_dictionary.test');

class LingwoSensesTestCase extends LingwoDictionaryWebTestCase {
  public static function getInfo() {
    return array(
      'name' => 'lingwo_senses',
      'description' => 'Testing the web functionality provided by lingwo_senses.',
      'group' => 'Lingwo Dictionary',
    );
  }

  public function setUp() {
    parent::setUp('lingwo_senses');

    $this->createField(array(
      'label'       => 'Senses',
      'field_name'  => 'senses',
      'type'        => 'lingwo_senses',
      'widget_type' => 'lingwo_senses_widget',
      'multiple'    => 1
    ));
  }

  public function doSingleSense() {
    $entry_type = lingwo_dictionary_settings('entry_content_type');

    // create the entry
    $this->createEntry(array(
      'headword' => 'czerwony',
      'language' => 'pl',
      'pos' => 'Adjective'
    ));
    $this->assertText(t('@type czerwony has been created.', array('@type' => $entry_type)));

    // get the node id for this entry
    $nid = lingwo_dictionary_entry_lookup('czerwony', 'pl', 'adjective');
    if (!$nid) {
      $this->fail("Couldn't get the node ID for the entry");
      return;
    }

    // load the node and make sure it has one sense with an ID
    $node = node_load($nid);
    $this->assertFalse(empty($node->field_senses[0]['id']));

    // add a translation
    $trans = array(
      'field_senses[0][data][trans][0]' => $this->randomName(12),
    );
    $this->drupalPost('node/add/'. $entry_type, $trans, 'Save', array(
      'query' => array(
        'translation' => $nid,
        'language' => 'en'
      )
    ));
    $this->assertText(t('@type czerwony has been created.', array('@type' => $entry_type)));
    $this->assertText($trans['field_senses[0][data][trans][0]']);

    // get the nid of the translation
    $trans_nodes = translation_node_get_translations($nid);
    $tnid = $trans_nodes['en']->nid;

    return array($nid, $tnid, $trans['field_senses[0][data][trans][0]']);
  }

  public function doSingleToMultipleSenses($nid, $tnid, $orig_trans) {
    $orig_sense_id = node_load($nid)->field_senses[0]['id'];
    $this->drupalPost("node/$nid/edit", array(), 'Setup multiple senses');
    $this->assertFieldByName('field_senses[0][id]', $orig_sense_id);

    $diffs = array();
    $trans = array();
    for($i = 0; $i < 3; $i++) {
      $diffs[$i] = $this->randomName(12);
      $trans[$i] = $this->randomName(12);
    }

    // add two of the senses and then add a third
    $this->drupalPost(NULL, array(
      'field_senses[0][data][difference]' => '',
      'field_senses[1][data][difference]' => $diffs[0]
    ), 'Add another sense');

    // another sense
    $this->drupalPost(NULL, array(
      'field_senses[2][data][difference]' => $diffs[1]
    ), 'Add another sense');

    // fill in the last sense and remove the original
    $this->drupalPost(NULL, array(
      'field_senses[3][data][difference]' => $diffs[2]
    ), 'Remove Sense #1');

    // save
    $this->drupalPost(NULL, array(), 'Save');

    // check that they are all on there
    foreach ($diffs as $diff) {
      $this->assertText($diff);
    }

    // Check that the UI is right for editing the translation:
    $this->drupalGet("node/$tnid/edit");
    //   (1a) Original translation should be last,
    $this->assertFieldByName('field_senses[3][id]', $orig_sense_id);
    //   (1b) and should have the obsolete checkbox.
    $this->assertFieldByName('field_senses[3][retire_sense]');
    //   (2a) New senses are displayed first (empty trans),
    // TODO: Not sure how to check this simply.
    //   (2b) and don't have the obsolete checkbox.
    $this->assertNoFieldByName('field_senses[0][retire_sense]');
    $this->assertNoFieldByName('field_senses[1][retire_sense]');
    $this->assertNoFieldByName('field_senses[2][retire_sense]');

    // Entry clue and translation data for the three new senses
    $edit = array();
    for($i = 0; $i < 3; $i++) {
      $edit["field_senses[$i][data][clue]"] = $i;
      $edit["field_senses[$i][data][trans][0]"] = $trans[$i];
    }
    $this->drupalPost(NULL, $edit, 'Save');
    // both old and new senses should be there
    $this->assertText($orig_trans);
    foreach($trans as $t) {
      $this->assertText($t);
    }

    // Mark the original sense for removal
    $this->drupalPost("node/$tnid/edit", array('field_senses[3][retire_sense]' => TRUE), 'Save');
    // now the old one should be gone, and the new ones remain
    $this->assertNoText($orig_trans);
    foreach($trans as $t) {
      $this->assertText($t);
    }

    return array($diffs, $trans);
  }

  public function doMultipleSensesRemoveOne($nid, $tnid, $diffs, $trans) {
    // remove the middle sense
    $this->drupalPost("node/$nid/edit", array(), 'Remove Sense #2');
    $this->drupalPost(NULL, array(), 'Save');
    // see that the first and last are still there, but not the middle
    $this->assertText($diffs[0]);
    $this->assertNoText($diffs[1]);
    $this->assertText($diffs[2]);

    // Check that the UI is right for editing the translation:
    $this->drupalGet("node/$tnid/edit");
    //   (1a) Removed translation should be last,
    $this->assertFieldByName('field_senses[2][data][clue]', '1');
    //   (1b) and should have the obsolete checkbox.
    $this->assertFieldByName('field_senses[2][retire_sense]');
    //   (2a) Remaining senses are displayed first,
    $this->assertFieldByName('field_senses[0][data][clue]', '0');
    $this->assertFieldByName('field_senses[1][data][clue]', '2');
    //   (2b) and don't have the obsolete checkbox.
    $this->assertNoFieldByName('field_senses[0][data][retire_sense]');
    $this->assertNoFieldByName('field_senses[1][data][retire_sense]');

    // Mark the original sense for removal
    $this->drupalPost("node/$tnid/edit", array('field_senses[2][retire_sense]' => TRUE), 'Save');
    // now the old one should be gone, and the new ones remain
    $this->assertText($trans[0]);
    $this->assertNoText($trans[1]);
    $this->assertText($trans[2]);

    unset($diffs[1]);
    unset($trans[1]);

    return array($diffs, $trans);
  }

  public function doMultipleToSingleSenses($nid, $tnid, $diffs, $trans) {
    // Delete senses from source entry
    $this->drupalPost("node/$nid/edit", array(), 'Remove Sense #2');
    $this->drupalPost(NULL, array(), 'Save');
    // The differences should be gone!
    foreach($diffs as $d) {
      $this->assertNoText($d);
    }

    // Check that the UI is right for editing the translation:
    $this->drupalGet("node/$tnid/edit");
    //   (1) First translation should NOT have the obsolete checkbox.
    $this->assertNoFieldByName('field_senses[0][retire_sense]');
    //   (2a) Removed senses are displayed last,
    $this->assertFieldByName('field_senses[1][data][clue]', '2');
    //   (2b) and have the obsolete checkboxes.
    $this->assertFieldByName('field_senses[1][retire_sense]');

    // Add a translation for the new sense and mark the others for removal
    $edit = array(
      'field_senses[0][data][trans][0]' => $this->randomName(12),
      'field_senses[1][retire_sense]' => TRUE,
    );
    $this->drupalPost("node/$tnid/edit", $edit, 'Save');
    // now the old ones should be gone, and the new one remains
    $this->assertText($edit['field_senses[0][data][trans][0]']);
    foreach($trans as $t) {
      $this->assertNoText($t);
    }

    return $edit['field_senses[0][data][trans][0]'];
  }

  public function testWorkflow() {
    list($nid, $tnid, $orig_trans) = $this->doSingleSense();
    list($diffs, $trans) = $this->doSingleToMultipleSenses($nid, $tnid, $orig_trans);
    list($diffs, $trans) = $this->doMultipleSensesRemoveOne($nid, $tnid, $diffs, $trans);
    $orig_trans = $this->doMultipleToSingleSenses($nid, $tnid, $diffs, $trans);
  }
}

