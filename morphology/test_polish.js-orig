
dojo.require('Lingwo.common');
dojo.require('Lingwo.parser');
dojo.require('Lingwo.rule');
dojo.require('Lingwo.dictionary');
dojo.require('Lingwo.test');

dojo.require('dojo.dom');

dojo.declare('PolishTest', Lingwo.test.TestCase,
{
	initializer: function ()
	{
		//this.lang = Lingwo.parser.loadLanguage('language/pl.xml', 'language/pl/dictionary.xml');
		this.lang = Lingwo.test.loadLanguage('pl');

		// Enabling the cache is safe because we don't test mutating anything.
		this.lang.dictionary.use_cache = 1;
	},

	get_entry: function (name)
	{
		return this.lang.dictionary.get_entry(name);
	},

	testJaki: function ()
	{
		var entry = this.get_entry('jaki');
		this.assertEquals(entry.get_form('nominative.singular.masculine').str(), 'jaki');
		this.assertEquals(entry.get_form('nominative.singular.feminine').str(),  'jaka');
		this.assertEquals(entry.get_form('nominative.singular.neuter').str(),    'jakie');
	},

	testNounGenderMasculine: function ()
	{
		var entry_names = [ 
			'stół', 'kot', 'pokój', 'chłopiec', 'kolega', 'dentysta', 'mężczyzna'
		];

		for ( var i = 0; i < entry_names.length; i++ )
		{
			var entry = this.get_entry(entry_names[i]);
			this.assertEquals(entry.get_option('gender'), 'masculine', entry.get_value());
		}
	},

	testNounGenderFeminine: function ()
	{
		var entry_names = [
			'kobieta', 'ulica', 'Polska', 'gospodyni', 'noc', 'część', 'jesień', 'wieś', 'mysz', 'miłość', 'ciekawość'
		];

		for ( var i = 0; i < entry_names.length; i++ )
		{
			var entry = this.get_entry(entry_names[i]);
			this.assertEquals(entry.get_option('gender'), 'feminine', entry.get_value());
		}
	},

	testNounGenderNeuter: function ()
	{
		var entry_names = [
			'okno', 'dziecko', 'życie', 'imię', 'szczenię', 'zwierzę', 'niemowlę', 'muzeum', 'gimnazjum'
		];

		for ( var i = 0; i < entry_names.length; i++ )
		{
			var entry = this.get_entry(entry_names[i]);
			this.assertEquals(entry.get_option('gender'), 'neuter', entry.get_value());
		}
	},

	testAdjectiveSoft: function ()
	{
		var entry_names = [
			'głupi', 'tani', 'trzeci', 'ostatni', 'średni'
		];

		for ( var i = 0; i < entry_names.length; i++ )
		{
			var entry = this.get_entry(entry_names[i]);
			this.assert(entry.is_class('soft'), entry_names[i]+" -> is_class('soft')");
		}
	},

	testAdjectiveFormStem: function ()
	{
		var entry = this.get_entry("mały");
		var word = entry.get_form('stem');
		this.assertEquals(entry.get_form('stem').str(), "mał", "form 'stem'");
	},

	testAdjectiveNominativeSingularMasculine: function ()
	{
		var form = "nominative.singular.masculine";
		this.assertEquals(this.get_entry('mały').get_form(form).str(), 'mały', form);
		this.assertEquals(this.get_entry('wysoki').get_form(form).str(), 'wysoki', form);
		this.assertEquals(this.get_entry('drogi').get_form(form).str(), 'drogi', form);
		this.assertEquals(this.get_entry('głupi').get_form(form).str(), 'głupi', form);
	},

	testAdjectiveNominativeSingularFeminine: function ()
	{
		var form = "nominative.singular.feminine";
		this.assertEquals(this.get_entry('mały').get_form(form).str(), 'mała', form);
		this.assertEquals(this.get_entry('wysoki').get_form(form).str(), 'wysoka', form);
		this.assertEquals(this.get_entry('drogi').get_form(form).str(), 'droga', form);
		this.assertEquals(this.get_entry('głupi').get_form(form).str(), 'głupia', form);
	},

	testAdjectiveNominativeSingularNeuter: function ()
	{
		var form = "nominative.singular.neuter";
		this.assertEquals(this.get_entry('mały').get_form(form).str(), 'małe', form);
		this.assertEquals(this.get_entry('wysoki').get_form(form).str(), 'wysokie', form);
		this.assertEquals(this.get_entry('drogi').get_form(form).str(), 'drogie', form);
		this.assertEquals(this.get_entry('głupi').get_form(form).str(), 'głupie', form);
	},

	testToBeNonPast: function ()
	{
		var entry = this.get_entry("być");
		this.assertEquals(entry.get_form('nonpast.singular.1p').str(), 'jestem');
		this.assertEquals(entry.get_form('nonpast.singular.2p').str(), 'jesteś');
		this.assertEquals(entry.get_form('nonpast.singular.3p').str(), 'jest');
		this.assertEquals(entry.get_form('nonpast.plural.1p').str(), 'jesteśmy');
		this.assertEquals(entry.get_form('nonpast.plural.2p').str(), 'jesteście');
		this.assertEquals(entry.get_form('nonpast.plural.3p').str(), 'są');
	},

	testNounMasculineNonVirilePlural: function ()
	{
		var form = "nominative.plural";

		// -y group
		this.assertEquals(this.get_entry('dom').get_form(form).str(), 'domy', form);
		this.assertEquals(this.get_entry('kot').get_form(form).str(), 'koty', form);
		this.assertEquals(this.get_entry('sklep').get_form(form).str(), 'sklepy', form);
		this.assertEquals(this.get_entry('stół').get_form(form).str(), 'stoły', form);
		this.assertEquals(this.get_entry('ząb').get_form(form).str(), 'zęby', form);
		this.assertEquals(this.get_entry('kościół').get_form(form).str(), 'kościoły', form);
		this.assertEquals(this.get_entry('samochód').get_form(form).str(), 'samochody', form);

		// -i group
		this.assertEquals(this.get_entry('bank').get_form(form).str(), 'banki', form);
		this.assertEquals(this.get_entry('ptak').get_form(form).str(), 'ptaki', form);
		this.assertEquals(this.get_entry('dzwonek').get_form(form).str(), 'dzwonki', form);
		this.assertEquals(this.get_entry('róg').get_form(form).str(), 'rogi', form);
		this.assertEquals(this.get_entry('pociąg').get_form(form).str(), 'pociągi', form);

		// -e group
		this.assertEquals(this.get_entry('kraj').get_form(form).str(), 'kraje', form);
		this.assertEquals(this.get_entry('pokój').get_form(form).str(), 'pokoje', form);
		this.assertEquals(this.get_entry('parasol').get_form(form).str(), 'parasole', form);
		this.assertEquals(this.get_entry('hotel').get_form(form).str(), 'hotele', form);
		this.assertEquals(this.get_entry('szpital').get_form(form).str(), 'szpitale', form);
		this.assertEquals(this.get_entry('pałac').get_form(form).str(), 'pałace', form);
		this.assertEquals(this.get_entry('tysiąc').get_form(form).str(), 'tysiące', form);
		this.assertEquals(this.get_entry('pieniądz').get_form(form).str(), 'pieniądze', form);
		this.assertEquals(this.get_entry('grosz').get_form(form).str(), 'grosze', form);
		this.assertEquals(this.get_entry('nóż').get_form(form).str(), 'noże', form);
		this.assertEquals(this.get_entry('miesiąc').get_form(form).str(), 'miesiące', form);
		this.assertEquals(this.get_entry('talerz').get_form(form).str(), 'talerze', form);
		this.assertEquals(this.get_entry('klucz').get_form(form).str(), 'klucze', form);

		// -ie group
		this.assertEquals(this.get_entry('koń').get_form(form).str(), 'konie', form);
		this.assertEquals(this.get_entry('ogień').get_form(form).str(), 'ognie', form);
		this.assertEquals(this.get_entry('tydzień').get_form(form).str(), 'tygodnie', form);
		this.assertEquals(this.get_entry('liść').get_form(form).str(), 'liście', form);
		this.assertEquals(this.get_entry('niedźwiedź').get_form(form).str(), 'niedźwiedzie', form);
		this.assertEquals(this.get_entry('gołąb').get_form(form).str(), 'gołębie', form);
		this.assertEquals(this.get_entry('karp').get_form(form).str(), 'karpie', form);
	},

	testNounFemininePlural: function ()
	{
		var form = "nominative.plural";

		// -y group
		this.assertEquals(this.get_entry('kobieta').get_form(form).str(), 'kobiety', form);
		this.assertEquals(this.get_entry('szkoła').get_form(form).str(), 'szkoły', form);
		this.assertEquals(this.get_entry('gwiazda').get_form(form).str(), 'gwiazdy', form);
		this.assertEquals(this.get_entry('ryba').get_form(form).str(), 'ryby', form);
		this.assertEquals(this.get_entry('siostra').get_form(form).str(), 'siostry', form);
		this.assertEquals(this.get_entry('kiełbasa').get_form(form).str(), 'kiełbasy', form);
		this.assertEquals(this.get_entry('mysz').get_form(form).str(), 'myszy', form);
		this.assertEquals(this.get_entry('rzecz').get_form(form).str(), 'rzeczy', form);

		// -i group
		this.assertEquals(this.get_entry('matka').get_form(form).str(), 'matki', form);
		this.assertEquals(this.get_entry('córka').get_form(form).str(), 'córki', form);
		this.assertEquals(this.get_entry('droga').get_form(form).str(), 'drogi', form);
		this.assertEquals(this.get_entry('Polka').get_form(form).str(), 'Polki', form);
		this.assertEquals(this.get_entry('figa').get_form(form).str(), 'figi', form);

		// an exception: (in the -e group, not the -i as you would expect)
		this.assertEquals(this.get_entry('ręka').get_form(form).str(), 'ręce', form);

		// -e group
		this.assertEquals(this.get_entry('lekcja').get_form(form).str(), 'lekcje', form);
		this.assertEquals(this.get_entry('kolej').get_form(form).str(), 'koleje', form);
		this.assertEquals(this.get_entry('kąpiel').get_form(form).str(), 'kąpiele', form);
		this.assertEquals(this.get_entry('chwila').get_form(form).str(), 'chwile', form);
		this.assertEquals(this.get_entry('aleja').get_form(form).str(), 'aleje', form);
		this.assertEquals(this.get_entry('sala').get_form(form).str(), 'sale', form);
		this.assertEquals(this.get_entry('babcia').get_form(form).str(), 'babcie', form);
		this.assertEquals(this.get_entry('kuchnia').get_form(form).str(), 'kuchnie', form);
		this.assertEquals(this.get_entry('historia').get_form(form).str(), 'historie', form);
		this.assertEquals(this.get_entry('gospodyni').get_form(form).str(), 'gospodynie', form);
		this.assertEquals(this.get_entry('noc').get_form(form).str(), 'noce', form);
		this.assertEquals(this.get_entry('ulica').get_form(form).str(), 'ulice', form);
		this.assertEquals(this.get_entry('tęcza').get_form(form).str(), 'tęcze', form);
		this.assertEquals(this.get_entry('burza').get_form(form).str(), 'burze', form);
		this.assertEquals(this.get_entry('wieża').get_form(form).str(), 'wieże', form);
		this.assertEquals(this.get_entry('podróż').get_form(form).str(), 'podróże', form);
		this.assertEquals(this.get_entry('owca').get_form(form).str(), 'owce', form);
		this.assertEquals(this.get_entry('róża').get_form(form).str(), 'róże', form);
		this.assertEquals(this.get_entry('grusza').get_form(form).str(), 'grusze', form);

		// -i group (we consider this group an exception because its unpredictable, except for -ość)
		this.assertEquals(this.get_entry('miłość').get_form(form).str(), 'miłości', form);
		this.assertEquals(this.get_entry('opowieść').get_form(form).str(), 'opowieści', form);
		this.assertEquals(this.get_entry('nić').get_form(form).str(), 'nici', form);
		this.assertEquals(this.get_entry('pieśń').get_form(form).str(), 'pieśni', form);
		this.assertEquals(this.get_entry('przyjaźń').get_form(form).str(), 'przyjaźni', form);

		// -ie group
		this.assertEquals(this.get_entry('jabłoń').get_form(form).str(), 'jabłonie', form);
		this.assertEquals(this.get_entry('łódź').get_form(form).str(), 'łodzie', form);
		this.assertEquals(this.get_entry('gałąź').get_form(form).str(), 'gałęzie', form);
		this.assertEquals(this.get_entry('wieś').get_form(form).str(), 'wsie', form);
	},

	testNounNeuterPlural: function ()
	{
		var form = "nominative.plural";

		// -a group
		this.assertEquals(this.get_entry('jabłko').get_form(form).str(), 'jabłka', form);
		this.assertEquals(this.get_entry('morze').get_form(form).str(), 'morza', form);
		this.assertEquals(this.get_entry('krzesło').get_form(form).str(), 'krzesła', form);
		this.assertEquals(this.get_entry('pole').get_form(form).str(), 'pola', form);
		this.assertEquals(this.get_entry('zdjęcie').get_form(form).str(), 'zdjęcia', form);
		this.assertEquals(this.get_entry('muzeum').get_form(form).str(), 'muzea', form);

		// -iona group
		this.assertEquals(this.get_entry('imię').get_form(form).str(), 'imiona', form);
		this.assertEquals(this.get_entry('ramię').get_form(form).str(), 'ramiona', form);

		// -eta group
		this.assertEquals(this.get_entry('jagnię').get_form(form).str(), 'jagnięta', form);
		//this.assertEquals(this.get_entry('źrebię').get_form(form).str(), 'źrebięta', form);
		this.assertEquals(this.get_entry('prosię').get_form(form).str(), 'prosięta', form);
		this.assertEquals(this.get_entry('kurczę').get_form(form).str(), 'kurczęta', form);
		this.assertEquals(this.get_entry('zwierzę').get_form(form).str(), 'zwierzęta', form);
		this.assertEquals(this.get_entry('dziewczę').get_form(form).str(), 'dziewczęta', form);
		this.assertEquals(this.get_entry('niemowlę').get_form(form).str(), 'niemowlęta', form);
	},

	testAdjectiveNominativePluralNonVirile: function ()
	{
		var form = "nominative.plural.non_virile";

		this.assertEquals(this.get_entry('mały').get_form(form).str(), 'małe', form);
		this.assertEquals(this.get_entry('młody').get_form(form).str(), 'młode', form);
		this.assertEquals(this.get_entry('duży').get_form(form).str(), 'duże', form);
		this.assertEquals(this.get_entry('niski').get_form(form).str(), 'niskie', form);
		this.assertEquals(this.get_entry('drogi').get_form(form).str(), 'drogie', form);
		this.assertEquals(this.get_entry('głupi').get_form(form).str(), 'głupie', form);
	},

	testNounMasculinePluralVirile: function ()
	{
		var form = "nominative.plural";

		// -y group (hard which remains hard)
		this.assertEquals(this.get_entry('Polak').get_form(form).str(), 'Polacy', form);
		this.assertEquals(this.get_entry('Chińczyk').get_form(form).str(), 'Chińczycy', form);
		this.assertEquals(this.get_entry('Anglik').get_form(form).str(), 'Anglicy', form);
		this.assertEquals(this.get_entry('kaleka').get_form(form).str(), 'kalecy', form);
		this.assertEquals(this.get_entry('Norweg').get_form(form).str(), 'Norwedzy', form);
		this.assertEquals(this.get_entry('kolega').get_form(form).str(), 'koledzy', form);
		this.assertEquals(this.get_entry('inżynier').get_form(form).str(), 'inżynierzy', form);
		this.assertEquals(this.get_entry('kelner').get_form(form).str(), 'kelnerzy', form);
		this.assertEquals(this.get_entry('doktor').get_form(form).str(), 'doktorzy', form);
		this.assertEquals(this.get_entry('kierowca').get_form(form).str(), 'kierowcy', form);
		this.assertEquals(this.get_entry('chłopiec').get_form(form).str(), 'chłopcy', form);
		this.assertEquals(this.get_entry('sprzedawca').get_form(form).str(), 'sprzedawcy', form);
		this.assertEquals(this.get_entry('Niemiec').get_form(form).str(), 'Niemcy', form);
		this.assertEquals(this.get_entry('mieszkaniec').get_form(form).str(), 'mieszkańcy', form);

		// -e group (soft and psuedo soft)
		this.assertEquals(this.get_entry('lekarz').get_form(form).str(), 'lekarze', form);
		this.assertEquals(this.get_entry('złodziej').get_form(form).str(), 'złodzieje', form);
		this.assertEquals(this.get_entry('towarzysz').get_form(form).str(), 'towarzysze', form);
		this.assertEquals(this.get_entry('słuchacz').get_form(form).str(), 'słuchacze', form);
		this.assertEquals(this.get_entry('nauczyciel').get_form(form).str(), 'nauczyciele', form);
		this.assertEquals(this.get_entry('góral').get_form(form).str(), 'górale', form);

		// -i group (from hard to soft)
		this.assertEquals(this.get_entry('Francuz').get_form(form).str(), 'Francuzi', form);
		this.assertEquals(this.get_entry('mężczyzna').get_form(form).str(), 'mężczyźni', form);
		this.assertEquals(this.get_entry('chłop').get_form(form).str(), 'chłopi', form);
		this.assertEquals(this.get_entry('student').get_form(form).str(), 'studenci', form);
		this.assertEquals(this.get_entry('architekt').get_form(form).str(), 'architekci', form);
		this.assertEquals(this.get_entry('poeta').get_form(form).str(), 'poeci', form);
		this.assertEquals(this.get_entry('dentysta').get_form(form).str(), 'dentyści', form);
		this.assertEquals(this.get_entry('specjalista').get_form(form).str(), 'specjaliści', form);
		this.assertEquals(this.get_entry('turysta').get_form(form).str(), 'turyści', form);
		this.assertEquals(this.get_entry('Czech').get_form(form).str(), 'Czesi', form);
		this.assertEquals(this.get_entry('Włoch').get_form(form).str(), 'Wlosi', form);
		this.assertEquals(this.get_entry('sąsiad').get_form(form).str(), 'sąsiedzi', form);
		this.assertEquals(this.get_entry('Szwed').get_form(form).str(), 'Szwedzi', form);
		this.assertEquals(this.get_entry('diabeł').get_form(form).str(), 'diabli', form);

		// -owie (we are treating these as exceptions)
		this.assertEquals(this.get_entry('syn').get_form(form).str(), 'synowie', form);
		this.assertEquals(this.get_entry('mąż').get_form(form).str(), 'mężowie', form);
		this.assertEquals(this.get_entry('Belg').get_form(form).str(), 'Belgowie', form);
		this.assertEquals(this.get_entry('professor').get_form(form).str(), 'professorowie', form);
		this.assertEquals(this.get_entry('uczeń').get_form(form).str(), 'uczniowie', form);
		this.assertEquals(this.get_entry('więzień').get_form(form).str(), 'więźniowie', form);

		// exceptions, pure.
		this.assertEquals(this.get_entry('brat').get_form(form).str(), 'bracia', form);
		//this.assertEquals(this.get_entry('ksiądz').get_form(form).str(), 'księża', form);
		this.assertEquals(this.get_entry('Amerykanin').get_form(form).str(), 'Amerykanie', form);
		this.assertEquals(this.get_entry('Rosjanin').get_form(form).str(), 'Rosjanie', form);
	},

	testAdjectiveNominativePluralVirile: function ()
	{
		var form = "nominative.plural.virile";

		// -y group (hard which remain hard)
		this.assertEquals(this.get_entry('polski').get_form(form).str(), 'polscy', form);
		this.assertEquals(this.get_entry('wysoki').get_form(form).str(), 'wysocy', form);
		this.assertEquals(this.get_entry('brzydki').get_form(form).str(), 'brzydcy', form);
		this.assertEquals(this.get_entry('bliski').get_form(form).str(), 'bliscy', form);
		this.assertEquals(this.get_entry('drogi').get_form(form).str(), 'drodzy', form);
		this.assertEquals(this.get_entry('ubogi').get_form(form).str(), 'ubodzy', form);
		this.assertEquals(this.get_entry('dobry').get_form(form).str(), 'dobrzy', form);
		this.assertEquals(this.get_entry('stary').get_form(form).str(), 'starzy', form);

		// -i group (from hard to soft, or just plain soft)
		this.assertEquals(this.get_entry('młody').get_form(form).str(), 'młodzi', form);
		this.assertEquals(this.get_entry('miły').get_form(form).str(), 'mili', form);
		this.assertEquals(this.get_entry('mały').get_form(form).str(), 'mali', form);
		this.assertEquals(this.get_entry('zły').get_form(form).str(), 'źli', form);
		this.assertEquals(this.get_entry('były').get_form(form).str(), 'byli', form);
		this.assertEquals(this.get_entry('biedny').get_form(form).str(), 'biedni', form);
		this.assertEquals(this.get_entry('smutny').get_form(form).str(), 'smutni', form);
		this.assertEquals(this.get_entry('zadowolony').get_form(form).str(), 'zadowoleni', form);
		this.assertEquals(this.get_entry('zmęczony').get_form(form).str(), 'zmęczeni', form);
		this.assertEquals(this.get_entry('zajęty').get_form(form).str(), 'zajęci', form);
		this.assertEquals(this.get_entry('bogaty').get_form(form).str(), 'bogaci', form);
		this.assertEquals(this.get_entry('pierwszy').get_form(form).str(), 'pierwsi', form);
		this.assertEquals(this.get_entry('lepszy').get_form(form).str(), 'lepsi', form);
		this.assertEquals(this.get_entry('duży').get_form(form).str(), 'duzi', form);
		this.assertEquals(this.get_entry('gotowy').get_form(form).str(), 'gotowi', form);
		this.assertEquals(this.get_entry('ciekawy').get_form(form).str(), 'ciekawi', form);

		// soft adjective dont change in the plural
		this.assertEquals(this.get_entry('głupi').get_form(form).str(), 'głupi', form);
		this.assertEquals(this.get_entry('ostatni').get_form(form).str(), 'ostatni', form);
	},

	testNounFeminineAccusativeSingular: function ()
	{
		var form = "accusative.singular";

		this.assertEquals(this.get_entry('matka').get_form(form).str(), 'matkę', form);
		this.assertEquals(this.get_entry('kobieta').get_form(form).str(), 'kobietę', form);
		this.assertEquals(this.get_entry('babcia').get_form(form).str(), 'babcię', form);
		this.assertEquals(this.get_entry('szkoła').get_form(form).str(), 'szkołę', form);
		this.assertEquals(this.get_entry('Polska').get_form(form).str(), 'Polskę', form);
		this.assertEquals(this.get_entry('gospodyni').get_form(form).str(), 'gospodynię', form);
		this.assertEquals(this.get_entry('rzecz').get_form(form).str(), 'rzecz', form);
		this.assertEquals(this.get_entry('podróż').get_form(form).str(), 'podróż', form);
		this.assertEquals(this.get_entry('noc').get_form(form).str(), 'noc', form);
		this.assertEquals(this.get_entry('miłość').get_form(form).str(), 'miłość', form);
		this.assertEquals(this.get_entry('twarz').get_form(form).str(), 'twarz', form);
		this.assertEquals(this.get_entry('kolej').get_form(form).str(), 'kolej', form);
	},

	testAdjectiveAccusativeSingularFeminine: function ()
	{
		var form = "accusative.singular.feminine";

		this.assertEquals(this.get_entry('duży').get_form(form).str(), 'dużą', form);
		this.assertEquals(this.get_entry('piękny').get_form(form).str(), 'piękną', form);
		this.assertEquals(this.get_entry('tani').get_form(form).str(), 'tanią', form);
		this.assertEquals(this.get_entry('głupi').get_form(form).str(), 'głupią', form);
		this.assertEquals(this.get_entry('polski').get_form(form).str(), 'polską', form);
	},

	testVerbsSecondConjugation: function ()
	{
		var entry = this.get_entry('wierzyć');

		this.assertEquals(entry.get_option('conjugation'), 'second');
		this.assertEquals(entry.get_form('nonpast.singular.1p').str(), 'wierzę',    'nonpast.singular.1p');
		this.assertEquals(entry.get_form('nonpast.singular.2p').str(), 'wierzysz',  'nonpast.singular.2p');
		this.assertEquals(entry.get_form('nonpast.singular.3p').str(), 'wierzy',    'nonpast.singular.3p');
		this.assertEquals(entry.get_form('nonpast.plural.1p').str(),   'wierzymy',  'nonpast.plural.1p');
		this.assertEquals(entry.get_form('nonpast.plural.2p').str(),   'wierzycie', 'nonpast.plural.2p');
		this.assertEquals(entry.get_form('nonpast.plural.3p').str(),   'wierzą',    'nonpast.plural.3p');
	},

	testVerbsSecondConjugationEC: function ()
	{
		var entry = this.get_entry('słyszeć');

		this.assertEquals(entry.get_option('conjugation'), 'second');
		this.assertEquals(entry.get_form('nonpast.singular.1p').str(), 'słyszę',    'nonpast.singular.1p');
		this.assertEquals(entry.get_form('nonpast.singular.2p').str(), 'słyszysz',  'nonpast.singular.2p');
		this.assertEquals(entry.get_form('nonpast.singular.3p').str(), 'słyszy',    'nonpast.singular.3p');
		this.assertEquals(entry.get_form('nonpast.plural.1p').str(),   'słyszymy',  'nonpast.plural.1p');
		this.assertEquals(entry.get_form('nonpast.plural.2p').str(),   'słyszycie', 'nonpast.plural.2p');
		this.assertEquals(entry.get_form('nonpast.plural.3p').str(),   'słyszą',    'nonpast.plural.3p');
	},

	testVerbsSecondConjugationIC: function ()
	{
		var entry = this.get_entry('dzwonić');

		this.assertEquals(entry.get_option('conjugation'), 'second');
		this.assertEquals(entry.get_form('nonpast.singular.1p').str(), 'dzwonię',   'nonpast.singular.1p');
		this.assertEquals(entry.get_form('nonpast.singular.2p').str(), 'dzwonisz',  'nonpast.singular.2p');
		this.assertEquals(entry.get_form('nonpast.singular.3p').str(), 'dzwoni',    'nonpast.singular.3p');
		this.assertEquals(entry.get_form('nonpast.plural.1p').str(),   'dzwonimy',  'nonpast.plural.1p');
		this.assertEquals(entry.get_form('nonpast.plural.2p').str(),   'dzwonicie', 'nonpast.plural.2p');
		this.assertEquals(entry.get_form('nonpast.plural.3p').str(),   'dzwonią',   'nonpast.plural.3p');
	},

	testVerbsThirdConjugation: function ()
	{
		var entry = this.get_entry('mieszkać');

		this.assertEquals(entry.get_form('nonpast.singular.1p').str(), 'mieszkam',   'nonpast.singular.1p');
		this.assertEquals(entry.get_form('nonpast.singular.2p').str(), 'mieszkasz',  'nonpast.singular.2p');
		this.assertEquals(entry.get_form('nonpast.singular.3p').str(), 'mieszka',    'nonpast.singular.3p');
		this.assertEquals(entry.get_form('nonpast.plural.1p').str(),   'mieszkamy',  'nonpast.plural.1p');
		this.assertEquals(entry.get_form('nonpast.plural.2p').str(),   'mieszkacie', 'nonpast.plural.2p');
		this.assertEquals(entry.get_form('nonpast.plural.3p').str(),   'mieszkają',  'nonpast.plural.3p');
	},

	testVerbsThirdConjugationIrregularStem: function ()
	{
		var entry = this.get_entry('wiedzieć');

		this.assertEquals(entry.get_form('nonpast.singular.1p').str(), 'wiem',   'nonpast.singular.1p');
		this.assertEquals(entry.get_form('nonpast.singular.2p').str(), 'wiesz',  'nonpast.singular.2p');
		this.assertEquals(entry.get_form('nonpast.singular.3p').str(), 'wie',    'nonpast.singular.3p');
		this.assertEquals(entry.get_form('nonpast.plural.1p').str(),   'wiemy',  'nonpast.plural.1p');
		this.assertEquals(entry.get_form('nonpast.plural.2p').str(),   'wiecie', 'nonpast.plural.2p');
		this.assertEquals(entry.get_form('nonpast.plural.3p').str(),   'wiedzą', 'nonpast.plural.3p');
	},

	testVerbsOWAC: function ()
	{
		var entry = this.get_entry('dziękować');

		this.assertEquals(entry.get_option('conjugation'), 'first');
		this.assertEquals(entry.get_form('nonpast.singular.1p').str(), 'dziękuję',    'nonpast.singular.1p');
		this.assertEquals(entry.get_form('nonpast.singular.2p').str(), 'dziękujesz',  'nonpast.singular.2p');
		this.assertEquals(entry.get_form('nonpast.singular.3p').str(), 'dziękuje',    'nonpast.singular.3p');
		this.assertEquals(entry.get_form('nonpast.plural.1p').str(),   'dziękujemy',  'nonpast.plural.1p');
		this.assertEquals(entry.get_form('nonpast.plural.2p').str(),   'dziękujecie', 'nonpast.plural.2p');
		this.assertEquals(entry.get_form('nonpast.plural.3p').str(),   'dziękują',    'nonpast.plural.3p');
	},

	testVerbsYWAC: function ()
	{
		var entry = this.get_entry('obiecywać');

		this.assertEquals(entry.get_option('conjugation'), 'first');
		this.assertEquals(entry.get_form('nonpast.singular.1p').str(), 'obiecuję',    'nonpast.singular.1p');
		this.assertEquals(entry.get_form('nonpast.singular.2p').str(), 'obiecujesz',  'nonpast.singular.2p');
		this.assertEquals(entry.get_form('nonpast.singular.3p').str(), 'obiecuje',    'nonpast.singular.3p');
		this.assertEquals(entry.get_form('nonpast.plural.1p').str(),   'obiecujemy',  'nonpast.plural.1p');
		this.assertEquals(entry.get_form('nonpast.plural.2p').str(),   'obiecujecie', 'nonpast.plural.2p');
		this.assertEquals(entry.get_form('nonpast.plural.3p').str(),   'obiecują',    'nonpast.plural.3p');
	},

	testVerbsIWAC: function ()
	{
		var entry = this.get_entry('oczekiwać');

		this.assertEquals(entry.get_option('conjugation'), 'first');
		this.assertEquals(entry.get_form('nonpast.singular.1p').str(), 'oczekuję',    'nonpast.singular.1p');
		this.assertEquals(entry.get_form('nonpast.singular.2p').str(), 'oczekujesz',  'nonpast.singular.2p');
		this.assertEquals(entry.get_form('nonpast.singular.3p').str(), 'oczekuje',    'nonpast.singular.3p');
		this.assertEquals(entry.get_form('nonpast.plural.1p').str(),   'oczekujemy',  'nonpast.plural.1p');
		this.assertEquals(entry.get_form('nonpast.plural.2p').str(),   'oczekujecie', 'nonpast.plural.2p');
		this.assertEquals(entry.get_form('nonpast.plural.3p').str(),   'oczekują',    'nonpast.plural.3p');
	},

	testVerbsAWAC: function ()
	{
		var entry = this.get_entry('dawać');

		this.assertEquals(entry.get_option('conjugation'), 'first');
		this.assertEquals(entry.get_form('nonpast.singular.1p').str(), 'daję',    'nonpast.singular.1p');
		this.assertEquals(entry.get_form('nonpast.singular.2p').str(), 'dajesz',  'nonpast.singular.2p');
		this.assertEquals(entry.get_form('nonpast.singular.3p').str(), 'daje',    'nonpast.singular.3p');
		this.assertEquals(entry.get_form('nonpast.plural.1p').str(),   'dajemy',  'nonpast.plural.1p');
		this.assertEquals(entry.get_form('nonpast.plural.2p').str(),   'dajecie', 'nonpast.plural.2p');
		this.assertEquals(entry.get_form('nonpast.plural.3p').str(),   'dają',    'nonpast.plural.3p');
	},

	testVerbsThirdConjugationYWAC: function ()
	{
		var entry = this.get_entry('nazywać');

		this.assertEquals(entry.get_option('conjugation'), 'third');
		this.assertEquals(entry.get_form('nonpast.singular.1p').str(), 'nazywam',   'nonpast.singular.1p');
		this.assertEquals(entry.get_form('nonpast.singular.2p').str(), 'nazywasz',  'nonpast.singular.2p');
		this.assertEquals(entry.get_form('nonpast.singular.3p').str(), 'nazywa',    'nonpast.singular.3p');
		this.assertEquals(entry.get_form('nonpast.plural.1p').str(),   'nazywamy',  'nonpast.plural.1p');
		this.assertEquals(entry.get_form('nonpast.plural.2p').str(),   'nazywacie', 'nonpast.plural.2p');
		this.assertEquals(entry.get_form('nonpast.plural.3p').str(),   'nazywają',  'nonpast.plural.3p');
	},

	testNounMasculineAccusativeSingularAlive: function ()
	{
		var form = "accusative.singular";

		this.assertEquals(this.get_entry('brat').get_form(form).str(), 'brata', form);
		this.assertEquals(this.get_entry('kelner').get_form(form).str(), 'kelnera', form);
		this.assertEquals(this.get_entry('królik').get_form(form).str(), 'królika', form);
		this.assertEquals(this.get_entry('Polak').get_form(form).str(), 'Polaka', form);
		this.assertEquals(this.get_entry('sąsiad').get_form(form).str(), 'sąsiada', form);
		this.assertEquals(this.get_entry('mąż').get_form(form).str(), 'męża', form);
		this.assertEquals(this.get_entry('ksiądz').get_form(form).str(), 'księdza', form);
		this.assertEquals(this.get_entry('pies').get_form(form).str(), 'psa', form);
		this.assertEquals(this.get_entry('chłopiec').get_form(form).str(), 'chłopca', form);
		this.assertEquals(this.get_entry('ojciec').get_form(form).str(), 'ojca', form);
		this.assertEquals(this.get_entry('siostrzeniec').get_form(form).str(), 'siostrzeńca', form);
		this.assertEquals(this.get_entry('dziadek').get_form(form).str(), 'dziadka', form);
		this.assertEquals(this.get_entry('szwagier').get_form(form).str(), 'szwagra', form);
		this.assertEquals(this.get_entry('inżynier').get_form(form).str(), 'inżyniera', form);
		this.assertEquals(this.get_entry('koń').get_form(form).str(), 'konia', form);
		this.assertEquals(this.get_entry('gość').get_form(form).str(), 'gościa', form);
		this.assertEquals(this.get_entry('kolega').get_form(form).str(), 'kolegę', form);
		this.assertEquals(this.get_entry('artysta').get_form(form).str(), 'artystę', form);
		this.assertEquals(this.get_entry('kierowca').get_form(form).str(), 'kierowcę', form);
	},

	testNounMasculineAccusativePluralVirile: function ()
	{
		var form = "accusative.plural";

		this.assertEquals(this.get_entry('syn').get_form(form).str(), 'synów', form);
		this.assertEquals(this.get_entry('ojciec').get_form(form).str(), 'ojców', form);
		this.assertEquals(this.get_entry('Polak').get_form(form).str(), 'Polaków', form);
		this.assertEquals(this.get_entry('chłopiec').get_form(form).str(), 'chłopców', form);
		this.assertEquals(this.get_entry('Amerykanin').get_form(form).str(), 'Amerykanów', form);
		this.assertEquals(this.get_entry('kolega').get_form(form).str(), 'kolegów', form);
		this.assertEquals(this.get_entry('dentysta').get_form(form).str(), 'dentystów', form);
		this.assertEquals(this.get_entry('mąż').get_form(form).str(), 'mężów', form);
		this.assertEquals(this.get_entry('brat').get_form(form).str(), 'braci', form);
		this.assertEquals(this.get_entry('ksiądz').get_form(form).str(), 'księży', form);
		this.assertEquals(this.get_entry('kaleka').get_form(form).str(), 'kalek', form);
		this.assertEquals(this.get_entry('mężczyzna').get_form(form).str(), 'mężczyzn', form);
		this.assertEquals(this.get_entry('uczeń').get_form(form).str(), 'uczniów', form);
		this.assertEquals(this.get_entry('więzień').get_form(form).str(), 'więźniów', form);
		this.assertEquals(this.get_entry('gość').get_form(form).str(), 'gości', form);
		this.assertEquals(this.get_entry('nauczyciel').get_form(form).str(), 'nauczycieli', form);
		this.assertEquals(this.get_entry('złodziej').get_form(form).str(), 'złodziei', form);
		this.assertEquals(this.get_entry('lekarz').get_form(form).str(), 'lekarzy', form);
		this.assertEquals(this.get_entry('słuchacz').get_form(form).str(), 'słuchaczy', form);
		this.assertEquals(this.get_entry('listonosz').get_form(form).str(), 'listonoszy', form);
		this.assertEquals(this.get_entry('żołnierz').get_form(form).str(), 'żołnierzy', form);
	},

	testNounMasculineGenitiveSingular: function ()
	{
		var form = "genitive.singular";

		this.assertEquals(this.get_entry('turysta').get_form(form).str(), 'turysty', form);
		this.assertEquals(this.get_entry('mężczyzna').get_form(form).str(), 'mężczyzny', form);
		this.assertEquals(this.get_entry('kierowca').get_form(form).str(), 'kierowcy', form);
		this.assertEquals(this.get_entry('kolega').get_form(form).str(), 'kolegi', form);
		this.assertEquals(this.get_entry('kaleka').get_form(form).str(), 'kaleki', form);
		this.assertEquals(this.get_entry('obiad').get_form(form).str(), 'obiadu', form);
		this.assertEquals(this.get_entry('bank').get_form(form).str(), 'banku', form);
		this.assertEquals(this.get_entry('sklep').get_form(form).str(), 'sklepu', form);
		this.assertEquals(this.get_entry('dom').get_form(form).str(), 'domu', form);
		this.assertEquals(this.get_entry('pokój').get_form(form).str(), 'pokoju', form);
		this.assertEquals(this.get_entry('wiatr').get_form(form).str(), 'wiatru', form);

		// irregulars!
		this.assertEquals(this.get_entry('kosz').get_form(form).str(), 'kosza', form);
		this.assertEquals(this.get_entry('nóż').get_form(form).str(), 'noża', form);
		this.assertEquals(this.get_entry('palec').get_form(form).str(), 'palca', form);
		this.assertEquals(this.get_entry('kwiatek').get_form(form).str(), 'kwiatka', form);
		this.assertEquals(this.get_entry('ząb').get_form(form).str(), 'zęba', form);
	},

	testNounFeminineGenitiveSingular: function ()
	{
		var form = "genitive.singular";

		this.assertEquals(this.get_entry('lampa').get_form(form).str(), 'lampy', form);
		this.assertEquals(this.get_entry('szkoła').get_form(form).str(), 'szkoły', form);
		this.assertEquals(this.get_entry('kobieta').get_form(form).str(), 'kobiety', form);
		this.assertEquals(this.get_entry('siostra').get_form(form).str(), 'siostry', form);
		this.assertEquals(this.get_entry('łza').get_form(form).str(), 'łzy', form);
		this.assertEquals(this.get_entry('kiełbasa').get_form(form).str(), 'kiełbasy', form);
		this.assertEquals(this.get_entry('noc').get_form(form).str(), 'nocy', form);
		this.assertEquals(this.get_entry('ulica').get_form(form).str(), 'ulicy', form);
		this.assertEquals(this.get_entry('tęcza').get_form(form).str(), 'tęczy', form);
		this.assertEquals(this.get_entry('mysz').get_form(form).str(), 'myszy', form);
		this.assertEquals(this.get_entry('twarz').get_form(form).str(), 'twarzy', form);
		this.assertEquals(this.get_entry('burza').get_form(form).str(), 'burzy', form);
		this.assertEquals(this.get_entry('róża').get_form(form).str(), 'róży', form);
		this.assertEquals(this.get_entry('grusza').get_form(form).str(), 'gruszy', form);
		this.assertEquals(this.get_entry('rzecz').get_form(form).str(), 'rzeczy', form);
		this.assertEquals(this.get_entry('podróż').get_form(form).str(), 'podróży', form);
		this.assertEquals(this.get_entry('matka').get_form(form).str(), 'matki', form);
		this.assertEquals(this.get_entry('córka').get_form(form).str(), 'córki', form);
		this.assertEquals(this.get_entry('droga').get_form(form).str(), 'drogi', form);
		this.assertEquals(this.get_entry('pieśń').get_form(form).str(), 'pieśni', form);
		this.assertEquals(this.get_entry('nić').get_form(form).str(), 'nici', form);
		this.assertEquals(this.get_entry('pamięć').get_form(form).str(), 'pamięci', form);
		this.assertEquals(this.get_entry('gałąź').get_form(form).str(), 'gałęzi', form);
		this.assertEquals(this.get_entry('łódź').get_form(form).str(), 'łodzi', form);
		this.assertEquals(this.get_entry('miłość').get_form(form).str(), 'miłości', form);
		this.assertEquals(this.get_entry('wieś').get_form(form).str(), 'wsi', form);
		this.assertEquals(this.get_entry('jesień').get_form(form).str(), 'jesieni', form);
		this.assertEquals(this.get_entry('opowieść').get_form(form).str(), 'opowieści', form);
		this.assertEquals(this.get_entry('babcia').get_form(form).str(), 'babci', form);
		this.assertEquals(this.get_entry('kuchnia').get_form(form).str(), 'kuchni', form);
		this.assertEquals(this.get_entry('aleja').get_form(form).str(), 'alei', form);
		this.assertEquals(this.get_entry('szyja').get_form(form).str(), 'szyi', form);
		this.assertEquals(this.get_entry('nadzieja').get_form(form).str(), 'nadziei', form);
		this.assertEquals(this.get_entry('kolej').get_form(form).str(), 'kolei', form);
		this.assertEquals(this.get_entry('żmija').get_form(form).str(), 'żmii', form);
		this.assertEquals(this.get_entry('cebula').get_form(form).str(), 'cebuli', form);
		this.assertEquals(this.get_entry('chwila').get_form(form).str(), 'chwili', form);
		this.assertEquals(this.get_entry('chorągiew').get_form(form).str(), 'chorągwi', form);
		this.assertEquals(this.get_entry('krew').get_form(form).str(), 'krwi', form);
		this.assertEquals(this.get_entry('myśl').get_form(form).str(), 'myśli', form);
		this.assertEquals(this.get_entry('sól').get_form(form).str(), 'soli', form);
		this.assertEquals(this.get_entry('idea').get_form(form).str(), 'idei', form);
		this.assertEquals(this.get_entry('statua').get_form(form).str(), 'statui', form);
		this.assertEquals(this.get_entry('melodia').get_form(form).str(), 'melodii', form);
		this.assertEquals(this.get_entry('Belgia').get_form(form).str(), 'Belgii', form);
		this.assertEquals(this.get_entry('Anglia').get_form(form).str(), 'Anglii', form);
		this.assertEquals(this.get_entry('historia').get_form(form).str(), 'historii', form);
		this.assertEquals(this.get_entry('sympatia').get_form(form).str(), 'sympatii', form);
		this.assertEquals(this.get_entry('telewizja').get_form(form).str(), 'telewizji', form);
		this.assertEquals(this.get_entry('lekcja').get_form(form).str(), 'lekcji', form);
		this.assertEquals(this.get_entry('poezja').get_form(form).str(), 'poezji', form);
		this.assertEquals(this.get_entry('Francja').get_form(form).str(), 'Francji', form);
		this.assertEquals(this.get_entry('stacja').get_form(form).str(), 'stacji', form);
		this.assertEquals(this.get_entry('Szkocja').get_form(form).str(), 'Szkocji', form);
		this.assertEquals(this.get_entry('procesja').get_form(form).str(), 'procesji', form);
	},

	testNounNeuterGenitiveSingular: function ()
	{
		var form = "genitive.singular";

		this.assertEquals(this.get_entry('okno').get_form(form).str(), 'okna', form);
		this.assertEquals(this.get_entry('jabłko').get_form(form).str(), 'jabłka', form);
		this.assertEquals(this.get_entry('krzesło').get_form(form).str(), 'krzesła', form);
		this.assertEquals(this.get_entry('morze').get_form(form).str(), 'morza', form);
		this.assertEquals(this.get_entry('mieszkanie').get_form(form).str(), 'mieszkania', form);
		this.assertEquals(this.get_entry('mieszkanie').get_form(form).str(), 'mieszkania', form);
		this.assertEquals(this.get_entry('imię').get_form(form).str(), 'imienia', form);
		this.assertEquals(this.get_entry('ramię').get_form(form).str(), 'ramienia', form);
		this.assertEquals(this.get_entry('jagnię').get_form(form).str(), 'jagnięcia', form);
		this.assertEquals(this.get_entry('prosię').get_form(form).str(), 'prosięcia', form);
		this.assertEquals(this.get_entry('źrebię').get_form(form).str(), 'źrebięcia', form);
		this.assertEquals(this.get_entry('zwierzę').get_form(form).str(), 'zwierzęcia', form);
		this.assertEquals(this.get_entry('dziewczę').get_form(form).str(), 'dziewczęcia', form);
	},

	testNounMasculineGenitivePlural: function ()
	{
		var form = "genitive.plural";

		this.assertEquals(this.get_entry('bank').get_form(form).str(), 'banków', form);
		this.assertEquals(this.get_entry('pociąg').get_form(form).str(), 'pociągów', form);
		this.assertEquals(this.get_entry('ptak').get_form(form).str(), 'ptaków', form);
		this.assertEquals(this.get_entry('koniec').get_form(form).str(), 'końców', form);
		this.assertEquals(this.get_entry('chłopiec').get_form(form).str(), 'chłopców', form);
		this.assertEquals(this.get_entry('pies').get_form(form).str(), 'psów', form);
		this.assertEquals(this.get_entry('syn').get_form(form).str(), 'synów', form);
		this.assertEquals(this.get_entry('zegarek').get_form(form).str(), 'zegarków', form);
		this.assertEquals(this.get_entry('ząb').get_form(form).str(), 'zębów', form);
		this.assertEquals(this.get_entry('stół').get_form(form).str(), 'stołów', form);
		this.assertEquals(this.get_entry('miesiąc').get_form(form).str(), 'miesięcy', form);
		this.assertEquals(this.get_entry('tysiąc').get_form(form).str(), 'tysięcy', form);
		this.assertEquals(this.get_entry('pieniądz').get_form(form).str(), 'pieniędzy', form);
		this.assertEquals(this.get_entry('samochód').get_form(form).str(), 'samochodów', form);
		this.assertEquals(this.get_entry('klucz').get_form(form).str(), 'kluczy', form);
		this.assertEquals(this.get_entry('kapelusz').get_form(form).str(), 'kapeluszy', form);
		this.assertEquals(this.get_entry('talerz').get_form(form).str(), 'talerzy', form);
		this.assertEquals(this.get_entry('grosz').get_form(form).str(), 'groszy', form);
		this.assertEquals(this.get_entry('lekarz').get_form(form).str(), 'lekarzy', form);
		this.assertEquals(this.get_entry('nóż').get_form(form).str(), 'noży', form);
		this.assertEquals(this.get_entry('garaż').get_form(form).str(), 'garaży', form);
		this.assertEquals(this.get_entry('płaszcz').get_form(form).str(), 'płaszczy', form);
		this.assertEquals(this.get_entry('kosz').get_form(form).str(), 'koszy', form);
		this.assertEquals(this.get_entry('hotel').get_form(form).str(), 'hoteli', form);
		this.assertEquals(this.get_entry('parasol').get_form(form).str(), 'parasoli', form);
		this.assertEquals(this.get_entry('pokój').get_form(form).str(), 'pokoi', form);
		this.assertEquals(this.get_entry('nauczyciel').get_form(form).str(), 'nauczycieli', form);
		this.assertEquals(this.get_entry('koń').get_form(form).str(), 'koni', form);
		this.assertEquals(this.get_entry('łabędź').get_form(form).str(), 'łabędzi', form);
		this.assertEquals(this.get_entry('liść').get_form(form).str(), 'liści', form);
		this.assertEquals(this.get_entry('gość').get_form(form).str(), 'gości', form);
		this.assertEquals(this.get_entry('ogień').get_form(form).str(), 'ogni', form);
		this.assertEquals(this.get_entry('tydzień').get_form(form).str(), 'tygodni', form);

		// exception:
		this.assertEquals(this.get_entry('kraj').get_form(form).str(), 'krajów', form);
	},

	testNounFeminineGenitivePlural: function ()
	{
		var form = "genitive.plural";

		this.assertEquals(this.get_entry('gwiazda').get_form(form).str(), 'gwiazd', form);
		this.assertEquals(this.get_entry('ulica').get_form(form).str(), 'ulic', form);
		this.assertEquals(this.get_entry('żona').get_form(form).str(), 'żon', form);
		this.assertEquals(this.get_entry('orkiestra').get_form(form).str(), 'orkiestr', form);
		this.assertEquals(this.get_entry('kobieta').get_form(form).str(), 'kobiet', form);
		this.assertEquals(this.get_entry('chwila').get_form(form).str(), 'chwil', form);
		this.assertEquals(this.get_entry('aleja').get_form(form).str(), 'alei', form);
		this.assertEquals(this.get_entry('nadzieja').get_form(form).str(), 'nadziei', form);

		this.assertEquals(this.get_entry('córka').get_form(form).str(), 'córek', form);
		this.assertEquals(this.get_entry('droga').get_form(form).str(), 'dróg', form);
		this.assertEquals(this.get_entry('głowa').get_form(form).str(), 'głów', form);
		this.assertEquals(this.get_entry('szkoła').get_form(form).str(), 'szkół', form);
		this.assertEquals(this.get_entry('siostra').get_form(form).str(), 'sióstr', form);
		this.assertEquals(this.get_entry('ręka').get_form(form).str(), 'rąk', form);
		this.assertEquals(this.get_entry('córka').get_form(form).str(), 'córek', form);
		this.assertEquals(this.get_entry('cegła').get_form(form).str(), 'cegieł', form);
		this.assertEquals(this.get_entry('łza').get_form(form).str(), 'łez', form);
		this.assertEquals(this.get_entry('gospodyni').get_form(form).str(), 'gospodyń', form);
		this.assertEquals(this.get_entry('ziemia').get_form(form).str(), 'ziem', form);
		this.assertEquals(this.get_entry('ciocia').get_form(form).str(), 'cioć', form);
		this.assertEquals(this.get_entry('babcia').get_form(form).str(), 'babć', form);
		this.assertEquals(this.get_entry('noc').get_form(form).str(), 'nocy', form);
		this.assertEquals(this.get_entry('twarz').get_form(form).str(), 'twarzy', form);
		this.assertEquals(this.get_entry('rzecz').get_form(form).str(), 'rzeczy', form);
		this.assertEquals(this.get_entry('mysz').get_form(form).str(), 'myszy', form);
		this.assertEquals(this.get_entry('podróż').get_form(form).str(), 'podróży', form);
		this.assertEquals(this.get_entry('kuchnia').get_form(form).str(), 'kuchni', form);
		this.assertEquals(this.get_entry('poezja').get_form(form).str(), 'poezji', form);
	},

	testNounNeuterGenitivePlural: function ()
	{
		var form = "genitive.plural";

		this.assertEquals(this.get_entry('drzewo').get_form(form).str(), 'drzew', form);
		this.assertEquals(this.get_entry('pióro').get_form(form).str(), 'piór', form);
		this.assertEquals(this.get_entry('jezioro').get_form(form).str(), 'jezior', form);
		this.assertEquals(this.get_entry('miasto').get_form(form).str(), 'miast', form);
		this.assertEquals(this.get_entry('serce').get_form(form).str(), 'serc', form);
		this.assertEquals(this.get_entry('lato').get_form(form).str(), 'lat', form);

		this.assertEquals(this.get_entry('morze').get_form(form).str(), 'mórz', form);
		this.assertEquals(this.get_entry('słowo').get_form(form).str(), 'słów', form);
		this.assertEquals(this.get_entry('święto').get_form(form).str(), 'świąt', form);
		this.assertEquals(this.get_entry('okno').get_form(form).str(), 'okien', form);
		this.assertEquals(this.get_entry('jabłko').get_form(form).str(), 'jabłek', form);
		this.assertEquals(this.get_entry('piętro').get_form(form).str(), 'pięter', form);
		this.assertEquals(this.get_entry('krzesło').get_form(form).str(), 'krzeseł', form);
		this.assertEquals(this.get_entry('dziecko').get_form(form).str(), 'dzieci', form);

		this.assertEquals(this.get_entry('zdjęcie').get_form(form).str(), 'zdjęć', form);
		this.assertEquals(this.get_entry('mieszkanie').get_form(form).str(), 'mieszkań', form);
		this.assertEquals(this.get_entry('śniadanie').get_form(form).str(), 'śniadań', form);

		this.assertEquals(this.get_entry('imię').get_form(form).str(), 'imion', form);
		this.assertEquals(this.get_entry('ramię').get_form(form).str(), 'ramion', form);

		this.assertEquals(this.get_entry('jagnię').get_form(form).str(), 'jagniąt', form);
		this.assertEquals(this.get_entry('źrebię').get_form(form).str(), 'źrebiąt', form);
		this.assertEquals(this.get_entry('prosię').get_form(form).str(), 'prosiąt', form);
		this.assertEquals(this.get_entry('dziewczę').get_form(form).str(), 'dziewcząt', form);
		this.assertEquals(this.get_entry('zwierzę').get_form(form).str(), 'zwierząt', form);
		this.assertEquals(this.get_entry('książę').get_form(form).str(), 'książąt', form);

		this.assertEquals(this.get_entry('narzędzie').get_form(form).str(), 'narzędzi', form);
		this.assertEquals(this.get_entry('wybrzeże').get_form(form).str(), 'wybrzeży', form);

		this.assertEquals(this.get_entry('muzeum').get_form(form).str(), 'muzeów', form);
		this.assertEquals(this.get_entry('gimnazjum').get_form(form).str(), 'gimnazjów', form);
	},

	testAdjectiveGenitiveSingularFeminine: function ()
	{
		var form = "genitive.singular.feminine";

		this.assertEquals(this.get_entry('dobry').get_form(form).str(), 'dobrej', form);
		this.assertEquals(this.get_entry('polski').get_form(form).str(), 'polskiej', form);
		this.assertEquals(this.get_entry('ostatni').get_form(form).str(), 'ostatniej', form);
	},

	testAdjectiveGenitiveSingularMasculine: function ()
	{
		var form = "genitive.singular.masculine";

		this.assertEquals(this.get_entry('dobry').get_form(form).str(), 'dobrego', form);
		this.assertEquals(this.get_entry('polski').get_form(form).str(), 'polskiego', form);
		this.assertEquals(this.get_entry('ostatni').get_form(form).str(), 'ostatniego', form);
	},

	testAdjectiveGenitivePlural: function ()
	{
		var form = "genitive.plural";

		this.assertEquals(this.get_entry('dobry').get_form(form).str(), 'dobrych', form);
		this.assertEquals(this.get_entry('polski').get_form(form).str(), 'polskich', form);
		this.assertEquals(this.get_entry('ostatni').get_form(form).str(), 'ostatnich', form);
	},

	testNounMasculineDativeSingular: function ()
	{
		var form = "dative.singular";

		this.assertEquals(this.get_entry('Polak').get_form(form).str(), 'Polakowi', form);
		this.assertEquals(this.get_entry('sąsiad').get_form(form).str(), 'sąsiadowi', form);
		this.assertEquals(this.get_entry('mąż').get_form(form).str(), 'mężowi', form);
		this.assertEquals(this.get_entry('koń').get_form(form).str(), 'koniowi', form);
		this.assertEquals(this.get_entry('gość').get_form(form).str(), 'gościowi', form);

		this.assertEquals(this.get_entry('brat').get_form(form).str(), 'bratu', form);
		this.assertEquals(this.get_entry('świat').get_form(form).str(), 'światu', form);
		this.assertEquals(this.get_entry('kot').get_form(form).str(), 'kotu', form);
		this.assertEquals(this.get_entry('ojciec').get_form(form).str(), 'ojcu', form);
		this.assertEquals(this.get_entry('chłopiec').get_form(form).str(), 'chłopcu', form);
		this.assertEquals(this.get_entry('pies').get_form(form).str(), 'psu', form);
		//this.assertEquals(this.get_entry('Bóg').get_form(form).str(), 'Bogu', form);
		this.assertEquals(this.get_entry('ksiądz').get_form(form).str(), 'księdzu', form);

		this.assertEquals(this.get_entry('kierowca').get_form(form).str(), 'kierowcy', form);
		this.assertEquals(this.get_entry('kolega').get_form(form).str(), 'koledze', form);
		this.assertEquals(this.get_entry('kaleka').get_form(form).str(), 'kalece', form);
		this.assertEquals(this.get_entry('poeta').get_form(form).str(), 'poecie', form);
		this.assertEquals(this.get_entry('dentysta').get_form(form).str(), 'dentyście', form);
		this.assertEquals(this.get_entry('mężczyzna').get_form(form).str(), 'mężczyźnie', form);
	},

	testNounFeminineDativeSingular: function ()
	{
		var form = "dative.singular";

		this.assertEquals(this.get_entry('szkoła').get_form(form).str(), 'szkole', form);
		//this.assertEquals(this.get_entry('Wisła').get_form(form).str(), 'Wiśle', form);
		this.assertEquals(this.get_entry('sosna').get_form(form).str(), 'sośnie', form);
		this.assertEquals(this.get_entry('kobieta').get_form(form).str(), 'kobiecie', form);
		this.assertEquals(this.get_entry('kapusta').get_form(form).str(), 'kapuście', form);
		this.assertEquals(this.get_entry('lista').get_form(form).str(), 'liście', form);
		this.assertEquals(this.get_entry('gwiazda').get_form(form).str(), 'gwiaździe', form);
		this.assertEquals(this.get_entry('bielizna').get_form(form).str(), 'bieliźnie', form);
		this.assertEquals(this.get_entry('ojczyzna').get_form(form).str(), 'ojczyźnie', form);
		this.assertEquals(this.get_entry('siostra').get_form(form).str(), 'siostrze', form);
		this.assertEquals(this.get_entry('Polska').get_form(form).str(), 'Polsce', form);
		this.assertEquals(this.get_entry('droga').get_form(form).str(), 'drodze', form);
		this.assertEquals(this.get_entry('podłoga').get_form(form).str(), 'podłodze', form);
		this.assertEquals(this.get_entry('mucha').get_form(form).str(), 'musze', form);
		this.assertEquals(this.get_entry('osoba').get_form(form).str(), 'osobie', form);
		this.assertEquals(this.get_entry('prasa').get_form(form).str(), 'prasie', form);
		this.assertEquals(this.get_entry('mama').get_form(form).str(), 'mamie', form);
		this.assertEquals(this.get_entry('koza').get_form(form).str(), 'kozie', form);
		this.assertEquals(this.get_entry('Europa').get_form(form).str(), 'Europie', form);
		this.assertEquals(this.get_entry('babcia').get_form(form).str(), 'babci', form);
		this.assertEquals(this.get_entry('tęcza').get_form(form).str(), 'tęczy', form);
		this.assertEquals(this.get_entry('noc').get_form(form).str(), 'nocy', form);
	},

	testNounNeuterDativeSingular: function ()
	{
		var form = "dative.singular";

		this.assertEquals(this.get_entry('dziecko').get_form(form).str(), 'dziecku', form);
		this.assertEquals(this.get_entry('pole').get_form(form).str(), 'polu', form);
		this.assertEquals(this.get_entry('życie').get_form(form).str(), 'życiu', form);
		this.assertEquals(this.get_entry('imię').get_form(form).str(), 'imieniu', form);
		this.assertEquals(this.get_entry('ramię').get_form(form).str(), 'ramieniu', form);
		this.assertEquals(this.get_entry('jagnię').get_form(form).str(), 'jagnięciu', form);
		this.assertEquals(this.get_entry('źrebię').get_form(form).str(), 'źrebięciu', form);
		this.assertEquals(this.get_entry('prosię').get_form(form).str(), 'prosięciu', form);
		this.assertEquals(this.get_entry('zwierzę').get_form(form).str(), 'zwierzęciu', form);
		this.assertEquals(this.get_entry('dziewczę').get_form(form).str(), 'dziewczęciu', form);
		this.assertEquals(this.get_entry('niemowlę').get_form(form).str(), 'niemowlęciu', form);
	},

	testAdjectiveDativeSingularFeminine: function ()
	{
		var form = "dative.singular.feminine";

		this.assertEquals(this.get_entry('dobry').get_form(form).str(), 'dobrej', form);
		this.assertEquals(this.get_entry('polski').get_form(form).str(), 'polskiej', form);
		this.assertEquals(this.get_entry('ostatni').get_form(form).str(), 'ostatniej', form);
	},

	testAdjectiveDativeSingularMasculine: function ()
	{
		var form = "dative.singular.masculine";

		this.assertEquals(this.get_entry('dobry').get_form(form).str(), 'dobremu', form);
		this.assertEquals(this.get_entry('polski').get_form(form).str(), 'polskiemu', form);
		this.assertEquals(this.get_entry('ostatni').get_form(form).str(), 'ostatniemu', form);
	},

	testNounDativePlural: function ()
	{
		var form = "dative.plural";

		this.assertEquals(this.get_entry('ojciec').get_form(form).str(), 'ojcom', form);
		this.assertEquals(this.get_entry('kolega').get_form(form).str(), 'kolegom', form);
		this.assertEquals(this.get_entry('mąż').get_form(form).str(), 'mężom', form);
		this.assertEquals(this.get_entry('okno').get_form(form).str(), 'oknom', form);
		this.assertEquals(this.get_entry('wuj').get_form(form).str(), 'wujom', form);
		this.assertEquals(this.get_entry('matka').get_form(form).str(), 'matkom', form);
		this.assertEquals(this.get_entry('muzeum').get_form(form).str(), 'muzeom', form);
		this.assertEquals(this.get_entry('koń').get_form(form).str(), 'koniom', form);
		this.assertEquals(this.get_entry('uczeń').get_form(form).str(), 'uczniom', form);
		this.assertEquals(this.get_entry('gałąź').get_form(form).str(), 'gałęziom', form);
		this.assertEquals(this.get_entry('gość').get_form(form).str(), 'gościom', form);
		this.assertEquals(this.get_entry('łódź').get_form(form).str(), 'łodziom', form);
		this.assertEquals(this.get_entry('pieśń').get_form(form).str(), 'pieśniom', form);
		this.assertEquals(this.get_entry('dzień').get_form(form).str(), 'dniom', form);
		this.assertEquals(this.get_entry('zdjęcie').get_form(form).str(), 'zdjęciom', form);
		this.assertEquals(this.get_entry('kuchnia').get_form(form).str(), 'kuchniom', form);
		this.assertEquals(this.get_entry('imię').get_form(form).str(), 'imionom', form);
		this.assertEquals(this.get_entry('ramię').get_form(form).str(), 'ramionom', form);
		this.assertEquals(this.get_entry('zwierzę').get_form(form).str(), 'zwierzętom', form);
		this.assertEquals(this.get_entry('jagnię').get_form(form).str(), 'jagniętom', form);
		this.assertEquals(this.get_entry('źrebię').get_form(form).str(), 'źrebiętom', form);
		this.assertEquals(this.get_entry('prosię').get_form(form).str(), 'prosiętom', form);
		this.assertEquals(this.get_entry('dziewczę').get_form(form).str(), 'dziewczętom', form);
		this.assertEquals(this.get_entry('kurczę').get_form(form).str(), 'kurczętom', form);
	},

	testAdjectiveDativePlural: function ()
	{
		var form = "dative.plural";

		this.assertEquals(this.get_entry('dobry').get_form(form).str(), 'dobrym', form);
		this.assertEquals(this.get_entry('polski').get_form(form).str(), 'polskim', form);
		this.assertEquals(this.get_entry('ostatni').get_form(form).str(), 'ostatnim', form);
	},

	testNounMasculineInstrumentalSingular: function ()
	{
		var form = "instrumental.singular";

		this.assertEquals(this.get_entry('syn').get_form(form).str(), 'synem', form);
		this.assertEquals(this.get_entry('brat').get_form(form).str(), 'bratem', form);
		this.assertEquals(this.get_entry('chłopiec').get_form(form).str(), 'chłopcem', form);
		this.assertEquals(this.get_entry('mąż').get_form(form).str(), 'mężem', form);
		this.assertEquals(this.get_entry('pies').get_form(form).str(), 'psem', form);
		this.assertEquals(this.get_entry('pokój').get_form(form).str(), 'pokojem', form);
		this.assertEquals(this.get_entry('las').get_form(form).str(), 'lasem', form);
		this.assertEquals(this.get_entry('ojciec').get_form(form).str(), 'ojcem', form);
		this.assertEquals(this.get_entry('Bóg').get_form(form).str(), 'Bogiem', form);
		this.assertEquals(this.get_entry('pociąg').get_form(form).str(), 'pociągiem', form);
		this.assertEquals(this.get_entry('Polak').get_form(form).str(), 'Polakiem', form);
		this.assertEquals(this.get_entry('Anglik').get_form(form).str(), 'Anglikiem', form);
		this.assertEquals(this.get_entry('koń').get_form(form).str(), 'koniem', form);
		this.assertEquals(this.get_entry('gość').get_form(form).str(), 'gościem', form);
		this.assertEquals(this.get_entry('uczeń').get_form(form).str(), 'uczniem', form);
		this.assertEquals(this.get_entry('gwóźdź').get_form(form).str(), 'gwoździem', form);
		this.assertEquals(this.get_entry('dzień').get_form(form).str(), 'dniem', form);
		this.assertEquals(this.get_entry('tydzień').get_form(form).str(), 'tygodniem', form);
		this.assertEquals(this.get_entry('kolega').get_form(form).str(), 'kolegą', form);
		this.assertEquals(this.get_entry('mężczyzna').get_form(form).str(), 'mężczyzną', form);
	},

	testNounFeminineInstrumentalSingular: function ()
	{
		var form = "instrumental.singular";

		this.assertEquals(this.get_entry('matka').get_form(form).str(), 'matką', form);
		this.assertEquals(this.get_entry('lekcja').get_form(form).str(), 'lekcją', form);
		this.assertEquals(this.get_entry('droga').get_form(form).str(), 'drogą', form);
		this.assertEquals(this.get_entry('Polska').get_form(form).str(), 'Polską', form);
		this.assertEquals(this.get_entry('sól').get_form(form).str(), 'solą', form);
		this.assertEquals(this.get_entry('twarz').get_form(form).str(), 'twarzą', form);
		this.assertEquals(this.get_entry('podróż').get_form(form).str(), 'podróżą', form);
		this.assertEquals(this.get_entry('kolej').get_form(form).str(), 'koleją', form);
		this.assertEquals(this.get_entry('rzecz').get_form(form).str(), 'rzeczą', form);
		this.assertEquals(this.get_entry('mysz').get_form(form).str(), 'myszą', form);
		this.assertEquals(this.get_entry('noc').get_form(form).str(), 'nocą', form);
		this.assertEquals(this.get_entry('gospodyni').get_form(form).str(), 'gospodynią', form);
		this.assertEquals(this.get_entry('nić').get_form(form).str(), 'nicią', form);
		this.assertEquals(this.get_entry('część').get_form(form).str(), 'częścią', form);
		this.assertEquals(this.get_entry('gałąź').get_form(form).str(), 'gałęzią', form);
		this.assertEquals(this.get_entry('pieśń').get_form(form).str(), 'pieśnią', form);
		this.assertEquals(this.get_entry('jesień').get_form(form).str(), 'jesienią', form);
		this.assertEquals(this.get_entry('wieś').get_form(form).str(), 'wsią', form);
	},

	testNounNeuterInstrumentalSingular: function ()
	{
		var form = "instrumental.singular";

		this.assertEquals(this.get_entry('pióro').get_form(form).str(), 'piórem', form);
		this.assertEquals(this.get_entry('krzesło').get_form(form).str(), 'krzesłem', form);
		this.assertEquals(this.get_entry('morze').get_form(form).str(), 'morzem', form);
		this.assertEquals(this.get_entry('zboże').get_form(form).str(), 'zbożem', form);
		this.assertEquals(this.get_entry('słońce').get_form(form).str(), 'słońcem', form);
		this.assertEquals(this.get_entry('miasto').get_form(form).str(), 'miastem', form);
		this.assertEquals(this.get_entry('życie').get_form(form).str(), 'życiem', form);
		this.assertEquals(this.get_entry('zdjęcie').get_form(form).str(), 'zdjęciem', form);
		this.assertEquals(this.get_entry('jabłko').get_form(form).str(), 'jabłkiem', form);
		this.assertEquals(this.get_entry('dziecko').get_form(form).str(), 'dzieckiem', form);
		this.assertEquals(this.get_entry('imię').get_form(form).str(), 'imieniem', form);
		this.assertEquals(this.get_entry('ramię').get_form(form).str(), 'ramieniem', form);
		this.assertEquals(this.get_entry('źrebię').get_form(form).str(), 'źrebięciem', form);
		this.assertEquals(this.get_entry('prosię').get_form(form).str(), 'prosięciem', form);
		this.assertEquals(this.get_entry('jagnię').get_form(form).str(), 'jagnięciem', form);
		this.assertEquals(this.get_entry('zwierzę').get_form(form).str(), 'zwierzęciem', form);
		this.assertEquals(this.get_entry('dziewczę').get_form(form).str(), 'dziewczęciem', form);
	},

	testAdjectiveInstrumentalSingularFeminine: function ()
	{
		var form = "instrumental.singular.feminine";

		this.assertEquals(this.get_entry('dobry').get_form(form).str(), 'dobrą', form);
		this.assertEquals(this.get_entry('polski').get_form(form).str(), 'polską', form);
		this.assertEquals(this.get_entry('ostatni').get_form(form).str(), 'ostatnią', form);
	},

	testAdjectiveInstrumentalSingularMasculine: function ()
	{
		var form = "instrumental.singular.masculine";

		this.assertEquals(this.get_entry('dobry').get_form(form).str(), 'dobrym', form);
		this.assertEquals(this.get_entry('polski').get_form(form).str(), 'polskim', form);
		this.assertEquals(this.get_entry('ostatni').get_form(form).str(), 'ostatnim', form);
	},

	testNounInstrumentalPlural: function ()
	{
		var form = "instrumental.plural";

		// regular, hard
		this.assertEquals(this.get_entry('syn').get_form(form).str(), 'synami', form);
		this.assertEquals(this.get_entry('ojciec').get_form(form).str(), 'ojcami', form);
		this.assertEquals(this.get_entry('pies').get_form(form).str(), 'psami', form);
		this.assertEquals(this.get_entry('stół').get_form(form).str(), 'stołami', form);
		this.assertEquals(this.get_entry('lekcja').get_form(form).str(), 'lekcjami', form);
		this.assertEquals(this.get_entry('kolega').get_form(form).str(), 'kolegami', form);
		this.assertEquals(this.get_entry('noc').get_form(form).str(), 'nocami', form);
		this.assertEquals(this.get_entry('córka').get_form(form).str(), 'córkami', form);
		this.assertEquals(this.get_entry('święto').get_form(form).str(), 'świętami', form);
		this.assertEquals(this.get_entry('mąż').get_form(form).str(), 'mężami', form);
		this.assertEquals(this.get_entry('muzeum').get_form(form).str(), 'muzeami', form);

		// regular, soft
		this.assertEquals(this.get_entry('babcia').get_form(form).str(), 'babciami', form);
		this.assertEquals(this.get_entry('zdjęcie').get_form(form).str(), 'zdjęciami', form);
		this.assertEquals(this.get_entry('wieś').get_form(form).str(), 'wsiami', form);
		this.assertEquals(this.get_entry('pieśń').get_form(form).str(), 'pieśniami', form);
		this.assertEquals(this.get_entry('gałąź').get_form(form).str(), 'gałęziami', form);
		this.assertEquals(this.get_entry('uczeń').get_form(form).str(), 'uczniami', form);
		this.assertEquals(this.get_entry('gwóźdź').get_form(form).str(), 'gwoździami', form);
		this.assertEquals(this.get_entry('tydzień').get_form(form).str(), 'tygodniami', form);

		// irregular, hard
		this.assertEquals(this.get_entry('brat').get_form(form).str(), 'braćmi', form);
		this.assertEquals(this.get_entry('ksiądz').get_form(form).str(), 'księżmi', form);
		//this.assertEquals(this.get_entry('człowiek').get_form(form).str(), 'ludźmi', form);
		this.assertEquals(this.get_entry('pieniądz').get_form(form).str(), 'pieniędzmi', form);
		this.assertEquals(this.get_entry('dziecko').get_form(form).str(), 'dziećmi', form);
		this.assertEquals(this.get_entry('przyjaciel').get_form(form).str(), 'przyjaciółmi', form);

		// irregular, soft
		this.assertEquals(this.get_entry('gość').get_form(form).str(), 'gośćmi', form);
		this.assertEquals(this.get_entry('kość').get_form(form).str(), 'kośćmi', form);
		this.assertEquals(this.get_entry('liść').get_form(form).str(), 'liśćmi', form);
		this.assertEquals(this.get_entry('nić').get_form(form).str(), 'nićmi', form);
		this.assertEquals(this.get_entry('dłoń').get_form(form).str(), 'dłońmi', form);
		this.assertEquals(this.get_entry('koń').get_form(form).str(), 'końmi', form);

		// neuters, yo!
		this.assertEquals(this.get_entry('imię').get_form(form).str(), 'imionami', form);
		this.assertEquals(this.get_entry('ramię').get_form(form).str(), 'ramionami', form);
		this.assertEquals(this.get_entry('źrebię').get_form(form).str(), 'źrebiętami', form);
		this.assertEquals(this.get_entry('prosię').get_form(form).str(), 'prosiętami', form);
		this.assertEquals(this.get_entry('jagnię').get_form(form).str(), 'jagniętami', form);
		this.assertEquals(this.get_entry('zwierzę').get_form(form).str(), 'zwierzętami', form);
		this.assertEquals(this.get_entry('dziewczę').get_form(form).str(), 'dziewczętami', form);
	},

	testAdjectiveInstrumentalPlural: function ()
	{
		var form = "instrumental.plural";

		this.assertEquals(this.get_entry('dobry').get_form(form).str(), 'dobrymi', form);
		this.assertEquals(this.get_entry('polski').get_form(form).str(), 'polskimi', form);
		this.assertEquals(this.get_entry('ostatni').get_form(form).str(), 'ostatnimi', form);
	},

	testNounMasculineLocativeSingular: function ()
	{
		var form = "locative.singular";

		this.assertEquals(this.get_entry('dach').get_form(form).str(), 'dachu', form);
		this.assertEquals(this.get_entry('hotel').get_form(form).str(), 'hotelu', form);
		this.assertEquals(this.get_entry('dziadek').get_form(form).str(), 'dziadku', form);
		this.assertEquals(this.get_entry('Polak').get_form(form).str(), 'Polaku', form);
		this.assertEquals(this.get_entry('Bóg').get_form(form).str(), 'Bogu', form);
		this.assertEquals(this.get_entry('szpital').get_form(form).str(), 'szpitalu', form);
		this.assertEquals(this.get_entry('pokój').get_form(form).str(), 'pokoju', form);
		this.assertEquals(this.get_entry('kraj').get_form(form).str(), 'kraju', form);
		//this.assertEquals(this.get_entry('człowiek').get_form(form).str(), 'człowieku', form);
		this.assertEquals(this.get_entry('ojciec').get_form(form).str(), 'ojcu', form);
		this.assertEquals(this.get_entry('marzec').get_form(form).str(), 'marcu', form);
		this.assertEquals(this.get_entry('chłopiec').get_form(form).str(), 'chłopcu', form);
		this.assertEquals(this.get_entry('klucz').get_form(form).str(), 'kluczu', form);
		this.assertEquals(this.get_entry('talerz').get_form(form).str(), 'talerzu', form);
		this.assertEquals(this.get_entry('kapelusz').get_form(form).str(), 'kapeluszu', form);
		this.assertEquals(this.get_entry('nóż').get_form(form).str(), 'nożu', form);
		this.assertEquals(this.get_entry('garaż').get_form(form).str(), 'garażu', form);
		this.assertEquals(this.get_entry('cmentarz').get_form(form).str(), 'cmentarzu', form);
		this.assertEquals(this.get_entry('kierowca').get_form(form).str(), 'kierowcy', form);
		this.assertEquals(this.get_entry('sprzedawca').get_form(form).str(), 'sprzedawcy', form);
		this.assertEquals(this.get_entry('stół').get_form(form).str(), 'stole', form);
		this.assertEquals(this.get_entry('pomysł').get_form(form).str(), 'pomyśle', form);
		this.assertEquals(this.get_entry('brat').get_form(form).str(), 'bracie', form);
		this.assertEquals(this.get_entry('wykład').get_form(form).str(), 'wykładzie', form);
		this.assertEquals(this.get_entry('wyjazd').get_form(form).str(), 'wyjeździe', form);
		this.assertEquals(this.get_entry('kaleka').get_form(form).str(), 'kalece', form);
		this.assertEquals(this.get_entry('kolega').get_form(form).str(), 'koledze', form);
		this.assertEquals(this.get_entry('Rzym').get_form(form).str(), 'Rzymie', form);
		this.assertEquals(this.get_entry('szef').get_form(form).str(), 'szefie', form);
		this.assertEquals(this.get_entry('wóz').get_form(form).str(), 'wozie', form);
	},

	testNounFeminineLocativeSingular: function ()
	{
		var form = "locative.singular";

		this.assertEquals(this.get_entry('szkoła').get_form(form).str(), 'szkole', form);
		//this.assertEquals(this.get_entry('Wisła').get_form(form).str(), 'Wiśle', form);
		this.assertEquals(this.get_entry('sosna').get_form(form).str(), 'sośnie', form);
		this.assertEquals(this.get_entry('kobieta').get_form(form).str(), 'kobiecie', form);
		this.assertEquals(this.get_entry('kapusta').get_form(form).str(), 'kapuście', form);
		this.assertEquals(this.get_entry('gwiazda').get_form(form).str(), 'gwiaździe', form);
		this.assertEquals(this.get_entry('ojczyzna').get_form(form).str(), 'ojczyźnie', form);
		this.assertEquals(this.get_entry('siostra').get_form(form).str(), 'siostrze', form);
		this.assertEquals(this.get_entry('podłoga').get_form(form).str(), 'podłodze', form);
		this.assertEquals(this.get_entry('pończocha').get_form(form).str(), 'pończosze', form);
		this.assertEquals(this.get_entry('osoba').get_form(form).str(), 'osobie', form);
		this.assertEquals(this.get_entry('Europa').get_form(form).str(), 'Europie', form);
	},

	testNounNeuterLocativeSingular: function ()
	{
		var form = "locative.singular";

		this.assertEquals(this.get_entry('jabłko').get_form(form).str(), 'jabłku', form);
		//this.assertEquals(this.get_entry('tango').get_form(form).str(), 'tangu', form);
		this.assertEquals(this.get_entry('ucho').get_form(form).str(), 'uchu', form);
		this.assertEquals(this.get_entry('jajko').get_form(form).str(), 'jajku', form);
		this.assertEquals(this.get_entry('wojsko').get_form(form).str(), 'wojsku', form);
		this.assertEquals(this.get_entry('echo').get_form(form).str(), 'echu', form);
		this.assertEquals(this.get_entry('pole').get_form(form).str(), 'polu', form);
		this.assertEquals(this.get_entry('serce').get_form(form).str(), 'sercu', form);
		this.assertEquals(this.get_entry('słońce').get_form(form).str(), 'słońcu', form);
		this.assertEquals(this.get_entry('życie').get_form(form).str(), 'życiu', form);
		this.assertEquals(this.get_entry('morze').get_form(form).str(), 'morzu', form);
		this.assertEquals(this.get_entry('zdjęcie').get_form(form).str(), 'zdjęciu', form);
		this.assertEquals(this.get_entry('imię').get_form(form).str(), 'imieniu', form);
		this.assertEquals(this.get_entry('ramię').get_form(form).str(), 'ramieniu', form);
		this.assertEquals(this.get_entry('jagnię').get_form(form).str(), 'jagnięciu', form);
		this.assertEquals(this.get_entry('źrebię').get_form(form).str(), 'źrebięciu', form);
		this.assertEquals(this.get_entry('prosię').get_form(form).str(), 'prosięciu', form);
		this.assertEquals(this.get_entry('zwierzę').get_form(form).str(), 'zwierzęciu', form);
		this.assertEquals(this.get_entry('dziewczę').get_form(form).str(), 'dziewczęciu', form);
		this.assertEquals(this.get_entry('niemowlę').get_form(form).str(), 'niemowlęciu', form);
		this.assertEquals(this.get_entry('mydło').get_form(form).str(), 'mydle', form);
		this.assertEquals(this.get_entry('krzesło').get_form(form).str(), 'krześle', form);
		this.assertEquals(this.get_entry('złoto').get_form(form).str(), 'złocie', form);
		this.assertEquals(this.get_entry('miasto').get_form(form).str(), 'mieście', form);
		this.assertEquals(this.get_entry('stado').get_form(form).str(), 'stadzie', form);
		this.assertEquals(this.get_entry('gniazdo').get_form(form).str(), 'gnieździe', form);
		this.assertEquals(this.get_entry('pióro').get_form(form).str(), 'piórze', form);
		this.assertEquals(this.get_entry('pismo').get_form(form).str(), 'piśmie', form);
		this.assertEquals(this.get_entry('mięso').get_form(form).str(), 'mięsie', form);
	},

	testNounLocativePlural: function ()
	{
		var form = "locative.plural";

		this.assertEquals(this.get_entry('pies').get_form(form).str(), 'psach', form);
		this.assertEquals(this.get_entry('muzeum').get_form(form).str(), 'muzeach', form);
		this.assertEquals(this.get_entry('pokój').get_form(form).str(), 'pokojach', form);
		this.assertEquals(this.get_entry('matka').get_form(form).str(), 'matkach', form);
		this.assertEquals(this.get_entry('Polak').get_form(form).str(), 'Polakach', form);
		this.assertEquals(this.get_entry('jabłko').get_form(form).str(), 'jabłkach', form);
		this.assertEquals(this.get_entry('lekcja').get_form(form).str(), 'lekcjach', form);
		this.assertEquals(this.get_entry('święto').get_form(form).str(), 'świętach', form);
		this.assertEquals(this.get_entry('oko').get_form(form).str(), 'oczach', form);
		this.assertEquals(this.get_entry('wieś').get_form(form).str(), 'wsiach', form);
		this.assertEquals(this.get_entry('gość').get_form(form).str(), 'gościach', form);
		this.assertEquals(this.get_entry('liść').get_form(form).str(), 'liściach', form);
		this.assertEquals(this.get_entry('koń').get_form(form).str(), 'koniach', form);
		this.assertEquals(this.get_entry('pieśń').get_form(form).str(), 'pieśniach', form);
		this.assertEquals(this.get_entry('gałąź').get_form(form).str(), 'gałęziach', form);
		this.assertEquals(this.get_entry('ciocia').get_form(form).str(), 'ciociach', form);
		this.assertEquals(this.get_entry('imię').get_form(form).str(), 'imionach', form);
		this.assertEquals(this.get_entry('ramię').get_form(form).str(), 'ramionach', form);
		this.assertEquals(this.get_entry('jagnię').get_form(form).str(), 'jagniętach', form);
		this.assertEquals(this.get_entry('źrebię').get_form(form).str(), 'źrebiętach', form);
		this.assertEquals(this.get_entry('prosię').get_form(form).str(), 'prosiętach', form);
		this.assertEquals(this.get_entry('zwierzę').get_form(form).str(), 'zwierzętach', form);
		this.assertEquals(this.get_entry('dziewczę').get_form(form).str(), 'dziewczętach', form);
	},

	testAdjectiveLocativeSingularFeminine: function ()
	{
		var form = "locative.singular.feminine";

		this.assertEquals(this.get_entry('dobry').get_form(form).str(), 'dobrej', form);
		this.assertEquals(this.get_entry('polski').get_form(form).str(), 'polskiej', form);
		this.assertEquals(this.get_entry('ostatni').get_form(form).str(), 'ostatniej', form);
	},

	testAdjectiveLocativeSingularMasculine: function ()
	{
		var form = "locative.singular.masculine";

		this.assertEquals(this.get_entry('dobry').get_form(form).str(), 'dobrym', form);
		this.assertEquals(this.get_entry('polski').get_form(form).str(), 'polskim', form);
		this.assertEquals(this.get_entry('ostatni').get_form(form).str(), 'ostatnim', form);
	},

	testAdjectiveLocativePlural: function ()
	{
		var form = "locative.plural";

		this.assertEquals(this.get_entry('dobry').get_form(form).str(), 'dobrych', form);
		this.assertEquals(this.get_entry('polski').get_form(form).str(), 'polskich', form);
		this.assertEquals(this.get_entry('ostatni').get_form(form).str(), 'ostatnich', form);
	},

	testSyntaxHackMasculineVirile: function ()
	{
		var entry = this.get_entry('mężczyzna');

		this.assertEquals(entry.call_function('adjective_agreement', {form:'nominative.singular'}), 'nominative.singular.masculine');
		this.assertEquals(entry.call_function('adjective_agreement', {form:'nominative.plural'}), 'nominative.plural.virile');
		this.assertEquals(entry.call_function('adjective_agreement', {form:'accusative.singular'}), 'accusative.singular.masculine.animate');
		this.assertEquals(entry.call_function('adjective_agreement', {form:'accusative.plural'}), 'accusative.plural.virile');
		this.assertEquals(entry.call_function('adjective_agreement', {form:'genitive.singular'}), 'genitive.singular.masculine');
		this.assertEquals(entry.call_function('adjective_agreement', {form:'genitive.plural'}), 'genitive.plural');
		this.assertEquals(entry.call_function('adjective_agreement', {form:'dative.singular'}), 'dative.singular.masculine');
		this.assertEquals(entry.call_function('adjective_agreement', {form:'dative.plural'}), 'dative.plural');
		this.assertEquals(entry.call_function('adjective_agreement', {form:'instrumental.singular'}), 'instrumental.singular.masculine');
		this.assertEquals(entry.call_function('adjective_agreement', {form:'instrumental.plural'}), 'instrumental.plural');
		this.assertEquals(entry.call_function('adjective_agreement', {form:'locative.singular'}), 'locative.singular.masculine');
		this.assertEquals(entry.call_function('adjective_agreement', {form:'locative.plural'}), 'locative.plural');
	},

	testSyntaxHackMasculineAnimateNonVirile: function ()
	{
		var entry = this.get_entry('pies');

		this.assertEquals(entry.call_function('adjective_agreement', {form:'nominative.singular'}), 'nominative.singular.masculine');
		this.assertEquals(entry.call_function('adjective_agreement', {form:'nominative.plural'}), 'nominative.plural.non_virile');
		this.assertEquals(entry.call_function('adjective_agreement', {form:'accusative.singular'}), 'accusative.singular.masculine.animate');
		this.assertEquals(entry.call_function('adjective_agreement', {form:'accusative.plural'}), 'accusative.plural.non_virile');
		this.assertEquals(entry.call_function('adjective_agreement', {form:'genitive.singular'}), 'genitive.singular.masculine');
		this.assertEquals(entry.call_function('adjective_agreement', {form:'genitive.plural'}), 'genitive.plural');
		this.assertEquals(entry.call_function('adjective_agreement', {form:'dative.singular'}), 'dative.singular.masculine');
		this.assertEquals(entry.call_function('adjective_agreement', {form:'dative.plural'}), 'dative.plural');
		this.assertEquals(entry.call_function('adjective_agreement', {form:'instrumental.singular'}), 'instrumental.singular.masculine');
		this.assertEquals(entry.call_function('adjective_agreement', {form:'instrumental.plural'}), 'instrumental.plural');
		this.assertEquals(entry.call_function('adjective_agreement', {form:'locative.singular'}), 'locative.singular.masculine');
		this.assertEquals(entry.call_function('adjective_agreement', {form:'locative.plural'}), 'locative.plural');
	},

	testSyntaxHackMasculineInanimate: function ()
	{
		var entry = this.get_entry('stół');

		this.assertEquals(entry.call_function('adjective_agreement', {form:'nominative.singular'}), 'nominative.singular.masculine');
		this.assertEquals(entry.call_function('adjective_agreement', {form:'nominative.plural'}), 'nominative.plural.non_virile');
		this.assertEquals(entry.call_function('adjective_agreement', {form:'accusative.singular'}), 'accusative.singular.masculine.inanimate');
		this.assertEquals(entry.call_function('adjective_agreement', {form:'accusative.plural'}), 'accusative.plural.non_virile');
		this.assertEquals(entry.call_function('adjective_agreement', {form:'genitive.singular'}), 'genitive.singular.masculine');
		this.assertEquals(entry.call_function('adjective_agreement', {form:'genitive.plural'}), 'genitive.plural');
		this.assertEquals(entry.call_function('adjective_agreement', {form:'dative.singular'}), 'dative.singular.masculine');
		this.assertEquals(entry.call_function('adjective_agreement', {form:'dative.plural'}), 'dative.plural');
		this.assertEquals(entry.call_function('adjective_agreement', {form:'instrumental.singular'}), 'instrumental.singular.masculine');
		this.assertEquals(entry.call_function('adjective_agreement', {form:'instrumental.plural'}), 'instrumental.plural');
		this.assertEquals(entry.call_function('adjective_agreement', {form:'locative.singular'}), 'locative.singular.masculine');
		this.assertEquals(entry.call_function('adjective_agreement', {form:'locative.plural'}), 'locative.plural');
	},

	testSyntaxHackFeminine: function ()
	{
		var entry = this.get_entry('kobieta');

		this.assertEquals(entry.call_function('adjective_agreement', {form:'nominative.singular'}), 'nominative.singular.feminine');
		this.assertEquals(entry.call_function('adjective_agreement', {form:'nominative.plural'}), 'nominative.plural.non_virile');
		this.assertEquals(entry.call_function('adjective_agreement', {form:'accusative.singular'}), 'accusative.singular.feminine');
		this.assertEquals(entry.call_function('adjective_agreement', {form:'accusative.plural'}), 'accusative.plural.non_virile');
		this.assertEquals(entry.call_function('adjective_agreement', {form:'genitive.singular'}), 'genitive.singular.feminine');
		this.assertEquals(entry.call_function('adjective_agreement', {form:'genitive.plural'}), 'genitive.plural');
		this.assertEquals(entry.call_function('adjective_agreement', {form:'dative.singular'}), 'dative.singular.feminine');
		this.assertEquals(entry.call_function('adjective_agreement', {form:'dative.plural'}), 'dative.plural');
		this.assertEquals(entry.call_function('adjective_agreement', {form:'instrumental.singular'}), 'instrumental.singular.feminine');
		this.assertEquals(entry.call_function('adjective_agreement', {form:'instrumental.plural'}), 'instrumental.plural');
		this.assertEquals(entry.call_function('adjective_agreement', {form:'locative.singular'}), 'locative.singular.feminine');
		this.assertEquals(entry.call_function('adjective_agreement', {form:'locative.plural'}), 'locative.plural');
	},

	testSyntaxHackNeuter: function ()
	{
		var entry = this.get_entry('okno');

		this.assertEquals(entry.call_function('adjective_agreement', {form:'nominative.singular'}), 'nominative.singular.neuter');
		this.assertEquals(entry.call_function('adjective_agreement', {form:'nominative.plural'}), 'nominative.plural.non_virile');
		this.assertEquals(entry.call_function('adjective_agreement', {form:'accusative.singular'}), 'accusative.singular.neuter');
		this.assertEquals(entry.call_function('adjective_agreement', {form:'accusative.plural'}), 'accusative.plural.non_virile');
		this.assertEquals(entry.call_function('adjective_agreement', {form:'genitive.singular'}), 'genitive.singular.neuter');
		this.assertEquals(entry.call_function('adjective_agreement', {form:'genitive.plural'}), 'genitive.plural');
		this.assertEquals(entry.call_function('adjective_agreement', {form:'dative.singular'}), 'dative.singular.neuter');
		this.assertEquals(entry.call_function('adjective_agreement', {form:'dative.plural'}), 'dative.plural');
		this.assertEquals(entry.call_function('adjective_agreement', {form:'instrumental.singular'}), 'instrumental.singular.neuter');
		this.assertEquals(entry.call_function('adjective_agreement', {form:'instrumental.plural'}), 'instrumental.plural');
		this.assertEquals(entry.call_function('adjective_agreement', {form:'locative.singular'}), 'locative.singular.neuter');
		this.assertEquals(entry.call_function('adjective_agreement', {form:'locative.plural'}), 'locative.plural');
	}
});

// execute the tests
new PolishTest().run(arguments[1]);

